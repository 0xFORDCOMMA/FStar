Translating kind, types, and terms in F* to Z3

Basic Z3 sorts

:extrasorts (Kind Type Term)
:extrafuns  ((KindOf Type Kind)
             (TypeOf Term Type)
             (CtrId Term Int)
             (TCtrId Type Int)
             (Box Int Term)
             (Unbox Term Int)
             (#Int Type))

:assumption (forall ((i Int) (t Term))
                    (and (= (Unbox (Box i)) i) 
                         (= (Box (Unbox t)) t)
                         (= (TypeOf (Box i)) 
                                    #Int)))

================================================================================
Signatures
================================================================================-

 S ::= . 
    |  T::k{ D1:t1, .. Dn:tn } 
    |  Rec(T, ('a::k)_i, (x:s)_i, {fn:t}_i, k)
    |  S, S'

 E ::= 'a::k      (free type variable)
    |   x:t       (free value variable)
    |   v1=v2
    |   t1=t2
    |  'a^k(n)    (bound tvar with optional name)
    |   x^t(n)    (bound tvar with optional name)
    |   E, E'
    |   .

 _______________________
|                       |
| S0;E |- [[S]] = decls |
|_______________________|


   S0; E |- k ok(c)     c not in {P, E}                      (* Translation of non-predicate types *)
   #T fresh, p fresh
   S0;E; #T |- [[k]] = K | Phi+
   S0, T::k{}; E |- [[Di:ti]] = decls_i 
  ---------------------------------------------------------------------------------
    S0; E |- [[T::k{ D1:t1, ..., Dn:tn }]] = :extrafuns (#T Type), 
                                             :assumption (and (= (TCtrId #T) p)
                                                              (Phi+)),
                                              decls_1, ..., decls_n


    S0; E |- k ok(b)    b={P,E}
    k='ai::ki => xj::tj => b
    #T fresh 
    d = :extrapreds ((#T Type_1 ... Type_n Term_1...Term_n))
  --------------------------------------------------------------
    S0; E |- [[T::k{}]] = d
 

    S0; E |- [[S1]] = decls_1 
    S0,S; E |- [[S2]] = decls_2
  --------------------------------------------
    S0; E |- [[S1, S2]] = decls_1, decls_2

 
   ---------------------
     S;E |-  [[.]] = .


================================================================================
Data constructors (never partially applied in F*)
================================================================================


   t= 'a1::k1 -> ... 'an::kn -> x1:t1 -> ... -> xm:tm -> t
   #D fresh, #Dinv_1, #Dinv_{n+m},  p fresh 
   S;E,'a1^k1(a1) ... |- [[ki]] = Ki | _
   S;E,'a1^k1(a1) ... 'an^kn(an), x1^t1(x1)... |- [[ti]] = Ti | _
   S;E,'ai^ki(ai),xi^ti(xi) |- [[t]] = T | _
   decls=  :extrafuns ((#D Type_1... Type_n Term_1... Term_m Term)
                       (#Dinv_1 Term Type) ...
                       (#Dinv_n Term Type)
                       (#Dinv_{n+1} Term Term) ...
                       (#Dinv_{n+m} Term Term))
           :assumption (forall ((a1 Type) ... (an Type)
                                (x1 Term) ... (xn Type))
                                (and 
                                     (implies (and (= (KindOf ai) Ki)
                                                   (= (TypeOf xi) Ti))
                                              (= (TypeOf (#D a1...an x1...an))
                                                 (T)))
                                     (= (CtrId (#D a1...an x1...an))
                                        p)
                                     (= (Dinv_i (#D a1...an x1...an))
                                        ai)
                                     (= (Dinv_k (#D a1...an x1...an))
                                        xk)))
  ----------------------------------------------------------------------
    S;E |- [[D:t]] = decls 


================================================================================
Environments (closed environments only)
================================================================================-

 _________________________
|                         |
| S0;E0 |- [[E]] = decls  |
|_________________________|


  S;E |- k ok(b)   b <> {P, E}
  S;E,'a::k |- [[E']] = decls
  S;E |- [[k]] = K | Phi+
  #alpha fresh
  d = :extrafuns ((#alpha Type))                   (* Note, no TctrId for tvars; could have induced equalities *)
      :assumption (and (= (KindOf #alpha) K)
                       (Phi+))
 --------------------------------------------
  S;E |- [['a::k, E']] = d,decls


  S;E,'a::k |- [[E']] = decls
  #y fresh
  S;E;#y |- [[t]] = T | Phi+
  d = :extrafuns ((#y Term))                   
      :assumption (and (= (TypeOf #y) T)
                       (Phi+))
 --------------------------------------------
  S;E |- [[y:t, E']] = d,decls



  S;E,v1=v2 |- [[E']] = decls
  S;E |- [[vi]] = Vi | Phi+
  d = :assumption (and (= V1 V2)
                       (Phi+))
 --------------------------------------------
  S;E |- [[v1=v2, E']] = d,decls



  S;E,t1=t2 |- [[E']] = decls
  S;E;_ |- [[ti]] = Ti | Phi+
  d = :assumption (and (= T1 T2)
                       (Phi+))
      :assert Phi-
 --------------------------------------------
  S;E |- [[t1=t2, E']] = d,decls


================================================================================
Kinds
================================================================================-

  k ::= b | x:t => k | a::k => k'


:extrafuns ((Star Kind)
            (TK Type Kind Kind)
            (TK_Inv_1 Kind Type)
            (TK_Inv_2 Kind Kind)

            (KK Kind Kind Kind)
            (KK_Inv_1 Kind Kind)
            (KK_Inv_2 Kind Kind))

 ___________________________
|                           |
| S;E;Y |- [[k]] = K | Phi+ |
|___________________________|

let MkKindOf (V:Term) (K:Kind) =  (= (KindOf V) K)
    MkTypeOf  _       (K:Kind) =  true


   S;E;Y |- [[b]] = Star | (mkKindOf Y Star)


   S;E;_ |- [[t]] = T | Phi1+ 
   S;E,x^t;_ |- [[k]] = K | Phi2+ 
 ----------------------------------------------------------------------------
   S;E;Y |- [[x:t => k]] = TK T K | (Phi1+ && Phi2+ && mkKindOf Y (TK T K))


   S;E;_   |- [[k1]] = K1 | Phi1+ 
   S;E,'a^k1;_  |- [[k2]] = K2 | Phi2+
 -----------------------------------------------------------------------------------
   S;E;Y |- [['a::k1 => k2]] = KK K1 K2 | (Phi1+ && Phi2+ && mkKindOf Y (KK K1 K2)) 
  

================================================================================
Types
================================================================================-

  phi, t ::= 'a | int | T | t1 t2 | t v 
          | x:t1 -> t2 
          | 'a::k -> t 
          | x:t{phi} 

  Y ::= V:Z3Term | _
 _____________________________
|                             |
| S; E; Y |- [[t]] = T | Phi+ |
|_____________________________|

:extrafuns ((TT Type Type Type)
            (TT_Inv_1 Type Type)
            (TT_Inv_2 Type Type)

            (TV Type Term Type)
            (TV_Inv_1 Type Type)
            (TV_Inv_2 Type Term)

            (Btvar int Type)
            (BTV_Inv Type int)

            (Bvar int Term)
            (BV_Inv Type int)

            (TFun Type)
            (TTFun Type))

:assumption (forall ((T1 Type) (T2 Type))
                     (and (= (TCtrId (TT T1 T2)) 1))
                          (= (TT_Inv_1 (TT T1 T2)) T1)
                          (= (TT_Inv_2 (TT T1 T2)) T2))

:assumption (forall ((T1 Type) (V2 Term))
                     (and (= (TCtrId (TV T1 V2)) 2))
                          (= (TV_Inv_1 (TV T1 V2)) T1)
                          (= (TV_Inv_2 (TV T1 V2)) V2))

:assumption (forall ((i Int))
                     (and (= (TCtrId (Btvar i)) 3)
                          (= (BTV_Inv (Btvar i) i))))

:assumption (forall ((i Int))
                     (and (= (TCtrId (Bvar i)) 4)
                          (= (BV_Inv (Bvar i) i))))

:assumption (and (= (TCtrId TFun) 5)
                 (= (KindOf TFun)
                    (KK Star (TK (Bvar 0) Star))))

:assumption (and (= (TCtrId TTFun) 6)
                 (= (KindOf TTFun)
                    (KK Star (KK (Btvar 0) Star))))

let MkTypeOf (V:Term) (t:Type) =  (= (TypeOf V) T)
    MkTypeOf  _       (t:Type) =  true

let MkTFun T1 T2 = TT (TT TFun T1) T2

-----------------------------------------------
 S; E; Y |- [[int]] = #Int | MkTypeOf(Y, #Int)


 S; E1 |- k :: ok(b)    b not in {P, E}
 E = E1, 'a::k, E2 
---------------------------------------------------------------------
 S; E; Y |- [['a]] = #alpha | MkTypeOf(Y, #alpha)


 E = E1, 'a^k(a), E2
---------------------------------------------------------------------
 S; E; Y |- [['a]] = a | MkTypeOf(Y) = a


 E = E1, 'a^k, E2
 i = len E2
------------------------------------------------------------
 S; E; Y |- [['a]] = (Btvar i) | MkTypeOf(Y, (Btvar i))


---------------------------------------------
 S; E; Y |- [[T]] = #T | MkTypeOf(Y,#T)


 S; E |- t1 t2 :: k
 S; E |- [[k]] = K | Phi_1+
 S; E; _ |- [[t1]] = T1 | Phi_2+
 S; E; _ |- [[t2]] = T2 | Phi_3+
 Phi_4+ = (= (KindOf (TT T1 T2)) K)
---------------------------------------------------------
 S; E; Y |- [[t1 t2]] = (TT T1 T2) 
                      | (&&_i Phi_i+) && MkTypeOf(Y, (TT T1 T2))


 S; E |- t v :: k
 S; E |- [[k]] = K | Phi_1+
 S; E; _ |- [[t]] = T | Phi_2+
 S; E |- [[v]] = V | Phi_3+
 Phi_4+ = (= (KindOf (TV T V)) K)
--------------------------------------------------------------
 S; E; Y |- [[t v]] = (TV T V) 
                    | (&&_i Phi_i+) && MkTypeOf(Y, (TV T V))


 S; E |- x:t1 -> t2 :: k
 S; E |- [[k]] = K | Phi_1+
 S; E; _ |- [[t1]] = T1 | Phi_2+
 E,x^t1; _ |- [[t2]] = T2 | Phi_3+
 Phi_4+ = (= (KindOf (MkTFun T1 T2)) K)
---------------------------------------------------------
 S; E; Y |- [[x:t1 -> t2]] = MkTFun T1 T2 
                           | (&&_i Phi_i+) && MkTypeOf(x, (MkTFun T1 T2))



 S; E |- 'a::k1 -> t1 :: k
 S; E; _ |- [[k]] = K | Phi_1+
 S; E |- [[k1]] = K1 | Phi_2+
 E,'a^k1;_ |- [[t1]] = T1 | Phi_3+
 Phi_4+ = (= (KindOf (MkTTFun K1 T1)) K)
------------------------------------------------------------------
 S; E; Y |- [['a::k1 -> t1]] = (MkTTFun K1 T1)
                             | (&&_i Phi_i+) && MkTypeOf(x, (MkTTFun K1 T1))


 S; E; Y |- [[t]] = T | Phi_1+
 S; E,x^t(Y) |- [[phi]] = Phi_2+
-------------------------------------------------
 S; E; Y |- [[x:t{phi}]] = T | Phi_1+ && Phi_2+ 


 S; E; _ |- [[t]] = T | Phi_1+
-------------------------------------------------
 S; E; _ |- [[x:t{phi}]] = T | Phi_1+ 


================================================================================
Formulas
================================================================================-

 _______________________
|                       |
| S; E |- [[phi]] = Phi |
|_______________________|

 phi ::= Q 'a::k. phi
      |  Q x:t. phi
      |  phi1 /\ phi2
      |  phi1 \/ phi2
      |  not phi
      |  P ts vs
      |  (= v1 v2)
      

   a fresh
   S;E, 'a^k(a) |- [[phi]] = Phi
   S;E;a |- [[k]] = K | Phi_1+ && Phi_2+    a \not\in FV(Phi_1)
 ------------------------------------------------------------------------------
   S; E |- [[Q 'a::k.  phi]] = (and Phi_1+
                                   (Q (a Type)
                                      (implies (Phi_2+)
                                                Phi)))


   x fresh
   S;E, x^t(x) |- [[phi]] = Phi
   S;E;x |- [[t]] = T | Phi_1+ && Phi_2+      x \not\in FV(Phi_1)
 ------------------------------------------------------------------------------
   S; E |- [[Q x:t.  phi]] = (and Phi_1+
                                  (Q (x Term)
                                      (implies (Phi_2+)
                                                Phi)))


   S;E |- [[phi1]] = Phi1                                                
   S;E |- [[phi2]] = Phi2
 ---------------------------------------------
   S; E |- [[phi1 /\ phi2]] = (and Phi1 Phi2)


   S;E |- [[phi]] = Phi                                               
 -----------------------------------
   S; E |- [[not phi]] = (not Phi)


   S; E |- [[ts]] : Ts; {Phi_t+, Phi-, _}
   S; E |- [[vs]] : Vs; {Phi_v+, Phi-}
 ----------------------------------------
   S; E |- P ts vs : (and (#P Ts Vs) 
                          (Phi_t+)
                          (Phi_v+))


   S; E |- [[vi]] : Vi | Phi_i+
 ----------------------------------------
   S; E |- (= v1 v2) : (and (= V1 V2) Phi_1+ Phi_2+)

================================================================================
Values
================================================================================-

   v ::= x | i | (v1 op v2)
       | D ts vs 
       | \x:t.e | /\'a::k.e

  _________________________________
 |                                 |
 | S;E |- [[v]] = V | Decls | Phi+ |
 |_________________________________|


 ---------------------------------
   S;E |- [[x]] = #x | {} | true


 -------------------------------------
   S;E |- [[i]] = (box i) | {} | true


   S;E |- [[vi]] = Vi | Ds | Phi+
 ---------------------------------------------------------------
   S;E |- [[v1 op v2]] = (box (op (unbox V1) (unbox V2))) 
                        | {} | Phi+


   S; E |- D ts vs : t
   S;E;_ |- [[ts]] = Ts | Phi_1+
   S;E |- [[vs]] = Vs | Decls | Phi_2+
   S; E; (#D Ts Vs) |- [[t]] = T | Phi_3+
 -------------------------------------------------------------------------
   S;E |- (D ts vs) = (#D Ts Vs) 
                    | Decls
                    | &&_i Phi_i+


   S; E |-  \x:t.e : x:t -> t'
   #f fresh                                    
   S; E; #f |- [[x:t -> t']] = T | Phi+
 -------------------------------------------------------------------------
   S; E |- \x:t.e = #f 
                  | :extrafuns ((#f Term))
                  | Phi+


   S; E |-  /\'a::k.e : t
   #f fresh                                    
   S; E; #f |- [[t]] = T | Phi+
 -------------------------------------------------------------------------
   S; E |- /\'a::k.e = #f 
                     | :extrafuns ((#f Term))
                     | Phi+

                    
