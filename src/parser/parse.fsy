%{
#light "off" 
(*
 Known (intentional) ambiguitites:
   3 s/r conflicts on BAR
      match  with | P -> match with | Q -> _ | R -> _
      function ...
      try e with | ... 

   1 r/r conflict on STAR
     (x:t{P} * t')  can also be reduced as ((x:t{P}) * t')
      we pick the first one.

   1 s/r conflict on SEMICOLON
       e1 . ; e2

   1 s/r conflict on LESS
       t < t
       t<t>

   1 s/r conflict on STAR (from the sum types but unclear exactly why)

*)
// (c) Microsoft Corporation. All rights reserved
open Microsoft.FStar.Range
open Microsoft.FStar.Util
open Microsoft.FStar.Absyn.Syntax
open Microsoft.FStar.Absyn.Const
open Microsoft.FStar.Absyn.Util
open Microsoft.FStar.Parser.AST
open Microsoft.FStar.Parser.Util

%} 

%token <bytes> BYTEARRAY
%token <bytes> STRING 
%token <string> IDENT 
%token <string> IDENT_LESS
%token <string> NAME
%token <string> TVAR
%token <string> BASEKIND 
%token <string> LANG
%token <string> INFIX_STAR_STAR_OP 
%token <string> INFIX_COMPARE_OP 
%token <string> INFIX_AT_HAT_OP 
%token <string> INFIX_BAR_OP 
%token <string> PREFIX_OP
%token <string> DIV_MOD_OP 
%token <string> INFIX_STAR_DIV_MOD_OP 
%token <string> INFIX_AMP_OP 
%token <string> PLUS_MINUS_OP 
%token <string> TILDE
%token <string> ADJACENT_PREFIX_PLUS_MINUS_OP 
%token <string> FUNKY_OPERATOR_NAME
%token <string> BANG 

/* bool indicates if INT8 was 'bad' max_int+1, e.g. '128'  */
%token <sbyte * bool> INT8 
%token <int16 * bool> INT16
%token <int32 * bool> INT32 INT32_DOT_DOT
%token <int64 * bool> INT64

%token <byte> UINT8
%token <uint16> UINT16
%token <uint32> UINT32
%token <uint64> UINT64
%token <uint64> UNATIVEINT
%token <int64> NATIVEINT
%token <single> IEEE32
%token <double> IEEE64
%token <char> CHAR
%token <decimal> DECIMAL 
%token <bytes> BIGINT BIGNUM
%token <bool> LET YIELD YIELD_BANG
%token <string> SPLICE_SYMBOL PERCENT_OP BINDER 
%token <string * bool> LQUOTE RQUOTE 
%token FORALL EXISTS ASSUME QUERY DEFINE LOGIC OPAQUE PRAGMAMONADIC PRAGMADYNAMIC PRAGMALIGHT
%token BAR_BAR LEQ GEQ LESS LESSLESS TYP_APP_LESS GREATER LESSGREATER UPCAST DOWNCAST NULL RESERVED MODULE DELEGATE CONSTRAINT BASE SUBTYPE SUBKIND
%token AND AS ASSERT ASR BEGIN DO DONE DOWNTO ELSE ELIF END DOT_DOT
%token EXCEPTION FALSE FOR FUN FUNCTION IF IN FINALLY DO_BANG 
%token LAZY  MATCH METHOD MUTABLE NEW OF 
%token OPEN OR PROP REC THEN TO TRUE TRY TYPE EFFECT VAL INLINE INTERFACE INSTANCE
%token WHEN WHILE WITH HASH AMP AMP_AMP QUOTE LPAREN RPAREN LPAREN_RPAREN STAR COMMA RARROW RARROW2 RRARROW 
%token IFF IMPLIES CONJUNCTION DISJUNCTION 
%token GREATER_DOT GREATER_BAR_RBRACK LPAREN_STAR_RPAREN
%token QMARK QMARK_QMARK DOT COLON COLON_COLON ATSIGN HAT COLON_GREATER  COLON_QMARK_GREATER COLON_QMARK COLON_EQUALS SEMICOLON 
%token SEMICOLON_SEMICOLON LARROW EQUALS EQUALS_EQUALS EQUALS_BANG_EQUALS PERCENT_LBRACK LBRACK  LBRACK_BAR  LBRACK_LESS LBRACE BACKSLASH
%token LBRACE_LESS BAR_RBRACK GREATER_RBRACE UNDERSCORE LENS_PAREN_LEFT LENS_PAREN_RIGHT
%token BAR RBRACK RBRACE MINUS DOLLAR 
%token GREATER_RBRACK STRUCT SIG 
%token STATIC MEMBER CLASS VIRTUAL ABSTRACT OVERRIDE DEFAULT CONSTRUCTOR INHERIT 
%token EXTERN REFERENCE VOID PUBLIC PRIVATE INTERNAL LBRACE_COLON_PATTERN LBRACE_TILDE TILDE_RBRACE PIPE_LEFT PIPE_RIGHT 
%token MONADLATTICE SQUIGGLY_RARROW TOTAL KIND
%token PRINT REQUIRES ENSURES
 
/* These are artificial */
%token <string> LEX_FAILURE
%token COMMENT WHITESPACE HASH_LINE HASH_LIGHT HASH_IF HASH_ELSE HASH_ENDIF INACTIVECODE LINE_COMMENT STRING_TEXT EOF

%nonassoc THEN
%nonassoc ELSE

%start file
%type <file> file

%%
file: 
  | pragmas moduleList
      { ($1, $2) }

moduleList:
  | modul moduleList
      { $1::$2 }
  | EOF
      { [] }
      
modul:    
  | MODULE qname decls endopt
        { Module($2, $3) }

endopt:
  | END  {} 
  |      {}

pragmas: 
  | pragmas pragma
      { ($1@$2) }
  |   { [] }

pragma: 
  | PRAGMAMONADIC LPAREN eitherQname COMMA eitherQname COMMA eitherQname RPAREN
      { [Monadic($3, $5, $7)] }
  | PRAGMALIGHT STRING
      { [] }

decls:
  |   { [] }
  | SEMICOLON_SEMICOLON term 
      { [mk_decl (Main $2) (rhs2 parseState 1 2)] }
  | decl decls
      { ($1::$2) }

decl:
  | decl2 { mk_decl $1 (rhs parseState 1) }

decl2:
  | OPEN qname
      { Open $2 }
  | kind_abbrev 
      { $1 }
  | tycon 
      { $1 }
  | LET recopt letbinding letbindings
      { ToplevelLet($2, $3::$4) }
  | qualifiers VAL eitherName COLON typ
      { Val($1, $3, $5) }
  | assumeTag name COLON formula
      { Assume($1, $2, $4) }
  | EXCEPTION name of_typ
      { Exception($2, $3) }
  | MONADLATTICE LBRACE monads with_lifts RBRACE
      { MonadLat($3, $4) }

tycon:
  | qualifiers TYPE tyconDefinition tyconDefinitions 
      { Tycon ($1, $3::$4) }

  | EFFECT tyconDefinition 
	  { Tycon([Effect], [$2]) }

kind_abbrev: 
  | KIND name binders EQUALS kind
      { KindAbbrev($2, $3, $5) }

monads:
  | monad moreMonads
      { $1::$2 }

moreMonads:
  |    { [] }
  | SEMICOLON monad moreMonads { $2::$3 }

maybeTotal:
  | TOTAL { true }
  |       { false }

monad:
  | name COLON_COLON maybeTotal monad_decls WITH monad_abbrevs
      {
        {mon_name=$1;
         mon_total=$3;
         mon_decls=$4;
         mon_abbrevs=$6}
      }

monad_decl: 
  | kind_abbrev
      { mk_decl $1 (rhs parseState 1) }
  | tycon 
      { mk_decl $1 (rhs parseState 1) }

monad_decls:
  |    { [] }
  | monad_decl monad_decls { $1::$2 }

monad_abbrev: 
  | maybe_default name typars EQUALS typ
      { ($1, $2, $3, $5) }

maybe_default:
  | DEFAULT { true }
  |         { false }

monad_abbrevs:
  | monad_abbrev more_monad_abbrevs 
      { $1::$2 }

more_monad_abbrevs: 
  |     { [] }
  | AND monad_abbrev more_monad_abbrevs { $2::$3 }

with_lifts:
  |        { [] }
  | WITH lifts { $2 }

lifts:
  | lift moreLifts
      { $1::$2 }

moreLifts:
  |   { [] }
  | SEMICOLON lift moreLifts 
      { $2::$3}

lift:
  | name SQUIGGLY_RARROW name EQUALS atomicTerm
      {
        { 
          msource=$1;
          mdest=$3;
          lift_op=$5
        }
      }

qualifier:
  | LOGIC        { Logic }
  | ASSUME       { Assumption }
  | OPAQUE       { Opaque }

qualifiers:
  |                      { [] }
  | qualifier qualifiers { $1::$2 }

assumeTag:
  | ASSUME { [Assumption] }
  | QUERY  { [Query] }
  | DEFINE { [Definition] }

tyconDefinition:
  | eitherName typars ascribeKindOpt tyconDefn
      { $4 $1 $2 $3 }

tyconDefinitions:
  |   { [] }
  | AND tyconDefinition tyconDefinitions
      { $2::$3 }

ident_opt:
  |       { None }
  | ident { Some $1 }

recopt:
  | REC { true }
  |     { false }

letbindings:
  | AND letbinding letbindings 
      { $2::$3 }
  |   { [] }

letbinding:
  | pattern ascribeTypOpt EQUALS term 
      { 
        match $2 with 
          | None -> ($1, $4)
          | Some t -> (mk_pattern (PatAscribed($1, t)) (rhs2 parseState 1 2), $4)
      }
      
pattern:
  | tuplePattern { $1 }


tuplePattern:
  | listPattern patternListComma 
      {
        match $2 with 
          | [] -> $1
          | _ -> mk_pattern (PatTuple($1::$2, false)) (rhs2 parseState 1 2)
      }


patternListComma:
  |   { [] }
  | COMMA listPattern patternListComma { $2::$3 }

listPattern:
  | appPattern consPattern
      { 
        match $2 with 
          | None -> $1
          | Some tl -> mk_pattern (consPat (rhs parseState 2) $1 tl) (rhs2 parseState 1 2) 
      }

consPattern:
  |  { None }
  |  COLON_COLON appPattern consPattern 
      { 
        match $3 with 
          | None -> Some $2
          | Some tl -> Some (mk_pattern (consPat (rhs parseState 1) $2 tl) (rhs2 parseState 1 3))
      }

appPattern:
  | atomicPattern atomicPatterns
      { 
        let hd = $1 in 
        let r = rhs parseState 1 in 
        match $2 with 
          | [] -> hd
          | _ -> mk_pattern (PatApp(hd, $2)) (union_ranges r (rhs parseState 1))
      }

compositePattern:
  | atomicPattern atomicPattern atomicPatterns
      {
        let args = $2::$3 in 
          mk_pattern (PatApp($1, args)) (rhs2 parseState 1 3)
      }
  | tuplePattern { $1 }

atomicPatterns:
  |    { [] }
  | atomicPattern atomicPatterns { $1::$2 }

atomicPattern: 
  | atomicPattern2 { mk_pattern $1 (rhs parseState 1) }

atomicPattern2:
  | nonTvarPattern2 { $1 }
  | tvar  { PatTvar $1 }

nonTvarPattern:
  | nonTvarPattern2 { mk_pattern $1 (rhs parseState 1) }

nonTvarPattern2:
  | UNDERSCORE { PatWild }
  | constant { PatConst $1 }
  | HASH ident { PatVar($2, true) }
  | ident { PatVar($1, false) }
  | qname { PatName $1 }
  | LBRACK patternListSemiColon RBRACK { PatList $2 }
  | LPAREN ascriptionOrPattern RPAREN { $2 } 
  | LBRACE recordPattern RBRACE { PatRecord $2 }
  | LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT 
      { 
        let args = $2::$4::$5 in
        PatTuple(args, true)
      }

ascriptionOrPattern:
  |  nonTvarPattern COLON typ { PatAscribed($1, $3) }
  |  tvar COLON  kind        { PatAscribed(mk_pattern (PatTvar $1) (rhs parseState 1), $3) }
  |  pattern { $1.pat }

maybeAscribeKind: 
  |            { fun p -> p }
  | COLON kind { fun p -> PatAscribed(mk_pattern p (lhs parseState), $2) }

patternListSemiColon:
  |   { [] }
  | appPattern patternListSemiColonRest { $1::$2 }

patternListSemiColonRest:
  |  { [] }
  | SEMICOLON appPattern patternListSemiColonRest { $2::$3 }


recordPattern:
  | lid EQUALS pattern moreFieldPatterns { ($1,$3)::$4 }
      
moreFieldPatterns:
  | { [] }
  | SEMICOLON lid EQUALS pattern moreFieldPatterns { ($2,$4)::$5 }

binder:
  | ident { mk_binder (Variable($1)) (rhs parseState 1) Type false }
  | tvar  { mk_binder (TVariable($1)) (rhs parseState 1) Kind false }
  | LPAREN ident COLON appTerm refineOpt RPAREN 
      { mkRefinedBinder $2 $4 $5 (rhs2 parseState 1 6) false }
  | LPAREN tvar COLON  kind RPAREN { mk_binder (TAnnotated($2, $4)) (rhs2 parseState 1 5) Kind false }

typars:
  | tvarinsts              { $1 }
  | binders                { $1 }

tvarinsts: 
  | TYP_APP_LESS tvars GREATER    { List.map (fun tv -> mk_binder (TVariable(tv)) tv.idRange Kind false) $2 }

binders: 
  | binder binders { $1::$2 }
  |                { [] }

tyconDefn: 
  |               { (fun id binders kopt -> TyconAbstract(id, binders, kopt)) }
  | EQUALS typ    { (fun id binders kopt -> TyconAbbrev(id, binders, kopt, $2)) }
  | EQUALS LBRACE recordFieldDecl recordFields RBRACE { (fun id binders kopt -> TyconRecord(id, binders, kopt, $3::$4)) }
  | EQUALS constructors { (fun id binders kopt -> TyconVariant(id, binders, kopt, $2)) }


recordFields:
  | SEMICOLON recordFieldDecl recordFields
      { $2::$3 }
  | SEMICOLON { [] }
  |   { [] }


constructors:
  |   { [] }
  | constructors constructorDecl
      { $1@[$2] }

recordFieldDecl:
  |  ident COLON tmTuple
      { ($1, $3) }

constructorDecl:
  | BAR name COLON typ
      { ($2,Some $4,false) }
  | BAR name of_typ
      { ($2,$3,true) }

of_typ:
  |        {  None }
  | OF typ { Some $2 }

eitherQname: 
  | eitherQname2 { lid_of_ids $1 }

eitherQname2: 
  | eitherName { [$1] }
  | name DOT eitherQname2 { $1::$3 }

lid:
  | idpath { lid_of_ids $1 }

qname:
  | namepath { lid_of_ids $1 }

eitherName:
  | ident { $1 } 
  | name  { $1 }

ident:
  | IDENT 
      { mk_ident($1, rhs parseState 1)}

name:
  | NAME 
      { mk_ident($1, rhs parseState 1) }

tvars:
  | TVAR                { [mk_ident($1, rhs parseState 1)] }
  | TVAR COMMA tvars    { mk_ident($1, rhs parseState 1) ::$3 }

tvar:
  | TVAR 
      { mk_ident($1, rhs parseState 1) }

namepath:
  | name 
      { [$1] }
  | name DOT namepath
      { $1::$3 }

idpath:
  | ident 
      { [$1] }
  | name DOT idpath
      { $1::$3 }
      
ascribeTypOpt:
  |              { None }
  | COLON product { Some $2 }

ascribeKindOpt: 
  |               { None }
  | COLON  kind { Some $2 }

kind:
  | product { {$1 with level=Kind} }

atomicKind:
  | atomicTerm { let tm:term = $1 in {tm with level=Kind} }
      
typ:
  | simpleTerm { $1 }

term:
  | noSeqTerm 
      { $1 }

  | noSeqTerm SEMICOLON term 
      { mk_term (Seq($1, $3)) (rhs2 parseState 1 3) Expr }


noSeqTerm:
  | simpleTerm { $1 }

  | REQUIRES label_opt reqEnsBinders typ 
     {
        let pos = rhs2 parseState 1 4 in
        let f = match $3 with [] -> $4 | _ -> mk_term (Abs($3, $4)) pos Type in
        mk_term (Requires(f, $2)) pos Type
     }

	 
  | ENSURES label_opt reqEnsBinders typ 
     {
        let pos = rhs2 parseState 1 4 in
        let f = match $3 with [] -> $4 | _ -> mk_term (Abs($3, $4)) pos Type in
        mk_term (Ensures(f, $2)) pos Type 
     }

  | IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
      {
        mk_term (If($2, $4, $6)) (rhs2 parseState 1 6) Expr
      } 

  | IF noSeqTerm THEN noSeqTerm
      {
	    let e = mk_term (Const Const_unit) (rhs2 parseState 4 4) Expr in
        mk_term (If($2, $4, e)) (rhs2 parseState 1 4) Expr
      } 

  | TRY term WITH firstPatternBranch patternBranches 
      {
         mk_term (TryWith($2, $4::$5)) (rhs2 parseState 1 5) Expr
      }

  | MATCH term WITH firstPatternBranch patternBranches 
      {
        mk_term (Match($2, $4::$5)) (rhs2 parseState 1 5) Expr
      }

  | LET recopt letbinding letbindings IN term
      {
        mk_term (Let($2, ($3::$4), $6)) (rhs2 parseState 1 6) Expr
      }

  | FORALL binders DOT qpat noSeqTerm
      {
        mk_term (QForall($2,$4,$5)) (rhs2 parseState 1 5) Formula
      }

  | EXISTS binders DOT qpat noSeqTerm
      {
        mk_term (QExists($2,$4,$5)) (rhs2 parseState 1 5) Formula
      }

  | FUNCTION firstPatternBranch patternBranches 
      { 
        mk_function ($2::$3) (lhs parseState) (rhs2 parseState 1 3)
      }

  | ASSUME atomicTerm 
      { mkExplicitApp (mk_term (Var assume_lid) (rhs parseState 1) Expr) [$2]
          (rhs2 parseState 1 2)
      }

  | PRINT atomicTerm atomicTerms
      { mkExplicitApp
		  (mk_term (Var print_lid) (rhs parseState 1) Expr)
		  ($2 :: $3) (rhs2 parseState 1 3) }

reqEnsBinders:
  |                        { [] }
  | BACKSLASH atomicPatterns funArrow { $2 }

label_opt:
  |                        { None }
  | DOLLAR STRING          { Some (string_of_bytes $2) }

qpat: 
  |   { [] }
  | LBRACE_COLON_PATTERN appTerm morePats RBRACE
      { $2::$3 }

morePats:
  |  { [] }
  | SEMICOLON appTerm morePats  { $2::$3 }

simpleTerm:
  | tmIff { $1 }

  | FUN atomicPattern atomicPatterns funArrow term
      {
        $4 (Abs($2::$3, $5)) (rhs2 parseState 1 5) 
      }

patternBranches:
  |   { [] }
  | patternBranches patternBranch
      { $1@[$2] }

maybeBar:
  |     {()}
  | BAR {()}

firstPatternBranch: /* shift/reduce conflict on BAR ... expected for nested matches */
  | maybeBar disjunctivePattern maybeWhen RARROW term 
      { 
        let pat = match $2 with 
          | [p] -> p 
          | ps -> mk_pattern (PatOr ps) (rhs2 parseState 1 2) in
        (pat, $3, $5) 
      }

patternBranch: /* shift/reduce conflict on BAR ... expected for nested matches */
  | BAR disjunctivePattern maybeWhen RARROW term 
      { 
        let pat = match $2 with 
          | [p] -> p 
          | ps -> mk_pattern (PatOr ps) (rhs2 parseState 1 2) in
        (pat, $3, $5) 
      }

disjunctivePattern:
  | pattern     { [$1] }
  | pattern BAR disjunctivePattern { $1::$3 }

maybeWhen:
  |             { None }
  | WHEN appTerm { Some $2 }       

funArrow:
  | RARROW { fun t r -> mk_term t r Un }
 
tmIff:
  | tmImplies IFF tmIff
      {
        mk_term (Op("<==>", [$1; $3])) (rhs2 parseState 1 3) Formula
      }

  | tmImplies
      { $1 }

tmImplies:
  | tmDisjunction IMPLIES tmImplies
      {
        mk_term (Op("==>", [$1; $3])) (rhs2 parseState 1 3) Formula
      }

  | tmDisjunction
      { $1 }

tmDisjunction:
  | tmDisjunction DISJUNCTION tmConjunction
      { mk_term (Op("\\/", [$1;$3])) (rhs2 parseState 1 3) Formula }
      
  | tmConjunction
      { $1 }

tmConjunction:
  | tmConjunction CONJUNCTION tmTuple
      { mk_term (Op("/\\", [$1;$3])) (rhs2 parseState 1 3) Formula }

  | tmTuple
      { $1 }

tmTuple:
  | tupleN
      {
        match $1 with 
          | [x] -> x
          | components -> mkTuple components (rhs2 parseState 1 1)
      }

tmEq:
  | tmEq COLON_EQUALS tmOr
      {
        mk_term (Op(":=", [$1; $3])) (rhs2 parseState 1 3) Un
      }

  | tmOr
      { $1 }

tmOr:
  | tmOr BAR_BAR tmAnd
      { mk_term (Op("||", [$1; $3])) (rhs2 parseState 1 3) Un}

  | tmAnd
      { $1 }

tmAnd:
  | tmAnd AMP_AMP cmpTerm
      { mk_term (Op("&&", [$1;$3])) (rhs2 parseState 1 3) Un}

  | cmpTerm
      { $1 }
      
cmpTerm:
  | cmpTerm comparisonOp tmCons
      { mk_term (Op($2, [$1;$3])) (rhs2 parseState 1 3) Expr }
  | tmCons
      { $1 }

comparisonOp:
  | PIPE_LEFT { "<|" }
  | PIPE_RIGHT { "|>" }
  | LESSLESS { "<<" }
  | LESS { "<" }
  | GREATER { ">" } 
  | LEQ { "<=" }
  | GEQ { ">=" }
  | ATSIGN { "@" }
  | HAT { "^" }
  | EQUALS { "=" }
  | EQUALS_EQUALS { "==" }
  | EQUALS_BANG_EQUALS { "=!=" }
  | LESSGREATER { "<>" }

tmCons:
  | product COLON_COLON tmCons
      { consTerm (rhs parseState 2) $1 $3 }

  | product
      { $1 }

product: 
  | productOrSumDomain prodArrow product
      { let mkProd = $2 in mkProd (Product([$1], $3)) (rhs2 parseState 1 3) }

  | appTerm prodArrow product
      { 
        let b = mk_binder (NoName $1) (rhs parseState 1) Un false in
        let mkProd = $2 in 
        mkProd (Product([b], $3)) (rhs2 parseState 1 3) 
      }
  | arithTerm
      { $1 }

prodArrow:
  | RARROW { fun t r -> mk_term t r Un }

arithTerm:
  | starDivModTerm PLUS_MINUS_OP arithTerm
      { mk_term (Op($2, [$1;$3])) (rhs2 parseState 1 3) Un}

  | starDivModTerm 
      { $1 }

starDivModTerm:
  | sumType STAR starDivModTerm 
      { 
        mk_term (Op("*", [$1;$3])) (rhs2 parseState 1 3) Un
      }

  | sumType DIV_MOD_OP starDivModTerm
      { mk_term (Op($2, [$1;$3])) (rhs2 parseState 1 3) Un}

  | sumType
      { 
        $1 
      }

sumType:
  | productOrSumDomain STAR sumTypeTail
      { 
        let stt = $3 in
        let binders, final = match stt.tm with 
          | Sum(binders, final) -> binders, final
          | _ -> [], stt in
        mk_term (Sum($1::binders, final)) (rhs2 parseState 1 3) Type 
      }
  | refinementTerm
      { 
        $1 
      }

sumTypeTail:
  | atomicTerm STAR sumType
      { 
        let sum_type = $3 in
        let binders, final = match sum_type.tm with 
          | Sum(binders, final) -> binders, final
          | _ -> [], sum_type in
        let b = mk_binder (NoName $1) (rhs parseState 1) Type false in
        mk_term (Sum(b::binders, final)) (rhs2 parseState 1 3) Type 
      }
  | sumType
      { 
        $1 
      }

productOrSumDomain:
  | ident COLON appTerm refineOpt
      { mkRefinedBinder $1 $3 $4 (rhs2 parseState 1 4) false } 
  | HASH ident COLON appTerm refineOpt
      { mkRefinedBinder $2 $4 $5 (rhs2 parseState 1 4) true } 
  | tvar COLON atomicKind
      { mk_binder (TAnnotated($1, $3)) (rhs2 parseState 1 3) Kind false}
  | HASH tvar COLON atomicKind
      { mk_binder (TAnnotated($2, $4)) (rhs2 parseState 1 4) Kind true}


refineOpt:
  |       { None }
  | LBRACE formula RBRACE { Some $2 }

refinementTerm:
  | ident COLON appTerm LBRACE formula RBRACE 
      {
        mk_term (Refine(mk_binder (Annotated($1, $3)) (rhs2 parseState 1 3) Type false, $5)) 
        (rhs2 parseState 1 6) Type
      }

  | LBRACE recordExp RBRACE { $2 }

  | unaryTerm { $1 }

unaryTerm: 
  | PLUS_MINUS_OP atomicTerm
      { mk_term (Op($1, [$2])) (rhs2 parseState 1 3) Expr }

  | TILDE atomicTerm
      { mk_term (Op($1, [$2])) (rhs2 parseState 1 3) Formula }

  | appTerm { $1 }

appTerm:
  | atomicTerm hashAtomicTerms
      {
        mkApp $1 $2 (rhs2 parseState 1 2)
      }
/*  | fsTypApp  
      { 
        $1
      }
*/

fsTypApp:
  | eitherQname TYP_APP_LESS targs GREATER 
      {
        mkExplicitApp (mk_term (Var $1) (rhs parseState 1) Type) $3 (rhs2 parseState 1 4)
      }


formula:
  | noSeqTerm
      { {$1 with level=Formula} }

atomicTerm:
  | UNDERSCORE { mk_term Wild (rhs parseState 1) Un }
  | ASSERT   { mk_term (Var assert_lid) (rhs parseState 1) Expr }
  | tvar     { mk_term (Tvar($1)) (rhs parseState 1) Type }
  /* | qname    { mk_term (Name $1) (rhs parseState 1) Un } */
  | constant { mk_term (Const $1) (rhs parseState 1) Expr }
  | LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT 
      { 
        match $2 with 
          | [x] -> x
          | components -> mkDTuple components (rhs2 parseState 1 1)
      }
  | projectionLHS maybeFieldProjections 
      {  
        List.fold_left (fun e f -> 
                          mk_term (Project(e, lid_of_ids [f])) (rhs2 parseState 1 3) Expr )
          $1 $2
      }
  | BANG atomicTerm
      { mk_term (Op($1, [$2])) (rhs2 parseState 1 3) Expr }
  | BEGIN term END 
      { $2 }

recdFieldTypes:
  |  { [] }
  | recdFieldType moreRecdFieldTypes { $1::$2 }

moreRecdFieldTypes:
  |  { [] }
  | SEMICOLON recdFieldType moreRecdFieldTypes { $2::$3 }

recdFieldType:
  | lid COLON typ { ($1, $3) }

maybeFieldProjections:
  |    { [] }
  | maybeFieldProjections DOT ident 
      { $1@[$3] }

targs:
  | atomicProductTerm { [$1] }
  | atomicProductTerm COMMA targs { $1::$3 }

atomicProductTerm:
  | atomicTerm STAR atomicProductTerm
      {
        let sum_type = $3 in
        let binders, final = match sum_type.tm with
          | Sum(binders, final) -> binders, final
          | _ -> [], sum_type in
        let b = mk_binder (NoName $1) (rhs parseState 1) Type false in
        mk_term (Sum(b::binders, final)) (rhs2 parseState 1 3) Type
      }
  | atomicTerm {$1}

maybeInsts:
  |    { (fun x -> x) }
  | TYP_APP_LESS targs GREATER 
      {
        (fun (x:term) -> mkExplicitApp x $2
          (union_ranges x.range (rhs2 parseState 1 3)))
      }

projectionLHS:
  | eitherQname maybeInsts
      { 
        let t = if is_name $1 then Name $1 else Var $1 in
        $2 (mk_term t (rhs parseState 1) Un) 
      }
  | LPAREN term maybeWithSort RPAREN 
      { mk_term (Paren($3 $2 (rhs2 parseState 2 3))) (rhs2 parseState 1 4) ($2.level) }
  | LBRACK_BAR semiColonTermList BAR_RBRACK
      {
        let l = mkConsList (rhs2 parseState 1 3) $2 in 
        mkExplicitApp (mk_term (Var (array_mk_array_lid)) (rhs2 parseState 1 3) Expr) 
              [l] (rhs2 parseState 1 3)
      }
  | LBRACK semiColonTermList RBRACK
      { 
        mkConsList (rhs2 parseState 1 3) $2
      }
  | PERCENT_LBRACK semiColonTermList RBRACK
	  {
		mkLexList (rhs2 parseState 1 3) $2
	  }

projection: 
  | projectionLHS DOT ident 
      { mk_term (Project($1, lid_of_ids[$3])) (rhs2 parseState 1 3) Expr } 
  | projectionLHS 
      { $1 }

semiColonTermList:
  |  { [] }
  | noSeqTerm moreSemiColonTerms
      { $1::$2 }

moreSemiColonTerms:
  |   { [] }
  | SEMICOLON { [] }
  | SEMICOLON noSeqTerm moreSemiColonTerms 
      { $2::$3 }

recordExp: 
  | appTerm recordExpRest 
      { $2 $1 (lhs parseState) }

recordExpRest:
  | WITH recordFieldAssignment recordFieldAssignments
      {
        (fun e r -> mk_term (Record(Some e, $2::$3)) (union_ranges r (rhs2 parseState 1 3)) Expr)
      }

  | EQUALS simpleTerm recordFieldAssignments
      {
        (fun e r -> match e.tm with 
          | Var l -> mk_term (Record(None, (l,$2)::$3)) (union_ranges r (rhs2 parseState 1 3)) Expr
          | _ -> errorR(Error("Record field names must be constant identifiers", lhs(parseState)));
            mk_term (Record(None, $3)) (rhs2 parseState 1 3) Expr)
      }

recordFieldAssignment:
  | lid EQUALS simpleTerm
      { ($1,$3) }

recordFieldAssignments:
  |           { [] }
  | SEMICOLON { [] }
  | SEMICOLON recordFieldAssignment recordFieldAssignments
     { $2::$3 }

maybeWithSort:
  |     { fun x r -> x }
  | hasSort simpleTerm
        { fun x r -> mk_term (Ascribed(x,{$2 with level=$1})) (union_ranges r (rhs2 parseState 1 2)) $1 }
hasSort:
  | SUBTYPE { Expr }
  | SUBKIND { Type }

maybeHash: 
  |      { false }
  | HASH { true }

hashAtomicTerms:
  |        { [] }
  | maybeHash atomicTerm hashAtomicTerms { ($2, $1)::$3 }

atomicTerms: 
  |        { [] }
  | atomicTerm atomicTerms { $1::$2 }

consTerm:
  |       { None }
  | COLON_COLON tmTuple consTerm 
      { 
        match $3 with 
          | None -> Some $2
          | Some tl -> Some (consTerm (rhs2 parseState 2 3) $2 tl)
      }

tupleN:
  | tmEq                       { [$1] }
  | tmEq COMMA tupleN       { $1::$3 }

constant:  
  | LPAREN_RPAREN { Const_unit }
  | INT32 
      { 
        if snd $1 then 
          errorR(Error("This number is outside the allowable range for 32-bit signed integers", lhs(parseState)));
        Const_int32 (fst $1) 
      } 
  | UINT8 { Const_uint8 $1 } 
  
  | CHAR { Const_char $1 } 
  | STRING { Const_string ($1,lhs(parseState)) } 
  | BYTEARRAY { Const_bytearray ($1,lhs(parseState)) }
  | TRUE { Const_bool true }
  | FALSE { Const_bool false } 
  | IEEE64 { Const_float $1 } 
  | INT64 
      { 
        if snd $1 then 
          errorR(Error("This number is outside the allowable range for 64-bit signed integers", lhs(parseState)));
        Const_int64 (fst $1) 
      }   
/*
  | UINT32 { Const_uint32 $1 } 
  | INT8 
      { 
        if snd $1 then
          errorR(Error("This number is outside the allowable range for 8-bit signed integers", lhs(parseState)));
        Const_int8 (fst $1) 
      } 
  | INT16 
      { 
        if snd $1 then 
          errorR(Error("This number is outside the allowable range for 16-bit signed integers", lhs(parseState)));
        Const_int16 (fst $1) 
      } 
  | UINT16 { Const_uint16 $1 } 
  | BIGINT { Const_bigint $1 } 
  | DECIMAL { Const_decimal $1 } 
  | BIGNUM { Const_bignum $1 } 
  | UINT64 { Const_uint64 $1 } 
  | NATIVEINT { Const_nativeint $1 } 
  | UNATIVEINT { Const_unativeint $1 } 
  | IEEE32 { Const_float32 $1 } 
*/
