(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
// Signature file for parser generated by fsyacc
module Microsoft.FStar.ParseFStar
type token = 
  | COMMENT of (Sugar.lexcont)
  | WHITESPACE of (Sugar.lexcont)
  | HASH_LINE of (Sugar.lexcont)
  | HASH_LIGHT of (Sugar.lexcont)
  | HASH_IF of (Sugar.lexcont)
  | HASH_ELSE of (Sugar.lexcont)
  | HASH_ENDIF of (Sugar.lexcont)
  | INACTIVECODE of (Sugar.lexcont)
  | LINE_COMMENT of (Sugar.lexcont)
  | STRING_TEXT of (Sugar.lexcont)
  | EOF of (Sugar.lexcont)
  | LEX_FAILURE of (string)
  | EXTERN
  | REFERENCE
  | VOID
  | PUBLIC
  | PRIVATE
  | INTERNAL
  | LBRACE_COLON_PATTERN
  | LBRACE_TILDE
  | TILDE_RBRACE
  | STATIC
  | MEMBER
  | CLASS
  | VIRTUAL
  | ABSTRACT
  | OVERRIDE
  | DEFAULT
  | CONSTRUCTOR
  | INHERIT
  | GREATER_RBRACK
  | STRUCT
  | SIG
  | BAR
  | RBRACK
  | RBRACE
  | MINUS
  | DOLLAR
  | LBRACE_LESS
  | BAR_RBRACK
  | GREATER_RBRACE
  | UNDERSCORE
  | SEMICOLON_SEMICOLON
  | LARROW
  | EQUALS
  | LBRACK
  | LBRACK_BAR
  | LBRACK_LESS
  | LBRACE
  | BACKSLASH
  | QMARK
  | QMARK_QMARK
  | DOT
  | COLON
  | COLON_COLON
  | ATSIGN
  | COLON_GREATER
  | COLON_QMARK_GREATER
  | COLON_QMARK
  | COLON_EQUALS
  | SEMICOLON
  | GREATER_DOT
  | GREATER_BAR_RBRACK
  | LPAREN_STAR_RPAREN
  | IFF
  | IMPLIES
  | CONJUNCTION
  | DISJUNCTION
  | WHEN
  | WHILE
  | WITH
  | HASH
  | AMP
  | AMP_AMP
  | QUOTE
  | LPAREN
  | RPAREN
  | LPAREN_RPAREN
  | STAR
  | COMMA
  | RARROW
  | RARROW2
  | RRARROW
  | OPEN
  | OR
  | PROP
  | REC
  | THEN
  | TO
  | TRUE
  | TRY
  | TYPE
  | VAL
  | INLINE
  | INTERFACE
  | INSTANCE
  | LAZY
  | MATCH
  | METHOD
  | MUTABLE
  | NEW
  | OF
  | EXCEPTION
  | FALSE
  | FOR
  | FUN
  | FUNCTION
  | IF
  | IN
  | FINALLY
  | DO_BANG
  | AND
  | AS
  | ASSERT
  | ASR
  | BEGIN
  | DO
  | DONE
  | DOWNTO
  | ELSE
  | ELIF
  | END
  | DOT_DOT
  | BAR_BAR
  | LEQ
  | GEQ
  | LESS
  | GREATER
  | LESSGREATER
  | GREATERGREATER
  | UPCAST
  | DOWNCAST
  | NULL
  | RESERVED
  | MODULE
  | DELEGATE
  | CONSTRAINT
  | BASE
  | SUBTYPE
  | SUBKIND
  | FORALL
  | EXISTS
  | ASSUME
  | QUERY
  | DEFINE
  | LOGIC
  | PRAGMAMONADIC
  | PRAGMADYNAMIC
  | LQUOTE of (string * bool)
  | RQUOTE of (string * bool)
  | SPLICE_SYMBOL of (string)
  | PERCENT_OP of (string)
  | BINDER of (string)
  | LET of (bool)
  | YIELD of (bool)
  | YIELD_BANG of (bool)
  | BIGINT of (byte[])
  | BIGNUM of (byte[])
  | DECIMAL of (System.Decimal)
  | CHAR of (char)
  | IEEE64 of (double)
  | IEEE32 of (single)
  | NATIVEINT of (int64)
  | UNATIVEINT of (uint64)
  | UINT64 of (uint64)
  | UINT32 of (uint32)
  | UINT16 of (uint16)
  | UINT8 of (byte)
  | INT64 of (int64 * bool)
  | INT32 of (int32 * bool)
  | INT32_DOT_DOT of (int32 * bool)
  | INT16 of (int16 * bool)
  | INT8 of (sbyte * bool)
  | BANG of (string)
  | FUNKY_OPERATOR_NAME of (string)
  | ADJACENT_PREFIX_PLUS_MINUS_OP of (string)
  | PLUS_MINUS_OP of (string)
  | INFIX_AMP_OP of (string)
  | INFIX_STAR_DIV_MOD_OP of (string)
  | DIV_MOD_OP of (string)
  | PREFIX_OP of (string)
  | INFIX_BAR_OP of (string)
  | INFIX_AT_HAT_OP of (string)
  | INFIX_COMPARE_OP of (string)
  | INFIX_STAR_STAR_OP of (string)
  | LANG of (string)
  | BASEKIND of (string)
  | TVAR of (string)
  | NAME of (string)
  | IDENT of (string)
  | STRING of (byte[])
  | BYTEARRAY of (byte[])
type tokenId = 
    | TOKEN_COMMENT
    | TOKEN_WHITESPACE
    | TOKEN_HASH_LINE
    | TOKEN_HASH_LIGHT
    | TOKEN_HASH_IF
    | TOKEN_HASH_ELSE
    | TOKEN_HASH_ENDIF
    | TOKEN_INACTIVECODE
    | TOKEN_LINE_COMMENT
    | TOKEN_STRING_TEXT
    | TOKEN_EOF
    | TOKEN_LEX_FAILURE
    | TOKEN_EXTERN
    | TOKEN_REFERENCE
    | TOKEN_VOID
    | TOKEN_PUBLIC
    | TOKEN_PRIVATE
    | TOKEN_INTERNAL
    | TOKEN_LBRACE_COLON_PATTERN
    | TOKEN_LBRACE_TILDE
    | TOKEN_TILDE_RBRACE
    | TOKEN_STATIC
    | TOKEN_MEMBER
    | TOKEN_CLASS
    | TOKEN_VIRTUAL
    | TOKEN_ABSTRACT
    | TOKEN_OVERRIDE
    | TOKEN_DEFAULT
    | TOKEN_CONSTRUCTOR
    | TOKEN_INHERIT
    | TOKEN_GREATER_RBRACK
    | TOKEN_STRUCT
    | TOKEN_SIG
    | TOKEN_BAR
    | TOKEN_RBRACK
    | TOKEN_RBRACE
    | TOKEN_MINUS
    | TOKEN_DOLLAR
    | TOKEN_LBRACE_LESS
    | TOKEN_BAR_RBRACK
    | TOKEN_GREATER_RBRACE
    | TOKEN_UNDERSCORE
    | TOKEN_SEMICOLON_SEMICOLON
    | TOKEN_LARROW
    | TOKEN_EQUALS
    | TOKEN_LBRACK
    | TOKEN_LBRACK_BAR
    | TOKEN_LBRACK_LESS
    | TOKEN_LBRACE
    | TOKEN_BACKSLASH
    | TOKEN_QMARK
    | TOKEN_QMARK_QMARK
    | TOKEN_DOT
    | TOKEN_COLON
    | TOKEN_COLON_COLON
    | TOKEN_ATSIGN
    | TOKEN_COLON_GREATER
    | TOKEN_COLON_QMARK_GREATER
    | TOKEN_COLON_QMARK
    | TOKEN_COLON_EQUALS
    | TOKEN_SEMICOLON
    | TOKEN_GREATER_DOT
    | TOKEN_GREATER_BAR_RBRACK
    | TOKEN_LPAREN_STAR_RPAREN
    | TOKEN_IFF
    | TOKEN_IMPLIES
    | TOKEN_CONJUNCTION
    | TOKEN_DISJUNCTION
    | TOKEN_WHEN
    | TOKEN_WHILE
    | TOKEN_WITH
    | TOKEN_HASH
    | TOKEN_AMP
    | TOKEN_AMP_AMP
    | TOKEN_QUOTE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LPAREN_RPAREN
    | TOKEN_STAR
    | TOKEN_COMMA
    | TOKEN_RARROW
    | TOKEN_RARROW2
    | TOKEN_RRARROW
    | TOKEN_OPEN
    | TOKEN_OR
    | TOKEN_PROP
    | TOKEN_REC
    | TOKEN_THEN
    | TOKEN_TO
    | TOKEN_TRUE
    | TOKEN_TRY
    | TOKEN_TYPE
    | TOKEN_VAL
    | TOKEN_INLINE
    | TOKEN_INTERFACE
    | TOKEN_INSTANCE
    | TOKEN_LAZY
    | TOKEN_MATCH
    | TOKEN_METHOD
    | TOKEN_MUTABLE
    | TOKEN_NEW
    | TOKEN_OF
    | TOKEN_EXCEPTION
    | TOKEN_FALSE
    | TOKEN_FOR
    | TOKEN_FUN
    | TOKEN_FUNCTION
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_FINALLY
    | TOKEN_DO_BANG
    | TOKEN_AND
    | TOKEN_AS
    | TOKEN_ASSERT
    | TOKEN_ASR
    | TOKEN_BEGIN
    | TOKEN_DO
    | TOKEN_DONE
    | TOKEN_DOWNTO
    | TOKEN_ELSE
    | TOKEN_ELIF
    | TOKEN_END
    | TOKEN_DOT_DOT
    | TOKEN_BAR_BAR
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_LESS
    | TOKEN_GREATER
    | TOKEN_LESSGREATER
    | TOKEN_GREATERGREATER
    | TOKEN_UPCAST
    | TOKEN_DOWNCAST
    | TOKEN_NULL
    | TOKEN_RESERVED
    | TOKEN_MODULE
    | TOKEN_DELEGATE
    | TOKEN_CONSTRAINT
    | TOKEN_BASE
    | TOKEN_SUBTYPE
    | TOKEN_SUBKIND
    | TOKEN_FORALL
    | TOKEN_EXISTS
    | TOKEN_ASSUME
    | TOKEN_QUERY
    | TOKEN_DEFINE
    | TOKEN_LOGIC
    | TOKEN_PRAGMAMONADIC
    | TOKEN_PRAGMADYNAMIC
    | TOKEN_LQUOTE
    | TOKEN_RQUOTE
    | TOKEN_SPLICE_SYMBOL
    | TOKEN_PERCENT_OP
    | TOKEN_BINDER
    | TOKEN_LET
    | TOKEN_YIELD
    | TOKEN_YIELD_BANG
    | TOKEN_BIGINT
    | TOKEN_BIGNUM
    | TOKEN_DECIMAL
    | TOKEN_CHAR
    | TOKEN_IEEE64
    | TOKEN_IEEE32
    | TOKEN_NATIVEINT
    | TOKEN_UNATIVEINT
    | TOKEN_UINT64
    | TOKEN_UINT32
    | TOKEN_UINT16
    | TOKEN_UINT8
    | TOKEN_INT64
    | TOKEN_INT32
    | TOKEN_INT32_DOT_DOT
    | TOKEN_INT16
    | TOKEN_INT8
    | TOKEN_BANG
    | TOKEN_FUNKY_OPERATOR_NAME
    | TOKEN_ADJACENT_PREFIX_PLUS_MINUS_OP
    | TOKEN_PLUS_MINUS_OP
    | TOKEN_INFIX_AMP_OP
    | TOKEN_INFIX_STAR_DIV_MOD_OP
    | TOKEN_DIV_MOD_OP
    | TOKEN_PREFIX_OP
    | TOKEN_INFIX_BAR_OP
    | TOKEN_INFIX_AT_HAT_OP
    | TOKEN_INFIX_COMPARE_OP
    | TOKEN_INFIX_STAR_STAR_OP
    | TOKEN_LANG
    | TOKEN_BASEKIND
    | TOKEN_TVAR
    | TOKEN_NAME
    | TOKEN_IDENT
    | TOKEN_STRING
    | TOKEN_BYTEARRAY
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startfile
    | NONTERM_file
    | NONTERM_moduleList
    | NONTERM_modul
    | NONTERM_endopt
    | NONTERM_pragmas
    | NONTERM_pragma
    | NONTERM_decls
    | NONTERM_decl
    | NONTERM_decl'
    | NONTERM_valQuals
    | NONTERM_erefDefn
    | NONTERM_erefFields
    | NONTERM_logicTag
    | NONTERM_assumeTag
    | NONTERM_tycon
    | NONTERM_tyconDefinition
    | NONTERM_tyconDefinitions
    | NONTERM_tyconQuals
    | NONTERM_logicArrayArgs
    | NONTERM_recopt
    | NONTERM_letbindings
    | NONTERM_letbinding
    | NONTERM_pattern
    | NONTERM_appPattern
    | NONTERM_listPattern
    | NONTERM_consPattern
    | NONTERM_tuplePattern
    | NONTERM_compositePattern
    | NONTERM_atomicPatterns
    | NONTERM_atomicPattern
    | NONTERM_atomicPattern'
    | NONTERM_nonTvarPattern
    | NONTERM_nonTvarPattern'
    | NONTERM_ascriptionOrPattern
    | NONTERM_maybeAscribeKind
    | NONTERM_patternListSemiColon
    | NONTERM_patternListComma
    | NONTERM_recordPattern
    | NONTERM_binder
    | NONTERM_binders
    | NONTERM_tyconDefn
    | NONTERM_recordFields
    | NONTERM_constructors
    | NONTERM_recordFieldDecl
    | NONTERM_constructorDecl
    | NONTERM_eitherQname
    | NONTERM_eitherQname'
    | NONTERM_lid
    | NONTERM_qname
    | NONTERM_eitherName
    | NONTERM_ident
    | NONTERM_name
    | NONTERM_tvar
    | NONTERM_namepath
    | NONTERM_idpath
    | NONTERM_ascribeTypOpt
    | NONTERM_ascribeKindOpt
    | NONTERM_kind
    | NONTERM_atomicKind
    | NONTERM_typ
    | NONTERM_term
    | NONTERM_noSeqTerm
    | NONTERM_qpat
    | NONTERM_morePats
    | NONTERM_simpleTerm
    | NONTERM_patternBranches
    | NONTERM_patternBranch
    | NONTERM_funArrow
    | NONTERM_tmIff
    | NONTERM_tmImplies
    | NONTERM_tmDisjunction
    | NONTERM_tmConjunction
    | NONTERM_tmTuple
    | NONTERM_tmEq
    | NONTERM_tmCons
    | NONTERM_tmOr
    | NONTERM_tmAnd
    | NONTERM_cmpTerm
    | NONTERM_comparisonOp
    | NONTERM_arithTerm
    | NONTERM_starDivModTerm
    | NONTERM_sumType
    | NONTERM_product'
    | NONTERM_prodArrow
    | NONTERM_sumTypeTail
    | NONTERM_product
    | NONTERM_productOrSumDomain
    | NONTERM_refineOpt
    | NONTERM_refinementTerm
    | NONTERM_unaryTerm
    | NONTERM_appTerm
    | NONTERM_formula
    | NONTERM_atomicTerm
    | NONTERM_recdFieldTypes
    | NONTERM_moreRecdFieldTypes
    | NONTERM_recdFieldType
    | NONTERM_maybeFieldProjections
    | NONTERM_projectionLHS
    | NONTERM_projection
    | NONTERM_semiColonTermList
    | NONTERM_moreSemiColonTerms
    | NONTERM_recordExp
    | NONTERM_recordExpRest
    | NONTERM_recordFieldAssignment
    | NONTERM_recordFieldAssignments
    | NONTERM_maybeWithSort
    | NONTERM_hasSort
    | NONTERM_atomicTerms
    | NONTERM_consTerm
    | NONTERM_tupleTerm
    | NONTERM_constant
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val file : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (file) 
