
** Conflict (shift/reduce) in state 565.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 565, looking ahead at BAR, reducing production
** noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) . 

** In state 565, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 
                                                 reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch 

** Conflict (shift/reduce) in state 548.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 548, looking ahead at BAR, reducing production
** noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) . 

** In state 548, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) 
                                                   reverse_left_flexible_list(BAR,__anonymous_6) . BAR patternBranch 

** Conflict (shift/reduce) in state 547.
** Token involved: LBRACE
** This state is reached from term after reading:

FUNCTION LPAREN tuplePattern COLON FUN nonempty_list(patternOrMultibinder) RARROW MATCH term WITH 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         patternBranch 
         disjunctivePattern maybeFocusArrow term 
         separated_nonempty_list(BAR,tuplePattern) 
         tuplePattern 
         separated_nonempty_list(COMMA,constructorPattern) 
         constructorPattern 
         atomicPattern 
         (?)

** In state 547, looking ahead at LBRACE, shifting is permitted
** because of the following sub-derivation:

LPAREN tuplePattern COLON typ refineOpt RPAREN 
                          simpleTerm 
                          FUN nonempty_list(patternOrMultibinder) RARROW term 
                                                                         noSeqTerm 
                                                                         MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) 
                                                                                         patternBranch 
                                                                                         disjunctivePattern maybeFocusArrow term 
                                                                                         separated_nonempty_list(BAR,tuplePattern) 
                                                                                         tuplePattern 
                                                                                         separated_nonempty_list(COMMA,constructorPattern) 
                                                                                         constructorPattern 
                                                                                         atomicPattern 
                                                                                         . LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE 

** In state 547, looking ahead at LBRACE, reducing production
** reverse_left_flexible_list(BAR,__anonymous_6) -> 
** is permitted because of the following sub-derivation:

LPAREN tuplePattern COLON typ refineOpt RPAREN // lookahead token appears because refineOpt can begin with LBRACE
                          simpleTerm // lookahead token is inherited
                          FUN nonempty_list(patternOrMultibinder) RARROW term // lookahead token is inherited
                                                                         noSeqTerm // lookahead token is inherited
                                                                         MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) // lookahead token is inherited
                                                                                         . 

** Conflict (shift/reduce) in state 434.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 434, looking ahead at BAR, reducing production
** noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) . 

** In state 434, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
                                            reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch 

** Conflict (shift/reduce) in state 367.
** Token involved: LBRACE
** This state is reached from term after reading:

FUNCTION LPAREN tuplePattern COLON lidentOrUnderscore COLON appTerm 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         patternBranch 
         disjunctivePattern maybeFocusArrow term 
         separated_nonempty_list(BAR,tuplePattern) 
         tuplePattern 
         separated_nonempty_list(COMMA,constructorPattern) 
         constructorPattern 
         atomicPattern 
         (?)

** In state 367, looking ahead at LBRACE, reducing production
** option(__anonymous_7) -> 
** is permitted because of the following sub-derivation:

LPAREN tuplePattern COLON typ refineOpt RPAREN // lookahead token appears because refineOpt can begin with LBRACE
                          simpleTerm // lookahead token is inherited
                          tmIff // lookahead token is inherited
                          tmImplies // lookahead token is inherited
                          tmArrow(tmFormula) // lookahead token is inherited
                          tmFormula // lookahead token is inherited
                          tmConjunction // lookahead token is inherited
                          tmTuple // lookahead token is inherited
                          separated_nonempty_list(COMMA,tmEq) // lookahead token is inherited
                          tmEq // lookahead token is inherited
                          tmNoEq // lookahead token is inherited
                          lidentOrUnderscore COLON appTerm refineOpt // lookahead token is inherited
                                                           option(__anonymous_7) // lookahead token is inherited
                                                           . 

** In state 367, looking ahead at LBRACE, shifting is permitted
** because of the following sub-derivation:

LPAREN tuplePattern COLON typ refineOpt RPAREN 
                          simpleTerm 
                          tmIff 
                          tmImplies IFF tmIff 
                          tmArrow(tmFormula) IMPLIES tmImplies 
                          tmFormula RARROW tmArrow(tmFormula) 
                          tmConjunction 
                          tmTuple 
                          separated_nonempty_list(COMMA,tmEq) 
                          tmEq 
                          tmNoEq 
                          lidentOrUnderscore COLON appTerm refineOpt 
                                                           option(__anonymous_7) 
                                                           . LBRACE noSeqTerm RBRACE 

** Conflict (shift/reduce) in state 336.
** Tokens involved: SEMICOLON_SEMICOLON SEMICOLON
** The following explanations concentrate on token SEMICOLON_SEMICOLON.
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow noSeqTerm 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
(?)

** In state 336, looking ahead at SEMICOLON_SEMICOLON, reducing production
** term -> noSeqTerm 
** is permitted because of the following sub-derivation:

noSeqTerm SEMICOLON_SEMICOLON term // lookahead token appears
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) // lookahead token is inherited
         patternBranch // lookahead token is inherited
         disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                            noSeqTerm . 

** In state 336, looking ahead at SEMICOLON_SEMICOLON, shifting is permitted
** because of the following sub-derivation:

noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         patternBranch 
         disjunctivePattern maybeFocusArrow term 
                                            noSeqTerm . SEMICOLON_SEMICOLON term 
