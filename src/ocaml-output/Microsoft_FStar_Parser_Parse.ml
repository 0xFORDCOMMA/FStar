open Support.Microsoft.FStar.Util
open Support.Microsoft.FStar.Range
open Microsoft_FStar_Options
open Microsoft_FStar_Absyn_Syntax
open Microsoft_FStar_Absyn_Const
open Microsoft_FStar_Absyn_Util
open Microsoft_FStar_Parser_AST
open Support.Microsoft.FStar.Parser.Util
type token =
  | BYTEARRAY of (bytes)
  | STRING of (bytes)
  | IDENT of (string)
  | IDENT_LESS of (string)
  | NAME of (string)
  | TVAR of (string)
  | DIV_MOD_OP of (string)
  | TILDE of (string)
  | CUSTOM_OP of (string)
  | INT8 of (sbyte * bool)
  | INT16 of (int16 * bool)
  | INT32 of (int32 * bool)
  | INT32_DOT_DOT of (int32 * bool)
  | INT64 of (int64 * bool)
  | INT of (int32 * bool)
  | UINT8 of (byte)
  | UINT16 of (uint16)
  | UINT32 of (uint32)
  | UINT64 of (uint64)
  | UNATIVEINT of (uint64)
  | NATIVEINT of (int64)
  | IEEE32 of (single)
  | IEEE64 of (double)
  | CHAR of (char)
  | DECIMAL of (decimal)
  | BIGINT of (bytes)
  | BIGNUM of (bytes)
  | LET of (bool)
  | LQUOTE of (string * bool)
  | RQUOTE of (string * bool)
  | FORALL
  | EXISTS
  | ASSUME
  | QUERY
  | DEFINE
  | LOGIC
  | OPAQUE
  | PRAGMALIGHT
  | PRAGMA_SET_OPTIONS
  | PRAGMA_RESET_OPTIONS
  | BAR_BAR
  | LEQ
  | GEQ
  | LESS
  | LESSLESS
  | TYP_APP_LESS
  | TYP_APP_GREATER
  | LESSGREATER
  | SUBTYPE
  | SUBKIND
  | BANG
  | AND
  | AS
  | ASSERT
  | BEGIN
  | ELSE
  | END
  | DOT_DOT
  | EXCEPTION
  | FALSE
  | FOR
  | FUN
  | FUNCTION
  | IF
  | IN
  | FINALLY
  | RESERVED
  | MODULE
  | DEFAULT
  | LAZY
  | MATCH
  | OF
  | OPEN
  | OR
  | REC
  | THEN
  | TO
  | TRUE
  | TRY
  | TYPE
  | EFFECT
  | VAL
  | WHEN
  | WITH
  | HASH
  | AMP
  | AMP_AMP
  | QUOTE
  | LPAREN
  | RPAREN
  | LPAREN_RPAREN
  | STAR
  | COMMA
  | RARROW
  | IFF
  | IMPLIES
  | CONJUNCTION
  | DISJUNCTION
  | DOT
  | COLON
  | COLON_COLON
  | ATSIGN
  | HAT
  | COLON_EQUALS
  | SEMICOLON
  | SEMICOLON_SEMICOLON
  | EQUALS
  | EQUALS_EQUALS
  | PERCENT_LBRACK
  | LBRACK
  | LBRACK_BAR
  | LBRACE
  | BACKSLASH
  | BANG_LBRACE
  | BAR_RBRACK
  | UNDERSCORE
  | LENS_PAREN_LEFT
  | LENS_PAREN_RIGHT
  | BAR
  | RBRACK
  | RBRACE
  | MINUS
  | DOLLAR
  | PUBLIC
  | PRIVATE
  | LBRACE_COLON_PATTERN
  | PIPE_LEFT
  | PIPE_RIGHT
  | NEW_EFFECT
  | SUB_EFFECT
  | SQUIGGLY_RARROW
  | TOTAL
  | KIND
  | PRINT
  | REQUIRES
  | ENSURES
  | PLUS_OP
  | MINUS_OP
  | BAR_FOCUS
  | LEX_FAILURE of (string)
  | COMMENT
  | WHITESPACE
  | HASH_LINE
  | HASH_LIGHT
  | HASH_IF
  | HASH_ELSE
  | HASH_ENDIF
  | INACTIVECODE
  | LINE_COMMENT
  | STRING_TEXT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parse.mly"

(*
 Known (intentional) ambiguitites: 6 s/r conflicts in total; resolved by shifting
   3 s/r conflicts on BAR
      match  with | P -> match with | Q -> _ | R -> _
      function ...
      try e with | ... 

   1 s/r conflict on SEMICOLON
       fun x -> e1 ; e2
	 is parsed as
		(fun x -> e1; e2)
	 rather than
		(fun x -> e1); e2

   1 s/r conflict on DOT
      A.B ^ .C 

   1 s/r conflict on LBRACE
	
      Consider: 
		  let f (x: y:int & z:vector y{z=z /\ y=0}) = 0
	  
	  This is parsed as:
        let f (x: (y:int & z:vector y{z=z /\ y=0})) = 0
	  rather than:
	    let f (x: (y:int & z:vector y){z=z /\ y=0}) = 0

	  Analogous ambiguities with -> and * as well.
*)











# 199 "parse.ml"
let yytransl_const = [|
  287 (* FORALL *);
  288 (* EXISTS *);
  289 (* ASSUME *);
  290 (* QUERY *);
  291 (* DEFINE *);
  292 (* LOGIC *);
  293 (* OPAQUE *);
  294 (* PRAGMALIGHT *);
  295 (* PRAGMA_SET_OPTIONS *);
  296 (* PRAGMA_RESET_OPTIONS *);
  297 (* BAR_BAR *);
  298 (* LEQ *);
  299 (* GEQ *);
  300 (* LESS *);
  301 (* LESSLESS *);
  302 (* TYP_APP_LESS *);
  303 (* TYP_APP_GREATER *);
  304 (* LESSGREATER *);
  305 (* SUBTYPE *);
  306 (* SUBKIND *);
  307 (* BANG *);
  308 (* AND *);
  309 (* AS *);
  310 (* ASSERT *);
  311 (* BEGIN *);
  312 (* ELSE *);
  313 (* END *);
  314 (* DOT_DOT *);
  315 (* EXCEPTION *);
  316 (* FALSE *);
  317 (* FOR *);
  318 (* FUN *);
  319 (* FUNCTION *);
  320 (* IF *);
  321 (* IN *);
  322 (* FINALLY *);
  323 (* RESERVED *);
  324 (* MODULE *);
  325 (* DEFAULT *);
  326 (* LAZY *);
  327 (* MATCH *);
  328 (* OF *);
  329 (* OPEN *);
  330 (* OR *);
  331 (* REC *);
  332 (* THEN *);
  333 (* TO *);
  334 (* TRUE *);
  335 (* TRY *);
  336 (* TYPE *);
  337 (* EFFECT *);
  338 (* VAL *);
  339 (* WHEN *);
  340 (* WITH *);
  341 (* HASH *);
  342 (* AMP *);
  343 (* AMP_AMP *);
  344 (* QUOTE *);
  345 (* LPAREN *);
  346 (* RPAREN *);
  347 (* LPAREN_RPAREN *);
  348 (* STAR *);
  349 (* COMMA *);
  350 (* RARROW *);
  351 (* IFF *);
  352 (* IMPLIES *);
  353 (* CONJUNCTION *);
  354 (* DISJUNCTION *);
  355 (* DOT *);
  356 (* COLON *);
  357 (* COLON_COLON *);
  358 (* ATSIGN *);
  359 (* HAT *);
  360 (* COLON_EQUALS *);
  361 (* SEMICOLON *);
  362 (* SEMICOLON_SEMICOLON *);
  363 (* EQUALS *);
  364 (* EQUALS_EQUALS *);
  365 (* PERCENT_LBRACK *);
  366 (* LBRACK *);
  367 (* LBRACK_BAR *);
  368 (* LBRACE *);
  369 (* BACKSLASH *);
  370 (* BANG_LBRACE *);
  371 (* BAR_RBRACK *);
  372 (* UNDERSCORE *);
  373 (* LENS_PAREN_LEFT *);
  374 (* LENS_PAREN_RIGHT *);
  375 (* BAR *);
  376 (* RBRACK *);
  377 (* RBRACE *);
  378 (* MINUS *);
  379 (* DOLLAR *);
  380 (* PUBLIC *);
  381 (* PRIVATE *);
  382 (* LBRACE_COLON_PATTERN *);
  383 (* PIPE_LEFT *);
  384 (* PIPE_RIGHT *);
  385 (* NEW_EFFECT *);
  386 (* SUB_EFFECT *);
  387 (* SQUIGGLY_RARROW *);
  388 (* TOTAL *);
  389 (* KIND *);
  390 (* PRINT *);
  391 (* REQUIRES *);
  392 (* ENSURES *);
  393 (* PLUS_OP *);
  394 (* MINUS_OP *);
  395 (* BAR_FOCUS *);
  397 (* COMMENT *);
  398 (* WHITESPACE *);
  399 (* HASH_LINE *);
  400 (* HASH_LIGHT *);
  401 (* HASH_IF *);
  402 (* HASH_ELSE *);
  403 (* HASH_ENDIF *);
  404 (* INACTIVECODE *);
  405 (* LINE_COMMENT *);
  406 (* STRING_TEXT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BYTEARRAY *);
  258 (* STRING *);
  259 (* IDENT *);
  260 (* IDENT_LESS *);
  261 (* NAME *);
  262 (* TVAR *);
  263 (* DIV_MOD_OP *);
  264 (* TILDE *);
  265 (* CUSTOM_OP *);
  266 (* INT8 *);
  267 (* INT16 *);
  268 (* INT32 *);
  269 (* INT32_DOT_DOT *);
  270 (* INT64 *);
  271 (* INT *);
  272 (* UINT8 *);
  273 (* UINT16 *);
  274 (* UINT32 *);
  275 (* UINT64 *);
  276 (* UNATIVEINT *);
  277 (* NATIVEINT *);
  278 (* IEEE32 *);
  279 (* IEEE64 *);
  280 (* CHAR *);
  281 (* DECIMAL *);
  282 (* BIGINT *);
  283 (* BIGNUM *);
  284 (* LET *);
  285 (* LQUOTE *);
  286 (* RQUOTE *);
  396 (* LEX_FAILURE *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\006\000\006\000\007\000\009\000\009\000\
\005\000\005\000\010\000\010\000\004\000\004\000\004\000\003\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\014\000\014\000\013\000\025\000\025\000\032\000\
\033\000\033\000\026\000\034\000\034\000\034\000\034\000\034\000\
\034\000\018\000\018\000\021\000\027\000\028\000\028\000\039\000\
\039\000\015\000\015\000\017\000\017\000\016\000\040\000\042\000\
\044\000\044\000\043\000\046\000\046\000\045\000\049\000\049\000\
\048\000\048\000\047\000\050\000\050\000\053\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\056\000\
\056\000\055\000\055\000\059\000\059\000\057\000\061\000\061\000\
\062\000\062\000\062\000\036\000\036\000\064\000\063\000\063\000\
\063\000\029\000\029\000\038\000\038\000\038\000\038\000\067\000\
\067\000\067\000\068\000\068\000\066\000\069\000\069\000\024\000\
\024\000\071\000\072\000\072\000\073\000\073\000\060\000\008\000\
\035\000\035\000\019\000\022\000\065\000\065\000\052\000\075\000\
\075\000\074\000\074\000\041\000\041\000\037\000\037\000\030\000\
\020\000\020\000\020\000\011\000\011\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\079\000\
\079\000\077\000\077\000\084\000\084\000\031\000\031\000\081\000\
\081\000\088\000\088\000\089\000\089\000\080\000\087\000\090\000\
\090\000\091\000\091\000\086\000\085\000\085\000\092\000\092\000\
\093\000\093\000\094\000\094\000\070\000\096\000\096\000\097\000\
\097\000\098\000\098\000\099\000\099\000\100\000\100\000\101\000\
\101\000\076\000\076\000\102\000\102\000\103\000\103\000\105\000\
\106\000\106\000\107\000\107\000\108\000\108\000\108\000\109\000\
\109\000\109\000\109\000\104\000\104\000\058\000\058\000\110\000\
\110\000\110\000\110\000\083\000\023\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\115\000\115\000\117\000\
\117\000\116\000\114\000\114\000\118\000\118\000\119\000\119\000\
\113\000\113\000\113\000\113\000\113\000\113\000\122\000\122\000\
\123\000\123\000\121\000\121\000\124\000\124\000\124\000\111\000\
\125\000\125\000\126\000\127\000\127\000\127\000\120\000\120\000\
\128\000\128\000\129\000\129\000\112\000\112\000\130\000\130\000\
\131\000\131\000\095\000\095\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000"

let yylen = "\002\000\
\001\000\003\000\002\000\002\000\001\000\004\000\001\000\000\000\
\000\000\002\000\002\000\001\000\000\000\002\000\002\000\001\000\
\002\000\001\000\001\000\004\000\005\000\004\000\003\000\003\000\
\002\000\001\000\004\000\003\000\005\000\004\000\009\000\003\000\
\000\000\003\000\005\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000\002\000\001\000\004\000\000\000\003\000\000\000\
\001\000\001\000\000\000\003\000\000\000\004\000\001\000\002\000\
\000\000\003\000\002\000\000\000\003\000\002\000\003\000\001\000\
\000\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\001\000\001\000\003\000\003\000\003\000\006\000\004\000\
\001\000\000\000\002\000\000\000\003\000\004\000\000\000\005\000\
\001\000\001\000\007\000\001\000\001\000\003\000\001\000\001\000\
\000\000\002\000\000\000\000\000\002\000\005\000\002\000\003\000\
\001\000\000\000\000\000\002\000\003\000\004\000\003\000\000\000\
\002\000\001\000\001\000\002\000\000\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\001\000\001\000\
\003\000\001\000\003\000\000\000\002\000\000\000\002\000\001\000\
\001\000\005\000\005\000\001\000\003\000\001\000\003\000\003\000\
\006\000\004\000\005\000\005\000\006\000\003\000\002\000\000\000\
\002\000\000\000\004\000\000\000\003\000\001\000\005\000\000\000\
\002\000\000\000\001\000\001\000\001\000\005\000\005\000\001\000\
\003\000\000\000\002\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\001\000\001\000\003\000\
\001\000\003\000\001\000\002\000\001\000\003\000\001\000\001\000\
\003\000\001\000\003\000\001\000\003\000\003\000\001\000\003\000\
\006\000\003\000\001\000\001\000\001\000\000\000\003\000\002\000\
\002\000\002\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\003\000\002\000\002\000\003\000\000\000\002\000\000\000\
\003\000\003\000\000\000\003\000\001\000\003\000\000\000\003\000\
\002\000\004\000\003\000\003\000\003\000\003\000\000\000\002\000\
\000\000\003\000\000\000\002\000\000\000\001\000\003\000\002\000\
\003\000\003\000\003\000\000\000\001\000\003\000\000\000\002\000\
\001\000\001\000\000\000\001\000\000\000\003\000\000\000\002\000\
\000\000\003\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\036\000\038\000\000\000\000\000\
\012\000\000\000\039\000\000\000\041\000\000\000\040\000\000\000\
\032\001\001\000\000\000\000\000\026\000\016\000\018\000\019\000\
\000\000\000\000\000\000\050\000\000\000\010\000\011\000\124\000\
\000\000\017\000\000\000\120\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\005\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\043\000\027\001\026\001\123\000\
\127\000\023\001\031\001\022\001\024\001\030\001\025\001\029\001\
\028\001\000\000\000\000\021\001\000\000\000\000\071\000\000\000\
\075\000\000\000\074\000\000\000\055\000\000\000\000\000\000\000\
\067\000\068\000\069\000\072\000\000\000\023\000\000\000\000\000\
\000\000\089\000\000\000\090\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\223\000\000\000\000\000\000\000\000\000\
\000\000\000\000\212\000\000\000\213\000\000\000\000\000\000\000\
\000\000\000\000\222\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\142\000\000\000\137\000\224\000\225\000\180\000\
\000\000\114\000\000\000\000\000\000\000\219\000\158\000\000\000\
\000\000\000\000\181\000\000\000\000\000\000\000\000\000\189\000\
\000\000\000\000\000\000\000\000\200\000\000\000\204\000\000\000\
\000\000\235\000\015\000\002\000\000\000\004\000\121\000\122\000\
\000\000\000\000\028\000\000\000\000\000\000\000\024\000\000\000\
\073\000\081\000\000\000\000\000\000\000\000\000\000\000\130\000\
\000\000\000\000\000\000\119\000\000\000\000\000\020\000\000\000\
\000\000\000\000\056\000\000\000\059\000\000\000\062\000\113\000\
\129\000\000\000\095\000\096\000\000\000\000\000\098\000\115\000\
\218\000\000\000\000\000\000\000\151\000\228\000\000\000\000\000\
\163\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\216\000\217\000\000\000\000\000\116\000\
\000\000\241\000\000\000\000\000\012\001\220\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\190\000\
\191\000\000\000\000\000\196\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\000\000\093\000\000\000\
\092\000\000\000\000\000\000\000\022\000\221\000\000\000\077\000\
\000\000\083\000\076\000\000\000\078\000\000\000\000\000\000\000\
\133\000\000\000\000\000\000\000\066\000\000\000\000\000\029\000\
\136\000\000\000\000\000\000\000\229\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\001\010\001\000\000\000\000\
\000\000\252\000\245\000\244\000\243\000\000\000\000\000\000\001\
\210\000\000\000\248\000\246\000\226\000\153\000\143\000\144\000\
\000\000\118\000\000\000\000\000\192\000\141\000\000\000\173\000\
\175\000\000\000\179\000\020\001\000\000\000\000\000\000\188\000\
\194\000\198\000\201\000\203\000\205\000\206\000\000\000\007\000\
\006\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\131\000\000\000\000\000\052\000\054\000\
\058\000\061\000\035\000\000\000\000\000\000\000\000\000\000\000\
\172\000\000\000\000\000\161\000\000\000\000\000\000\000\000\000\
\160\000\160\000\242\000\008\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\240\000\014\001\236\000\047\000\000\000\
\094\000\135\000\000\000\045\000\000\000\030\000\000\000\080\000\
\085\000\000\000\086\000\000\000\000\000\000\000\000\000\138\000\
\139\000\159\000\000\000\169\000\171\000\000\000\000\000\000\000\
\000\000\255\000\000\000\000\000\001\001\002\001\250\000\000\000\
\238\000\126\000\000\000\101\000\000\000\000\000\000\000\000\000\
\079\000\000\000\149\000\000\000\000\000\000\000\166\000\145\000\
\003\001\000\000\209\000\000\000\000\000\000\000\108\000\000\000\
\215\000\000\000\091\000\000\000\155\000\164\000\165\000\000\000\
\006\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\157\000\167\000\109\000\000\000\000\000\102\000\000\000\111\000\
\000\000\000\000\000\000\088\000\104\000\110\000\032\000\000\000\
\031\000\034\000"

let yydgoto = "\002\000\
\017\000\018\000\041\000\042\000\020\000\045\000\046\000\073\000\
\089\001\021\000\121\000\022\000\023\000\024\000\029\000\074\000\
\183\000\025\000\122\000\123\000\026\000\124\000\013\001\086\000\
\167\000\038\000\161\000\005\001\091\000\032\001\125\000\207\001\
\219\001\027\000\162\000\008\001\094\001\140\001\000\000\076\000\
\185\000\077\000\078\000\187\000\079\000\189\000\080\000\191\000\
\000\000\081\000\082\000\126\000\172\000\127\000\175\000\173\000\
\178\000\144\001\018\001\126\001\147\001\093\000\197\000\009\001\
\092\001\189\001\204\001\173\001\191\001\128\000\129\000\130\000\
\232\000\180\000\036\000\131\000\111\001\132\000\226\000\210\000\
\039\001\133\000\134\000\181\001\135\000\114\001\116\001\211\000\
\200\001\041\001\119\001\136\000\137\000\138\000\139\000\140\000\
\141\000\142\000\143\000\250\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\152\000\153\000\221\000\238\000\
\154\000\002\001\000\000\000\000\000\000\068\001\234\000\047\001\
\217\000\223\000\059\001\050\001\056\001\127\001\165\001\048\001\
\239\000\000\000\000\000"

let yysindex = "\073\000\
\189\016\000\000\045\255\000\000\000\000\000\000\097\255\121\255\
\000\000\131\255\000\000\131\255\000\000\131\255\000\000\131\255\
\000\000\000\000\216\015\006\000\000\000\000\000\000\000\000\000\
\233\254\131\255\019\255\000\000\233\019\000\000\000\000\000\000\
\054\255\000\000\047\255\000\000\023\255\000\000\041\255\183\015\
\216\015\142\000\131\255\000\000\000\000\006\000\102\255\102\255\
\159\255\012\255\067\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\159\255\233\019\000\000\233\019\102\255\000\000\233\019\
\000\000\117\255\000\000\078\255\000\000\093\255\088\255\233\019\
\000\000\000\000\000\000\000\000\161\016\000\000\131\255\131\255\
\251\254\000\000\091\255\000\000\041\255\164\019\045\255\041\255\
\041\255\164\019\164\019\000\000\183\015\233\019\076\255\183\015\
\183\015\183\015\000\000\183\015\000\000\183\015\183\015\183\015\
\164\019\164\019\000\000\117\018\077\255\077\255\164\019\164\019\
\000\000\099\255\000\000\106\255\000\000\000\000\000\000\000\000\
\160\255\000\000\110\255\112\255\122\255\000\000\000\000\120\255\
\021\255\125\255\000\000\011\255\185\255\141\255\022\255\000\000\
\133\255\000\000\234\018\143\255\000\000\250\254\000\000\138\255\
\225\255\000\000\000\000\000\000\216\015\000\000\000\000\000\000\
\181\255\036\255\000\000\135\255\131\255\041\255\000\000\183\015\
\000\000\000\000\000\000\136\255\147\255\134\255\123\255\000\000\
\146\255\119\255\139\255\000\000\149\255\233\019\000\000\117\018\
\145\255\233\019\000\000\233\019\000\000\233\019\000\000\000\000\
\000\000\151\255\000\000\000\000\159\255\117\018\000\000\000\000\
\000\000\233\019\155\255\163\255\000\000\000\000\199\255\233\019\
\000\000\000\000\233\019\183\255\180\255\184\255\116\255\167\255\
\153\255\156\255\150\255\238\254\148\255\178\255\154\255\142\255\
\019\000\161\016\161\016\000\000\000\000\164\019\102\255\000\000\
\164\019\000\000\117\018\183\015\000\000\000\000\164\019\117\018\
\117\018\117\018\117\018\117\018\117\018\117\018\117\018\000\000\
\000\000\117\018\117\018\000\000\234\018\234\018\234\018\234\018\
\234\018\188\255\222\255\102\255\000\000\018\000\000\000\190\255\
\000\000\161\016\041\255\196\255\000\000\000\000\161\016\000\000\
\233\019\000\000\000\000\102\255\000\000\233\019\233\019\117\255\
\000\000\183\015\093\255\088\255\000\000\000\018\195\255\000\000\
\000\000\117\255\173\255\173\255\000\000\189\255\174\255\197\255\
\209\255\183\015\076\255\076\255\000\000\000\000\210\255\000\018\
\183\015\000\000\000\000\000\000\000\000\102\255\000\018\000\000\
\000\000\164\019\000\000\000\000\000\000\000\000\000\000\000\000\
\200\255\000\000\224\255\017\000\000\000\000\000\122\255\000\000\
\000\000\125\255\000\000\000\000\185\255\141\255\022\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\159\255\000\000\
\000\000\181\255\226\255\020\000\117\018\215\255\000\000\234\255\
\000\018\213\255\134\255\000\000\230\255\093\255\000\000\000\000\
\000\000\000\000\000\000\161\016\025\000\164\019\183\015\183\015\
\000\000\183\015\233\019\000\000\233\019\164\019\005\000\029\000\
\000\000\000\000\000\000\000\000\167\255\250\255\255\255\255\255\
\178\255\183\015\164\019\000\000\000\000\000\000\000\000\018\000\
\000\000\000\000\022\017\000\000\117\018\000\000\183\015\000\000\
\000\000\102\255\000\000\244\255\213\255\183\015\004\000\000\000\
\000\000\000\000\209\255\000\000\000\000\183\015\183\015\174\255\
\174\255\000\000\000\018\102\255\000\000\000\000\000\000\242\255\
\000\000\000\000\164\019\000\000\253\255\026\000\248\255\011\000\
\000\000\031\000\000\000\164\019\254\255\211\254\000\000\000\000\
\000\000\255\255\000\000\023\000\032\000\131\255\000\000\159\255\
\000\000\233\019\000\000\004\000\000\000\000\000\000\000\183\015\
\000\000\117\018\159\255\015\000\237\254\040\000\048\000\230\255\
\000\000\000\000\000\000\023\000\032\000\000\000\161\016\000\000\
\000\018\159\255\033\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000"

let yyrindex = "\000\000\
\012\000\000\000\068\020\045\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\236\254\000\000\000\000\000\000\000\000\000\000\
\075\000\000\000\102\005\000\000\000\000\000\000\051\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\044\015\000\000\053\000\000\000\170\001\190\002\019\016\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\122\000\000\000\000\000\000\000\066\013\000\000\068\020\062\000\
\062\000\000\000\000\000\000\000\000\000\000\000\098\020\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\049\000\
\000\000\045\000\000\000\000\000\139\017\139\017\000\000\000\000\
\000\000\125\002\000\000\105\001\000\000\000\000\000\000\000\000\
\243\001\000\000\029\007\088\011\145\003\000\000\000\000\216\000\
\246\010\050\010\000\000\208\009\012\009\072\008\132\007\000\000\
\000\000\070\006\000\000\177\006\000\000\219\005\000\000\110\004\
\003\004\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\099\015\124\013\000\000\000\000\000\000\051\000\000\000\000\000\
\000\000\000\000\198\019\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\016\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\000\212\254\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\003\007\000\000\000\000\000\000\000\000\000\211\013\
\000\000\000\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\126\014\
\000\000\000\000\094\000\190\002\000\000\000\000\000\000\000\000\
\000\000\113\000\044\016\044\016\000\000\000\000\186\011\004\255\
\085\000\000\000\098\020\098\020\000\000\000\000\000\000\000\000\
\252\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\217\004\000\000\133\000\000\000\000\000\000\000\145\003\000\000\
\000\000\148\010\000\000\000\000\110\009\170\008\230\007\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\015\135\000\000\000\000\000\184\014\000\000\000\000\
\000\000\095\000\050\000\000\000\065\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\012\
\000\000\000\000\000\000\000\000\212\254\000\000\076\000\076\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\014\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\095\000\000\000\081\000\000\000\
\000\000\000\000\225\254\000\000\000\000\000\000\000\000\126\012\
\224\012\000\000\000\000\088\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\242\014\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\047\019\093\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\000\000\000\068\014\000\000\099\000\065\000\
\000\000\000\000\000\000\000\000\093\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\189\001\247\255\000\000\152\001\000\000\034\000\
\000\000\000\000\069\000\000\000\000\000\000\000\108\001\157\255\
\084\255\179\001\227\255\193\255\000\000\241\000\227\254\021\000\
\000\000\000\000\221\255\131\000\186\255\208\254\024\255\010\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\192\255\
\000\000\000\000\198\255\008\255\202\255\196\000\204\255\161\255\
\000\000\000\000\155\001\116\000\000\000\194\000\000\000\000\000\
\000\000\086\000\130\000\187\255\022\000\000\000\000\000\000\000\
\098\000\035\000\024\000\000\000\000\000\018\255\000\000\005\001\
\000\000\220\000\154\001\083\255\206\000\080\000\128\001\128\255\
\059\255\166\255\176\255\052\000\007\001\000\000\000\000\000\000\
\000\000\043\255\096\000\009\001\000\000\012\001\164\255\000\000\
\014\001\011\001\013\001\000\000\118\255\000\000\130\255\000\000\
\000\000\008\001\000\000\140\255\000\000\000\000\000\000\199\000\
\000\000\000\000\000\000\000\000\000\000\136\000\000\000\000\000\
\082\000\000\000\145\000\146\000\000\000\112\000\164\254\000\000\
\000\000\000\000\000\000"

let yytablesize = 5591
let yytable = "\075\000\
\179\000\013\000\170\000\201\000\075\001\044\000\008\000\205\000\
\206\000\090\000\025\001\009\000\163\000\181\000\174\000\013\000\
\032\000\159\000\159\000\164\000\252\000\192\000\199\000\224\000\
\033\001\203\000\204\000\190\000\228\000\229\000\248\000\155\000\
\220\000\222\000\105\001\166\001\169\000\075\000\056\000\075\000\
\176\000\057\000\075\000\056\000\138\001\034\000\057\000\037\000\
\198\001\208\000\075\000\052\000\085\000\107\001\005\000\006\000\
\047\000\048\000\049\000\042\000\042\000\042\000\170\000\090\000\
\200\000\054\001\090\000\090\000\200\000\200\000\253\000\124\001\
\075\000\001\000\112\000\253\000\157\000\081\001\128\001\195\000\
\215\001\006\001\024\001\200\000\200\000\199\001\168\000\011\000\
\055\001\200\000\200\000\007\001\174\001\201\001\029\001\012\001\
\069\001\168\000\030\000\170\000\168\001\196\000\034\001\244\000\
\056\000\050\000\032\000\103\001\042\000\148\001\254\000\080\001\
\038\001\175\001\245\000\254\000\241\000\109\001\242\000\028\000\
\142\001\194\000\031\000\165\000\089\000\085\000\082\001\027\001\
\249\000\089\000\254\000\255\000\090\000\028\001\168\000\032\000\
\090\000\190\000\084\001\085\001\086\001\156\000\067\001\013\000\
\083\000\087\000\040\001\003\001\071\001\065\001\015\000\076\001\
\075\000\088\000\092\000\190\000\075\000\155\001\075\000\156\001\
\075\000\056\000\063\001\064\001\045\001\046\001\168\000\031\001\
\182\000\207\000\121\001\122\001\075\000\213\000\214\000\033\001\
\215\000\184\000\075\000\160\001\161\001\075\000\083\000\212\000\
\083\000\186\000\185\001\083\000\188\000\216\000\216\000\216\000\
\218\000\219\000\209\000\083\000\096\001\198\000\230\000\225\000\
\200\000\200\000\095\001\200\000\231\000\233\000\237\000\098\001\
\092\000\200\000\235\000\092\000\092\000\101\001\240\000\174\000\
\236\000\083\000\099\001\211\001\102\001\243\000\084\000\033\001\
\090\001\246\000\251\000\247\000\253\000\000\001\159\000\001\001\
\004\001\129\001\010\001\015\001\016\001\090\000\017\001\021\001\
\223\001\023\001\019\001\075\000\020\001\022\001\176\000\014\001\
\075\000\075\000\033\000\026\001\035\000\035\001\035\000\037\001\
\039\000\030\001\042\001\061\001\084\000\036\001\084\000\043\001\
\053\001\084\000\051\000\044\001\057\001\035\000\058\001\049\001\
\051\001\084\000\060\001\052\001\062\001\092\000\088\001\091\001\
\176\000\092\000\113\001\035\000\200\000\151\001\087\001\160\000\
\160\000\093\001\166\000\118\001\115\001\157\001\108\001\084\000\
\067\001\083\000\110\001\123\001\149\001\083\000\097\001\083\000\
\070\001\083\000\040\001\035\000\040\001\035\000\177\000\130\001\
\035\000\134\001\013\000\117\001\131\001\083\000\136\001\132\001\
\035\000\139\001\137\001\083\000\143\001\013\000\083\000\035\000\
\035\000\043\000\008\000\172\001\176\001\141\001\146\001\009\000\
\200\000\042\000\042\000\042\000\159\001\075\000\035\000\075\000\
\200\000\150\001\220\000\042\000\042\000\042\000\104\001\042\000\
\042\000\042\000\158\001\196\001\163\001\200\000\112\000\164\001\
\117\000\177\001\187\001\112\000\180\001\192\001\112\000\112\000\
\193\001\112\000\112\000\190\001\176\000\194\001\197\001\084\000\
\195\001\120\001\202\001\084\000\097\000\084\000\092\000\084\000\
\125\001\208\001\042\000\112\000\083\000\112\000\176\000\214\001\
\203\001\083\000\083\000\084\000\042\000\188\001\112\000\112\000\
\042\000\084\000\217\001\112\000\084\000\011\001\200\000\222\001\
\218\001\225\001\112\000\112\000\112\000\099\000\082\000\132\000\
\099\000\251\000\206\001\251\000\075\000\247\000\035\000\065\000\
\007\001\084\000\035\000\099\000\035\000\212\001\035\000\249\000\
\057\000\053\000\170\000\237\000\112\000\125\000\154\001\057\000\
\214\000\087\000\035\000\057\000\206\001\019\000\152\001\153\001\
\035\000\057\000\057\000\035\000\004\001\158\000\057\000\112\000\
\057\000\156\000\202\000\112\000\112\000\053\000\112\000\112\000\
\005\001\014\001\084\000\057\000\057\000\106\000\057\000\084\000\
\084\000\105\000\179\001\033\000\135\001\171\000\014\001\106\001\
\057\000\216\001\183\001\224\001\145\001\220\001\083\000\226\001\
\083\000\170\001\178\001\066\001\221\001\213\001\184\001\100\001\
\193\000\112\001\239\000\174\000\160\000\227\000\072\001\209\001\
\174\000\073\001\182\001\174\000\174\000\074\001\174\000\174\000\
\078\001\035\000\077\001\079\001\177\000\083\001\035\000\035\000\
\174\000\174\000\169\001\174\000\210\001\133\001\162\001\174\000\
\174\000\167\001\174\000\186\001\000\000\000\000\000\000\000\000\
\174\000\000\000\000\000\174\000\174\000\000\000\000\000\000\000\
\174\000\000\000\000\000\174\000\000\000\000\000\177\000\174\000\
\174\000\174\000\000\000\174\000\000\000\000\000\000\000\000\000\
\000\000\174\000\000\000\000\000\084\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\174\000\174\000\000\000\000\000\000\000\000\000\000\000\174\000\
\000\000\000\000\174\000\000\000\000\000\000\000\174\000\174\000\
\174\000\000\000\000\000\000\000\174\000\000\000\000\000\000\000\
\174\000\174\000\000\000\174\000\174\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\035\000\000\000\000\000\
\000\000\117\000\117\000\117\000\000\000\117\000\117\000\117\000\
\000\000\117\000\000\000\000\000\117\000\000\000\117\000\117\000\
\117\000\000\000\000\000\000\000\115\000\000\000\000\000\117\000\
\117\000\000\000\177\000\084\000\117\000\000\000\000\000\000\000\
\000\000\117\000\000\000\000\000\117\000\117\000\000\000\117\000\
\117\000\117\000\000\000\000\000\177\000\000\000\117\000\117\000\
\000\000\117\000\117\000\117\000\117\000\000\000\117\000\117\000\
\117\000\117\000\000\000\117\000\117\000\000\000\000\000\000\000\
\000\000\117\000\000\000\000\000\117\000\117\000\205\001\000\000\
\000\000\117\000\035\000\000\000\117\000\000\000\117\000\000\000\
\117\000\117\000\117\000\000\000\117\000\117\000\117\000\117\000\
\000\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\117\000\000\000\000\000\117\000\000\000\000\000\
\117\000\117\000\117\000\117\000\000\000\117\000\117\000\117\000\
\117\000\000\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\000\000\000\000\000\000\117\000\000\000\000\000\
\000\000\117\000\117\000\117\000\117\000\117\000\000\000\000\000\
\000\000\117\000\117\000\239\000\239\000\239\000\000\000\239\000\
\239\000\239\000\000\000\239\000\057\000\000\000\239\000\000\000\
\239\000\239\000\239\000\057\000\000\000\000\000\227\000\057\000\
\000\000\239\000\239\000\000\000\000\000\057\000\239\000\000\000\
\000\000\000\000\057\000\239\000\057\000\000\000\239\000\239\000\
\000\000\239\000\239\000\239\000\000\000\000\000\000\000\000\000\
\057\000\239\000\057\000\239\000\239\000\239\000\239\000\000\000\
\239\000\239\000\239\000\239\000\057\000\239\000\239\000\000\000\
\000\000\000\000\000\000\239\000\000\000\000\000\239\000\239\000\
\000\000\000\000\000\000\239\000\000\000\000\000\239\000\000\000\
\239\000\000\000\239\000\239\000\239\000\000\000\239\000\239\000\
\239\000\239\000\000\000\239\000\239\000\239\000\239\000\239\000\
\239\000\239\000\239\000\239\000\239\000\239\000\000\000\239\000\
\000\000\000\000\239\000\239\000\239\000\239\000\000\000\239\000\
\239\000\239\000\239\000\000\000\239\000\239\000\239\000\239\000\
\239\000\239\000\239\000\239\000\000\000\000\000\000\000\239\000\
\000\000\000\000\000\000\239\000\239\000\239\000\239\000\239\000\
\000\000\000\000\000\000\239\000\239\000\115\000\115\000\115\000\
\000\000\115\000\115\000\115\000\000\000\115\000\000\000\000\000\
\115\000\000\000\115\000\115\000\115\000\000\000\000\000\000\000\
\013\001\000\000\000\000\115\000\115\000\000\000\000\000\000\000\
\115\000\000\000\000\000\000\000\000\000\115\000\000\000\000\000\
\115\000\115\000\000\000\115\000\115\000\115\000\000\000\000\000\
\000\000\000\000\115\000\000\000\000\000\115\000\115\000\115\000\
\115\000\000\000\115\000\115\000\115\000\115\000\000\000\115\000\
\115\000\000\000\000\000\000\000\000\000\115\000\000\000\000\000\
\115\000\115\000\000\000\000\000\000\000\115\000\000\000\000\000\
\115\000\000\000\115\000\000\000\115\000\115\000\115\000\000\000\
\115\000\115\000\115\000\115\000\000\000\115\000\115\000\115\000\
\115\000\115\000\115\000\115\000\115\000\115\000\115\000\115\000\
\000\000\115\000\000\000\000\000\115\000\115\000\115\000\115\000\
\000\000\115\000\115\000\115\000\115\000\000\000\115\000\115\000\
\115\000\115\000\115\000\115\000\115\000\115\000\000\000\000\000\
\000\000\115\000\000\000\000\000\000\000\115\000\115\000\000\000\
\115\000\115\000\211\000\000\000\000\000\115\000\115\000\227\000\
\227\000\227\000\000\000\227\000\227\000\227\000\000\000\227\000\
\060\000\000\000\227\000\000\000\227\000\227\000\227\000\060\000\
\000\000\000\000\060\000\060\000\000\000\227\000\227\000\000\000\
\000\000\060\000\227\000\000\000\000\000\000\000\060\000\227\000\
\060\000\000\000\227\000\227\000\000\000\227\000\227\000\227\000\
\000\000\000\000\000\000\060\000\060\000\227\000\060\000\227\000\
\227\000\227\000\227\000\000\000\227\000\227\000\227\000\227\000\
\060\000\227\000\227\000\000\000\000\000\000\000\000\000\227\000\
\000\000\000\000\227\000\227\000\000\000\000\000\000\000\227\000\
\000\000\000\000\227\000\000\000\227\000\000\000\227\000\227\000\
\227\000\000\000\227\000\227\000\227\000\227\000\000\000\227\000\
\227\000\227\000\227\000\227\000\227\000\227\000\227\000\227\000\
\227\000\000\000\000\000\227\000\000\000\207\000\227\000\227\000\
\227\000\227\000\000\000\227\000\227\000\227\000\227\000\000\000\
\227\000\227\000\227\000\227\000\227\000\227\000\227\000\227\000\
\000\000\000\000\000\000\227\000\000\000\000\000\000\000\227\000\
\227\000\227\000\227\000\227\000\000\000\000\000\000\000\227\000\
\227\000\011\001\011\001\011\001\000\000\011\001\011\001\013\001\
\000\000\013\001\000\000\000\000\011\001\000\000\011\001\011\001\
\011\001\000\000\000\000\000\000\000\000\000\000\000\000\011\001\
\011\001\000\000\000\000\000\000\013\001\000\000\000\000\000\000\
\000\000\013\001\000\000\000\000\013\001\013\001\000\000\013\001\
\013\001\013\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\001\013\001\011\001\013\001\000\000\011\001\011\001\
\013\001\013\001\000\000\013\001\011\001\000\000\000\000\000\000\
\000\000\013\001\000\000\000\000\013\001\013\001\000\000\000\000\
\208\000\013\001\000\000\000\000\013\001\000\000\011\001\000\000\
\013\001\013\001\013\001\000\000\013\001\000\000\013\001\013\001\
\000\000\011\001\013\001\011\001\013\001\013\001\013\001\013\001\
\013\001\013\001\013\001\000\000\000\000\013\001\000\000\000\000\
\013\001\013\001\013\001\013\001\000\000\011\001\011\001\011\001\
\013\001\000\000\011\001\013\001\011\001\011\001\013\001\013\001\
\013\001\013\001\000\000\211\000\000\000\013\001\000\000\000\000\
\000\000\013\001\013\001\013\001\013\001\013\001\000\000\000\000\
\000\000\013\001\013\001\000\000\000\000\000\000\211\000\000\000\
\000\000\000\000\000\000\211\000\000\000\000\000\211\000\211\000\
\000\000\211\000\211\000\211\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\211\000\211\000\000\000\211\000\000\000\
\000\000\000\000\211\000\211\000\000\000\211\000\000\000\000\000\
\000\000\000\000\000\000\211\000\000\000\000\000\211\000\211\000\
\000\000\000\000\000\000\211\000\000\000\037\000\211\000\000\000\
\037\000\037\000\211\000\211\000\211\000\000\000\211\000\000\000\
\211\000\211\000\000\000\000\000\211\000\000\000\211\000\211\000\
\211\000\211\000\211\000\211\000\211\000\128\000\000\000\211\000\
\000\000\000\000\211\000\211\000\211\000\211\000\000\000\000\000\
\000\000\037\000\211\000\000\000\000\000\211\000\207\000\000\000\
\211\000\211\000\211\000\211\000\037\000\037\000\037\000\211\000\
\000\000\000\000\000\000\211\000\211\000\000\000\211\000\211\000\
\000\000\207\000\000\000\211\000\211\000\000\000\207\000\000\000\
\000\000\207\000\207\000\000\000\207\000\207\000\207\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\207\000\207\000\
\000\000\207\000\000\000\000\000\000\000\207\000\207\000\000\000\
\207\000\037\000\000\000\000\000\000\000\037\000\207\000\000\000\
\037\000\207\000\207\000\000\000\000\000\000\000\207\000\000\000\
\000\000\207\000\000\000\000\000\000\000\207\000\207\000\207\000\
\000\000\207\000\000\000\207\000\207\000\000\000\000\000\207\000\
\000\000\000\000\207\000\207\000\207\000\207\000\207\000\207\000\
\000\000\000\000\207\000\000\000\000\000\207\000\207\000\207\000\
\207\000\000\000\202\000\000\000\000\000\207\000\000\000\000\000\
\207\000\208\000\000\000\207\000\207\000\207\000\207\000\000\000\
\000\000\000\000\207\000\000\000\000\000\000\000\207\000\207\000\
\000\000\207\000\207\000\000\000\208\000\000\000\207\000\207\000\
\000\000\208\000\000\000\000\000\208\000\208\000\000\000\208\000\
\208\000\208\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\208\000\208\000\000\000\208\000\000\000\000\000\000\000\
\208\000\208\000\000\000\208\000\000\000\000\000\000\000\000\000\
\000\000\208\000\000\000\000\000\208\000\208\000\000\000\000\000\
\000\000\208\000\000\000\000\000\208\000\000\000\000\000\000\000\
\208\000\208\000\208\000\000\000\208\000\000\000\208\000\208\000\
\000\000\000\000\208\000\000\000\208\000\208\000\208\000\208\000\
\208\000\208\000\208\000\000\000\000\000\208\000\000\000\000\000\
\208\000\208\000\208\000\208\000\000\000\195\000\000\000\000\000\
\000\000\000\000\000\000\208\000\000\000\000\000\208\000\208\000\
\208\000\208\000\000\000\000\000\000\000\208\000\000\000\000\000\
\000\000\208\000\208\000\000\000\208\000\208\000\000\000\000\000\
\000\000\208\000\208\000\000\000\000\000\000\000\128\000\128\000\
\128\000\000\000\128\000\128\000\000\000\000\000\000\000\000\000\
\000\000\128\000\000\000\128\000\128\000\128\000\000\000\000\000\
\000\000\000\000\000\000\000\000\128\000\128\000\000\000\000\000\
\000\000\128\000\000\000\000\000\000\000\000\000\128\000\000\000\
\000\000\128\000\128\000\000\000\128\000\128\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\
\128\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\128\000\128\000\000\000\000\000\000\000\128\000\000\000\
\199\000\000\000\000\000\128\000\000\000\128\000\128\000\128\000\
\128\000\000\000\128\000\000\000\000\000\000\000\128\000\128\000\
\128\000\000\000\128\000\128\000\000\000\000\000\000\000\000\000\
\000\000\128\000\128\000\000\000\000\000\000\000\128\000\128\000\
\128\000\000\000\000\000\128\000\000\000\128\000\000\000\000\000\
\000\000\128\000\128\000\128\000\128\000\128\000\128\000\000\000\
\000\000\000\000\128\000\202\000\000\000\000\000\128\000\128\000\
\128\000\128\000\128\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\202\000\000\000\
\000\000\000\000\000\000\202\000\000\000\000\000\202\000\202\000\
\000\000\202\000\202\000\202\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\202\000\202\000\000\000\202\000\000\000\
\000\000\000\000\202\000\202\000\000\000\202\000\000\000\000\000\
\000\000\000\000\000\000\202\000\193\000\000\000\202\000\202\000\
\000\000\000\000\000\000\202\000\000\000\000\000\202\000\000\000\
\000\000\000\000\202\000\202\000\202\000\000\000\202\000\000\000\
\202\000\202\000\000\000\000\000\202\000\000\000\000\000\202\000\
\202\000\202\000\202\000\202\000\202\000\000\000\000\000\202\000\
\000\000\000\000\202\000\202\000\202\000\202\000\000\000\000\000\
\000\000\000\000\202\000\000\000\000\000\202\000\195\000\000\000\
\202\000\202\000\202\000\202\000\000\000\000\000\000\000\202\000\
\000\000\000\000\000\000\202\000\202\000\000\000\202\000\202\000\
\000\000\195\000\000\000\000\000\000\000\000\000\195\000\000\000\
\000\000\195\000\195\000\000\000\195\000\195\000\195\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\195\000\195\000\
\000\000\195\000\000\000\000\000\000\000\195\000\195\000\000\000\
\195\000\000\000\000\000\187\000\000\000\000\000\195\000\000\000\
\000\000\195\000\195\000\000\000\000\000\000\000\195\000\000\000\
\000\000\195\000\000\000\000\000\000\000\195\000\195\000\195\000\
\000\000\195\000\000\000\000\000\195\000\000\000\000\000\195\000\
\000\000\000\000\195\000\197\000\195\000\195\000\195\000\195\000\
\000\000\000\000\195\000\000\000\000\000\195\000\195\000\195\000\
\195\000\000\000\000\000\000\000\000\000\195\000\000\000\000\000\
\195\000\199\000\000\000\195\000\195\000\195\000\195\000\000\000\
\000\000\000\000\195\000\000\000\000\000\000\000\195\000\195\000\
\000\000\195\000\195\000\000\000\199\000\000\000\000\000\000\000\
\000\000\199\000\000\000\000\000\199\000\199\000\000\000\199\000\
\199\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\199\000\199\000\000\000\199\000\186\000\000\000\000\000\
\199\000\199\000\000\000\199\000\000\000\000\000\000\000\000\000\
\000\000\199\000\000\000\000\000\199\000\199\000\000\000\000\000\
\000\000\199\000\000\000\000\000\199\000\000\000\000\000\000\000\
\199\000\199\000\199\000\000\000\199\000\000\000\000\000\199\000\
\000\000\000\000\199\000\000\000\000\000\199\000\199\000\199\000\
\199\000\199\000\199\000\000\000\000\000\199\000\000\000\000\000\
\199\000\199\000\199\000\199\000\000\000\000\000\000\000\000\000\
\199\000\000\000\000\000\199\000\000\000\193\000\199\000\199\000\
\199\000\199\000\000\000\000\000\000\000\199\000\000\000\000\000\
\000\000\199\000\199\000\000\000\199\000\199\000\000\000\000\000\
\193\000\000\000\000\000\000\000\000\000\193\000\000\000\000\000\
\193\000\193\000\000\000\193\000\193\000\193\000\000\000\185\000\
\000\000\000\000\000\000\000\000\000\000\193\000\193\000\000\000\
\193\000\000\000\000\000\000\000\193\000\193\000\000\000\193\000\
\000\000\000\000\000\000\000\000\000\000\193\000\000\000\000\000\
\193\000\193\000\000\000\000\000\000\000\193\000\000\000\000\000\
\193\000\000\000\000\000\000\000\193\000\193\000\193\000\000\000\
\193\000\000\000\000\000\193\000\000\000\000\000\193\000\000\000\
\000\000\193\000\000\000\193\000\193\000\193\000\193\000\000\000\
\000\000\000\000\000\000\000\000\193\000\193\000\193\000\193\000\
\000\000\000\000\000\000\000\000\193\000\000\000\000\000\193\000\
\000\000\000\000\193\000\193\000\193\000\193\000\000\000\000\000\
\000\000\193\000\000\000\000\000\000\000\193\000\193\000\187\000\
\193\000\193\000\000\000\000\000\187\000\000\000\000\000\187\000\
\187\000\184\000\187\000\187\000\187\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\187\000\187\000\000\000\187\000\
\000\000\000\000\000\000\187\000\187\000\000\000\187\000\000\000\
\000\000\000\000\000\000\000\000\187\000\000\000\000\000\187\000\
\187\000\000\000\000\000\000\000\187\000\000\000\000\000\187\000\
\000\000\000\000\000\000\187\000\187\000\187\000\000\000\187\000\
\000\000\000\000\187\000\000\000\000\000\187\000\000\000\000\000\
\187\000\000\000\187\000\187\000\187\000\187\000\000\000\000\000\
\000\000\000\000\000\000\187\000\187\000\187\000\000\000\000\000\
\000\000\000\000\000\000\187\000\000\000\000\000\187\000\000\000\
\000\000\187\000\187\000\187\000\187\000\000\000\000\000\000\000\
\187\000\186\000\000\000\000\000\187\000\187\000\186\000\187\000\
\187\000\186\000\186\000\183\000\186\000\186\000\186\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\186\000\186\000\
\000\000\186\000\000\000\000\000\000\000\186\000\186\000\000\000\
\186\000\000\000\000\000\000\000\000\000\000\000\186\000\000\000\
\000\000\186\000\186\000\000\000\000\000\000\000\186\000\000\000\
\000\000\186\000\000\000\000\000\000\000\186\000\186\000\186\000\
\000\000\186\000\000\000\000\000\186\000\000\000\000\000\186\000\
\000\000\000\000\186\000\000\000\186\000\186\000\186\000\186\000\
\000\000\000\000\000\000\000\000\000\000\186\000\186\000\186\000\
\000\000\000\000\000\000\000\000\000\000\186\000\000\000\000\000\
\186\000\000\000\000\000\186\000\186\000\186\000\186\000\000\000\
\000\000\000\000\186\000\185\000\000\000\000\000\186\000\186\000\
\185\000\186\000\186\000\185\000\185\000\182\000\185\000\185\000\
\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\185\000\185\000\000\000\185\000\000\000\000\000\000\000\185\000\
\185\000\000\000\185\000\000\000\000\000\000\000\000\000\000\000\
\185\000\000\000\000\000\185\000\185\000\000\000\000\000\000\000\
\185\000\000\000\000\000\185\000\000\000\000\000\000\000\185\000\
\185\000\185\000\000\000\185\000\000\000\000\000\000\000\000\000\
\000\000\185\000\000\000\000\000\185\000\000\000\185\000\185\000\
\185\000\185\000\000\000\000\000\000\000\000\000\000\000\185\000\
\185\000\185\000\000\000\000\000\000\000\000\000\000\000\185\000\
\000\000\000\000\185\000\000\000\000\000\185\000\185\000\185\000\
\185\000\000\000\000\000\000\000\185\000\184\000\000\000\000\000\
\185\000\185\000\184\000\185\000\185\000\184\000\184\000\019\001\
\184\000\184\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\184\000\184\000\000\000\184\000\000\000\000\000\
\000\000\184\000\184\000\000\000\184\000\000\000\000\000\000\000\
\000\000\000\000\184\000\000\000\000\000\184\000\184\000\000\000\
\000\000\000\000\184\000\000\000\000\000\184\000\000\000\000\000\
\000\000\184\000\184\000\184\000\000\000\184\000\000\000\000\000\
\000\000\000\000\000\000\184\000\000\000\000\000\184\000\000\000\
\184\000\184\000\184\000\184\000\000\000\000\000\000\000\000\000\
\000\000\184\000\184\000\184\000\000\000\000\000\000\000\000\000\
\000\000\184\000\000\000\000\000\184\000\000\000\000\000\184\000\
\184\000\184\000\184\000\000\000\000\000\000\000\184\000\183\000\
\000\000\000\000\184\000\184\000\183\000\184\000\184\000\183\000\
\183\000\178\000\183\000\183\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\183\000\183\000\000\000\183\000\
\000\000\000\000\000\000\183\000\183\000\000\000\183\000\000\000\
\000\000\000\000\000\000\000\000\183\000\000\000\000\000\183\000\
\183\000\000\000\000\000\000\000\183\000\000\000\000\000\183\000\
\000\000\000\000\000\000\183\000\183\000\183\000\000\000\183\000\
\000\000\000\000\000\000\000\000\000\000\183\000\000\000\000\000\
\183\000\000\000\183\000\183\000\183\000\183\000\000\000\000\000\
\000\000\000\000\000\000\183\000\183\000\183\000\000\000\000\000\
\000\000\000\000\000\000\183\000\000\000\000\000\183\000\000\000\
\000\000\183\000\183\000\183\000\183\000\000\000\000\000\000\000\
\183\000\182\000\000\000\000\000\183\000\183\000\182\000\183\000\
\183\000\182\000\182\000\177\000\182\000\182\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\182\000\182\000\
\000\000\182\000\000\000\000\000\000\000\182\000\182\000\000\000\
\182\000\000\000\000\000\000\000\000\000\000\000\182\000\000\000\
\000\000\182\000\182\000\000\000\000\000\000\000\182\000\000\000\
\000\000\182\000\000\000\000\000\000\000\182\000\182\000\182\000\
\000\000\182\000\000\000\000\000\000\000\000\000\000\000\182\000\
\000\000\000\000\182\000\000\000\182\000\182\000\182\000\182\000\
\000\000\000\000\000\000\000\000\000\000\182\000\182\000\182\000\
\000\000\000\000\000\000\000\000\000\000\182\000\000\000\000\000\
\182\000\000\000\000\000\182\000\182\000\182\000\182\000\000\000\
\000\000\000\000\182\000\019\001\000\000\000\000\182\000\182\000\
\019\001\182\000\182\000\019\001\019\001\176\000\019\001\019\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\001\019\001\000\000\019\001\000\000\000\000\000\000\019\001\
\019\001\000\000\019\001\000\000\000\000\000\000\000\000\000\000\
\019\001\000\000\000\000\019\001\019\001\000\000\000\000\000\000\
\019\001\000\000\000\000\019\001\000\000\000\000\000\000\019\001\
\019\001\019\001\000\000\019\001\000\000\000\000\000\000\000\000\
\000\000\019\001\000\000\000\000\000\000\000\000\019\001\019\001\
\019\001\019\001\000\000\000\000\000\000\000\000\000\000\000\000\
\019\001\019\001\000\000\000\000\000\000\000\000\000\000\019\001\
\000\000\000\000\019\001\000\000\000\000\019\001\019\001\019\001\
\019\001\000\000\000\000\000\000\019\001\178\000\000\000\000\000\
\019\001\019\001\178\000\019\001\019\001\178\000\178\000\140\000\
\178\000\178\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\178\000\178\000\000\000\178\000\000\000\000\000\
\000\000\178\000\178\000\000\000\178\000\000\000\000\000\000\000\
\000\000\000\000\178\000\000\000\000\000\178\000\178\000\000\000\
\000\000\000\000\178\000\000\000\000\000\178\000\000\000\000\000\
\000\000\178\000\178\000\178\000\000\000\178\000\000\000\000\000\
\000\000\000\000\000\000\178\000\000\000\000\000\000\000\000\000\
\178\000\178\000\000\000\178\000\000\000\000\000\000\000\000\000\
\000\000\000\000\178\000\178\000\000\000\000\000\000\000\000\000\
\000\000\178\000\000\000\000\000\178\000\000\000\000\000\000\000\
\178\000\178\000\178\000\000\000\000\000\000\000\178\000\177\000\
\000\000\000\000\178\000\178\000\177\000\178\000\178\000\177\000\
\177\000\150\000\177\000\177\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\177\000\177\000\000\000\177\000\
\000\000\000\000\000\000\177\000\177\000\000\000\177\000\000\000\
\000\000\000\000\000\000\000\000\177\000\000\000\000\000\177\000\
\177\000\000\000\000\000\000\000\177\000\000\000\000\000\177\000\
\000\000\000\000\000\000\177\000\177\000\177\000\000\000\177\000\
\000\000\000\000\000\000\000\000\000\000\177\000\000\000\000\000\
\000\000\000\000\177\000\177\000\000\000\177\000\000\000\000\000\
\000\000\000\000\000\000\000\000\177\000\177\000\000\000\000\000\
\000\000\000\000\000\000\177\000\000\000\000\000\177\000\000\000\
\000\000\000\000\177\000\177\000\177\000\000\000\000\000\000\000\
\177\000\176\000\000\000\000\000\177\000\177\000\176\000\177\000\
\177\000\176\000\176\000\146\000\176\000\176\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\176\000\176\000\
\000\000\176\000\000\000\000\000\000\000\176\000\176\000\000\000\
\176\000\000\000\000\000\000\000\000\000\000\000\176\000\000\000\
\000\000\176\000\176\000\000\000\000\000\000\000\176\000\000\000\
\000\000\176\000\000\000\000\000\000\000\176\000\176\000\176\000\
\000\000\176\000\000\000\000\000\000\000\000\000\000\000\176\000\
\000\000\000\000\000\000\000\000\176\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\176\000\176\000\
\000\000\000\000\000\000\000\000\000\000\176\000\000\000\000\000\
\176\000\000\000\000\000\000\000\176\000\176\000\176\000\000\000\
\000\000\000\000\176\000\140\000\000\000\000\000\176\000\176\000\
\140\000\176\000\176\000\140\000\140\000\148\000\140\000\140\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\140\000\000\000\140\000\000\000\000\000\000\000\140\000\
\140\000\000\000\140\000\000\000\000\000\000\000\000\000\000\000\
\140\000\000\000\000\000\140\000\140\000\000\000\000\000\000\000\
\140\000\000\000\000\000\140\000\000\000\000\000\000\000\140\000\
\140\000\140\000\000\000\140\000\000\000\000\000\000\000\000\000\
\000\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\140\000\000\000\000\000\000\000\000\000\000\000\140\000\
\000\000\000\000\140\000\000\000\000\000\000\000\140\000\140\000\
\140\000\000\000\000\000\000\000\140\000\150\000\000\000\000\000\
\140\000\140\000\150\000\140\000\140\000\150\000\150\000\147\000\
\150\000\150\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\150\000\150\000\000\000\150\000\000\000\000\000\
\000\000\150\000\150\000\000\000\150\000\000\000\000\000\000\000\
\000\000\000\000\150\000\000\000\000\000\150\000\150\000\000\000\
\000\000\000\000\150\000\000\000\000\000\150\000\000\000\000\000\
\000\000\150\000\150\000\150\000\000\000\150\000\000\000\000\000\
\000\000\000\000\000\000\150\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\150\000\150\000\000\000\000\000\000\000\000\000\
\000\000\150\000\000\000\000\000\150\000\000\000\000\000\000\000\
\000\000\150\000\150\000\000\000\000\000\000\000\150\000\146\000\
\000\000\000\000\150\000\150\000\146\000\150\000\150\000\146\000\
\146\000\099\000\146\000\146\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\146\000\146\000\000\000\146\000\
\000\000\000\000\000\000\000\000\146\000\000\000\146\000\000\000\
\000\000\000\000\000\000\000\000\146\000\000\000\000\000\146\000\
\146\000\000\000\000\000\000\000\146\000\000\000\000\000\146\000\
\000\000\000\000\000\000\146\000\146\000\146\000\000\000\146\000\
\000\000\000\000\000\000\000\000\000\000\146\000\000\000\000\000\
\000\000\000\000\000\000\099\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\146\000\146\000\000\000\000\000\
\000\000\000\000\000\000\146\000\000\000\000\000\146\000\000\000\
\000\000\000\000\146\000\146\000\146\000\000\000\000\000\000\000\
\146\000\148\000\000\000\000\000\146\000\146\000\148\000\146\000\
\146\000\148\000\148\000\000\000\148\000\148\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\148\000\148\000\
\000\000\148\000\000\000\000\000\000\000\148\000\148\000\000\000\
\148\000\000\000\000\000\000\000\000\000\000\000\148\000\000\000\
\000\000\148\000\148\000\000\000\000\000\000\000\148\000\000\000\
\000\000\148\000\000\000\000\000\000\000\148\000\148\000\148\000\
\000\000\148\000\134\000\000\000\000\000\000\000\000\000\148\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\148\000\148\000\
\000\000\000\000\000\000\000\000\000\000\148\000\000\000\000\000\
\148\000\000\000\000\000\000\000\000\000\148\000\148\000\000\000\
\000\000\000\000\148\000\147\000\000\000\000\000\148\000\148\000\
\147\000\148\000\148\000\147\000\147\000\000\000\147\000\147\000\
\000\000\000\000\000\000\000\000\107\000\000\000\000\000\000\000\
\147\000\147\000\000\000\147\000\000\000\000\000\000\000\147\000\
\147\000\000\000\147\000\000\000\000\000\000\000\000\000\000\000\
\147\000\000\000\000\000\147\000\147\000\000\000\000\000\000\000\
\147\000\000\000\000\000\147\000\000\000\000\000\000\000\147\000\
\147\000\147\000\000\000\147\000\000\000\000\000\000\000\000\000\
\000\000\147\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\000\000\000\000\000\000\000\000\
\147\000\147\000\000\000\000\000\000\000\000\000\000\000\147\000\
\000\000\000\000\147\000\000\000\000\000\000\000\000\000\147\000\
\147\000\000\000\000\000\000\000\147\000\099\000\000\000\000\000\
\147\000\147\000\099\000\147\000\147\000\099\000\099\000\000\000\
\099\000\099\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\000\000\000\000\000\
\000\000\000\000\099\000\000\000\099\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\000\099\000\000\000\
\000\000\000\000\099\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\000\099\000\099\000\000\000\000\000\000\000\099\000\
\000\000\000\000\000\000\000\000\099\000\000\000\000\000\099\000\
\099\000\000\000\099\000\099\000\099\000\099\000\000\000\000\000\
\000\000\000\000\000\000\099\000\099\000\000\000\000\000\099\000\
\000\000\000\000\000\000\000\000\099\000\000\000\099\000\100\000\
\000\000\000\000\000\000\000\000\000\000\000\000\099\000\099\000\
\099\000\000\000\099\000\099\000\099\000\099\000\099\000\000\000\
\000\000\000\000\000\000\099\000\099\000\099\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000\000\000\000\000\000\000\099\000\099\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\000\000\
\000\000\103\000\000\000\134\000\000\000\000\000\134\000\134\000\
\099\000\134\000\134\000\000\000\099\000\099\000\000\000\099\000\
\099\000\000\000\000\000\000\000\000\000\000\000\134\000\000\000\
\000\000\000\000\000\000\134\000\000\000\134\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\134\000\
\000\000\000\000\000\000\134\000\000\000\000\000\000\000\000\000\
\000\000\000\000\134\000\134\000\134\000\000\000\000\000\000\000\
\107\000\000\000\000\000\053\000\000\000\107\000\000\000\000\000\
\107\000\107\000\000\000\107\000\107\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\134\000\134\000\000\000\000\000\
\107\000\000\000\000\000\000\000\000\000\107\000\000\000\107\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000\
\107\000\107\000\000\000\134\000\134\000\107\000\134\000\134\000\
\000\000\000\000\000\000\000\000\107\000\107\000\107\000\112\000\
\000\000\000\000\046\000\000\000\112\000\000\000\000\000\112\000\
\112\000\000\000\112\000\112\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\107\000\112\000\
\000\000\000\000\000\000\000\000\112\000\000\000\112\000\000\000\
\000\000\000\000\000\000\107\000\000\000\000\000\000\000\112\000\
\112\000\107\000\000\000\000\000\112\000\107\000\107\000\000\000\
\107\000\107\000\000\000\112\000\112\000\112\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\053\000\053\000\000\000\053\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\112\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\053\000\000\000\112\000\000\000\000\000\000\000\053\000\000\000\
\112\000\053\000\053\000\000\000\112\000\112\000\053\000\112\000\
\112\000\000\000\000\000\000\000\000\000\053\000\053\000\053\000\
\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\
\100\000\000\000\000\000\100\000\100\000\000\000\100\000\100\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\
\100\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\100\000\100\000\000\000\053\000\053\000\
\100\000\053\000\053\000\000\000\000\000\000\000\000\000\100\000\
\100\000\100\000\000\000\000\000\000\000\103\000\000\000\000\000\
\000\000\000\000\103\000\000\000\000\000\103\000\103\000\000\000\
\103\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\100\000\000\000\000\000\000\000\103\000\000\000\000\000\
\000\000\000\000\103\000\000\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\100\000\103\000\103\000\000\000\
\100\000\100\000\103\000\100\000\100\000\000\000\000\000\000\000\
\000\000\103\000\103\000\103\000\000\000\000\000\000\000\053\000\
\000\000\000\000\000\000\000\000\053\000\000\000\000\000\053\000\
\053\000\000\000\053\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\000\053\000\
\053\000\000\000\103\000\103\000\053\000\103\000\103\000\000\000\
\000\000\000\000\000\000\053\000\053\000\053\000\046\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\046\000\046\000\
\000\000\046\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\
\053\000\000\000\000\000\046\000\053\000\053\000\000\000\053\000\
\053\000\000\000\046\000\046\000\046\000\000\000\000\000\054\000\
\055\000\056\000\000\000\032\000\057\000\000\000\094\000\000\000\
\000\000\000\000\058\000\000\000\059\000\060\000\061\000\000\000\
\000\000\000\000\000\000\000\000\046\000\062\000\063\000\000\000\
\000\000\000\000\095\000\000\000\000\000\096\000\097\000\098\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\046\000\046\000\000\000\046\000\046\000\
\000\000\099\000\000\000\000\000\100\000\101\000\000\000\000\000\
\000\000\000\000\064\000\003\000\102\000\103\000\104\000\000\000\
\004\000\000\000\000\000\005\000\006\000\105\000\008\000\009\000\
\000\000\000\000\000\000\000\000\065\000\106\000\000\000\000\000\
\000\000\000\000\000\000\107\000\000\000\000\000\000\000\108\000\
\000\000\068\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\012\000\109\000\000\000\110\000\111\000\112\000\113\000\000\000\
\114\000\000\000\115\000\116\000\154\000\154\000\154\000\000\000\
\154\000\154\000\000\000\154\000\000\000\000\000\000\000\154\000\
\000\000\154\000\154\000\154\000\000\000\117\000\118\000\119\000\
\120\000\040\000\154\000\154\000\000\000\000\000\000\000\154\000\
\000\000\000\000\154\000\154\000\154\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\014\000\000\000\015\000\016\000\000\000\154\000\000\000\
\000\000\154\000\154\000\000\000\000\000\065\000\000\000\154\000\
\000\000\154\000\154\000\154\000\065\000\000\000\000\000\065\000\
\065\000\000\000\154\000\000\000\000\000\000\000\065\000\065\000\
\000\000\154\000\154\000\065\000\000\000\065\000\000\000\000\000\
\154\000\000\000\000\000\000\000\154\000\000\000\154\000\000\000\
\065\000\065\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\154\000\000\000\
\154\000\154\000\154\000\154\000\000\000\154\000\000\000\154\000\
\154\000\054\000\055\000\056\000\000\000\032\000\057\000\000\000\
\094\000\000\000\000\000\000\000\058\000\000\000\059\000\060\000\
\061\000\000\000\154\000\154\000\154\000\154\000\000\000\062\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\096\000\
\097\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\000\000\000\000\000\100\000\101\000\
\003\000\000\000\000\000\000\000\064\000\004\000\102\000\000\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\107\000\000\000\010\000\
\000\000\108\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\109\000\000\000\110\000\111\000\112\000\
\113\000\000\000\114\000\000\000\115\000\116\000\054\000\055\000\
\056\000\000\000\032\000\057\000\000\000\094\000\000\000\000\000\
\000\000\058\000\000\000\059\000\060\000\061\000\000\000\000\000\
\000\000\119\000\120\000\000\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\096\000\097\000\000\000\000\000\
\000\000\013\000\000\000\000\000\000\000\000\000\014\000\000\000\
\015\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\000\000\100\000\101\000\000\000\000\000\000\000\
\000\000\064\000\000\000\102\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\107\000\000\000\000\000\000\000\108\000\000\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\109\000\000\000\110\000\111\000\112\000\171\001\000\000\114\000\
\000\000\115\000\116\000\152\000\152\000\152\000\000\000\152\000\
\152\000\000\000\152\000\000\000\000\000\000\000\152\000\000\000\
\152\000\152\000\152\000\000\000\000\000\000\000\119\000\120\000\
\000\000\152\000\152\000\000\000\000\000\000\000\000\000\000\000\
\000\000\152\000\152\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\152\000\000\000\000\000\
\152\000\152\000\000\000\000\000\000\000\000\000\152\000\000\000\
\152\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\152\000\000\000\000\000\000\000\000\000\000\000\000\000\152\000\
\000\000\000\000\000\000\152\000\000\000\152\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\152\000\000\000\152\000\
\152\000\152\000\152\000\000\000\152\000\000\000\152\000\152\000\
\054\000\055\000\056\000\000\000\032\000\057\000\000\000\094\000\
\000\000\000\000\000\000\058\000\000\000\059\000\060\000\061\000\
\000\000\000\000\000\000\152\000\152\000\000\000\062\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\000\000\000\000\000\100\000\101\000\000\000\
\000\000\000\000\000\000\064\000\000\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\000\000\000\000\107\000\000\000\000\000\000\000\
\108\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\109\000\000\000\110\000\111\000\112\000\113\000\
\000\000\114\000\000\000\115\000\116\000\054\000\055\000\056\000\
\000\000\032\000\057\000\000\000\094\000\000\000\000\000\000\000\
\058\000\000\000\059\000\060\000\061\000\000\000\000\000\000\000\
\119\000\120\000\000\000\062\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000\100\000\101\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\107\000\000\000\000\000\000\000\108\000\000\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\109\000\
\000\000\110\000\111\000\112\000\113\000\000\000\114\000\000\000\
\115\000\116\000\054\000\055\000\056\000\000\000\032\000\057\000\
\000\000\094\000\000\000\000\000\000\000\058\000\000\000\059\000\
\060\000\061\000\000\000\000\000\000\000\119\000\120\000\000\000\
\062\000\063\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\099\000\000\000\000\000\100\000\
\101\000\000\000\000\000\000\000\000\000\064\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\115\000\
\115\000\115\000\000\000\115\000\115\000\000\000\000\000\065\000\
\000\000\000\000\115\000\000\000\115\000\115\000\115\000\000\000\
\000\000\000\000\108\000\000\000\068\000\115\000\115\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\110\000\111\000\
\112\000\113\000\000\000\114\000\115\000\115\000\116\000\000\000\
\000\000\115\000\000\000\000\000\115\000\115\000\000\000\000\000\
\000\000\000\000\115\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\119\000\120\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\115\000\000\000\000\000\000\000\
\000\000\000\000\115\000\115\000\000\000\000\000\000\000\115\000\
\000\000\115\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\000\000\000\115\000\115\000\115\000\000\000\000\000\
\115\000\000\000\115\000\115\000\054\000\055\000\056\000\000\000\
\032\000\057\000\000\000\000\000\000\000\000\000\000\000\058\000\
\000\000\059\000\060\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\068\000\
\068\000\000\000\068\000\068\000\000\000\000\000\000\000\000\000\
\000\000\068\000\000\000\068\000\068\000\068\000\099\000\000\000\
\000\000\100\000\101\000\000\000\068\000\068\000\000\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\000\055\000\056\000\000\000\032\000\057\000\000\000\
\000\000\065\000\000\000\000\000\058\000\000\000\059\000\060\000\
\061\000\000\000\000\000\000\000\108\000\000\000\068\000\062\000\
\063\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\110\000\111\000\112\000\068\000\000\000\114\000\000\000\115\000\
\116\000\000\000\068\000\000\000\000\000\000\000\068\000\068\000\
\068\000\000\000\068\000\000\000\064\000\000\000\000\000\000\000\
\000\000\070\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\068\000\000\000\068\000\065\000\000\000\
\000\000\068\000\068\000\000\000\000\000\066\000\000\000\000\000\
\000\000\067\000\000\000\068\000\051\000\051\000\051\000\000\000\
\051\000\051\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\051\000\051\000\051\000\000\000\000\000\069\000\000\000\
\070\000\000\000\051\000\051\000\071\000\072\000\000\000\000\000\
\000\000\000\000\162\000\162\000\162\000\000\000\162\000\162\000\
\000\000\000\000\000\000\000\000\000\000\162\000\000\000\162\000\
\162\000\162\000\000\000\000\000\000\000\000\000\000\000\000\000\
\162\000\162\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\000\000\000\000\051\000\162\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\162\000\
\000\000\051\000\000\000\051\000\000\000\000\000\162\000\051\000\
\051\000\000\000\162\000\000\000\162\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\162\000\
\000\000\162\000\000\000\000\000\000\000\162\000\162\000"

let yycheck = "\029\000\
\070\000\000\000\067\000\094\000\243\000\000\000\000\000\098\000\
\099\000\039\000\184\000\000\000\048\000\072\000\069\000\000\000\
\005\001\047\000\048\000\049\000\147\000\085\000\093\000\116\000\
\198\000\096\000\097\000\080\000\119\000\120\000\009\001\041\000\
\113\000\114\000\027\001\128\001\066\000\067\000\003\001\069\000\
\070\000\006\001\072\000\003\001\093\001\012\000\006\001\014\000\
\094\001\102\000\080\000\033\001\072\001\030\001\036\001\037\001\
\080\001\081\001\082\001\080\001\081\001\082\001\094\001\093\000\
\094\000\084\001\096\000\097\000\098\000\099\000\115\001\048\001\
\102\000\001\000\000\000\120\001\043\000\251\000\055\001\085\001\
\100\001\046\001\182\000\113\000\114\000\131\001\083\001\069\001\
\107\001\119\000\120\000\162\000\141\001\186\001\190\000\166\000\
\235\000\094\001\002\001\131\001\130\001\107\001\202\000\093\001\
\003\001\129\001\005\001\024\001\129\001\102\001\115\001\250\000\
\208\000\143\001\104\001\120\001\096\001\034\001\098\001\075\001\
\097\001\088\000\002\001\112\001\089\001\072\001\253\000\186\000\
\107\001\089\001\137\001\138\001\162\000\188\000\131\001\005\001\
\166\000\190\000\255\000\000\001\001\001\000\000\233\000\125\001\
\029\000\099\001\211\000\157\000\239\000\230\000\132\001\244\000\
\182\000\131\001\039\000\208\000\186\000\115\001\188\000\117\001\
\190\000\003\001\226\000\227\000\049\001\050\001\100\001\197\000\
\052\001\101\000\043\001\044\001\202\000\105\000\106\000\093\001\
\108\000\100\001\208\000\121\001\122\001\211\000\067\000\104\000\
\069\000\093\001\163\001\072\000\101\001\110\000\111\000\112\000\
\111\000\112\000\119\001\080\000\011\001\107\001\100\001\123\001\
\230\000\231\000\010\001\233\000\099\001\046\001\085\001\015\001\
\093\000\239\000\101\001\096\000\097\000\022\001\095\001\000\000\
\105\001\102\000\017\001\202\001\023\001\097\001\029\000\141\001\
\004\001\041\001\094\001\087\001\086\001\092\001\004\001\007\001\
\052\001\058\001\100\001\100\001\090\001\011\001\105\001\121\001\
\217\001\093\001\120\001\017\001\099\001\107\001\020\001\168\000\
\022\001\023\001\010\000\107\001\012\000\099\001\014\000\057\001\
\016\000\107\001\076\001\118\001\067\000\099\001\069\000\084\001\
\115\001\072\000\026\000\084\001\121\001\029\000\093\001\105\001\
\120\001\080\000\121\001\120\001\002\001\162\000\057\001\006\001\
\054\001\166\000\094\001\043\000\058\001\110\001\099\001\047\000\
\048\000\100\001\050\000\083\001\119\001\118\001\100\001\102\000\
\131\001\182\000\126\001\090\001\108\001\186\000\107\001\188\000\
\236\000\190\000\115\001\067\000\117\001\069\000\070\000\112\001\
\072\000\087\001\057\001\119\001\093\001\202\000\093\001\047\001\
\080\000\107\001\047\001\208\000\112\001\068\001\211\000\087\000\
\088\000\068\001\068\001\139\001\146\001\100\001\105\001\068\001\
\110\001\080\001\081\001\082\001\056\001\115\001\102\000\117\001\
\118\001\065\001\171\001\080\001\081\001\082\001\026\001\080\001\
\081\001\082\001\094\001\180\001\107\001\131\001\028\001\105\001\
\000\000\118\001\121\001\033\001\105\001\084\001\036\001\037\001\
\121\001\039\001\040\001\119\001\146\001\107\001\121\001\182\000\
\090\001\042\001\100\001\186\000\003\001\188\000\011\001\190\000\
\049\001\194\001\129\001\057\001\017\001\059\001\164\001\121\001\
\105\001\022\001\023\001\202\000\129\001\171\001\068\001\069\001\
\129\001\208\000\107\001\073\001\211\000\165\000\180\001\215\001\
\105\001\121\001\080\001\081\001\082\001\107\001\120\001\107\001\
\099\001\120\001\192\001\115\001\194\001\121\001\182\000\094\001\
\090\001\120\001\186\000\100\001\188\000\203\001\190\000\121\001\
\083\001\065\001\094\001\047\001\106\001\047\001\114\001\090\001\
\090\001\121\001\202\000\094\001\218\001\001\000\111\001\112\001\
\208\000\100\001\118\001\211\000\121\001\046\000\105\001\125\001\
\107\001\121\001\095\000\129\001\130\001\027\000\132\001\133\001\
\121\001\130\001\017\001\118\001\119\001\121\001\121\001\022\001\
\023\001\121\001\150\001\121\001\090\001\067\000\143\001\028\001\
\131\001\205\001\158\001\218\001\099\001\208\001\115\001\224\001\
\117\001\136\001\149\001\231\000\213\001\203\001\159\001\020\001\
\087\000\036\001\000\000\028\001\004\001\118\000\240\000\196\001\
\033\001\241\000\155\001\036\001\037\001\242\000\039\001\040\001\
\246\000\017\001\245\000\247\000\020\001\254\000\022\001\023\001\
\049\001\050\001\131\001\052\001\200\001\071\001\125\001\056\001\
\057\001\129\001\059\001\164\001\255\255\255\255\255\255\255\255\
\065\001\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\073\001\255\255\255\255\076\001\255\255\255\255\054\001\080\001\
\081\001\082\001\255\255\084\001\255\255\255\255\255\255\255\255\
\255\255\090\001\255\255\255\255\115\001\194\001\117\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\105\001\106\001\255\255\255\255\255\255\255\255\255\255\112\001\
\255\255\255\255\115\001\255\255\255\255\255\255\119\001\120\001\
\121\001\255\255\255\255\255\255\125\001\255\255\255\255\255\255\
\129\001\130\001\255\255\132\001\133\001\255\255\255\255\255\255\
\255\255\255\255\255\255\115\001\255\255\117\001\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\255\255\009\001\255\255\255\255\012\001\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\000\000\255\255\255\255\023\001\
\024\001\255\255\146\001\194\001\028\001\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\037\001\255\255\039\001\
\040\001\041\001\255\255\255\255\164\001\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\052\001\255\255\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\255\255\255\255\255\255\
\255\255\065\001\255\255\255\255\068\001\069\001\190\001\255\255\
\255\255\073\001\194\001\255\255\076\001\255\255\078\001\255\255\
\080\001\081\001\082\001\255\255\084\001\085\001\086\001\087\001\
\255\255\089\001\090\001\091\001\092\001\093\001\094\001\095\001\
\096\001\097\001\098\001\255\255\255\255\101\001\255\255\255\255\
\104\001\105\001\106\001\107\001\255\255\109\001\110\001\111\001\
\112\001\255\255\114\001\115\001\116\001\117\001\118\001\119\001\
\120\001\121\001\255\255\255\255\255\255\125\001\255\255\255\255\
\255\255\129\001\130\001\131\001\132\001\133\001\255\255\255\255\
\255\255\137\001\138\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\255\255\009\001\083\001\255\255\012\001\255\255\
\014\001\015\001\016\001\090\001\255\255\255\255\000\000\094\001\
\255\255\023\001\024\001\255\255\255\255\100\001\028\001\255\255\
\255\255\255\255\105\001\033\001\107\001\255\255\036\001\037\001\
\255\255\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\119\001\047\001\121\001\049\001\050\001\051\001\052\001\255\255\
\054\001\055\001\056\001\057\001\131\001\059\001\060\001\255\255\
\255\255\255\255\255\255\065\001\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\255\255\255\255\076\001\255\255\
\078\001\255\255\080\001\081\001\082\001\255\255\084\001\085\001\
\086\001\087\001\255\255\089\001\090\001\091\001\092\001\093\001\
\094\001\095\001\096\001\097\001\098\001\099\001\255\255\101\001\
\255\255\255\255\104\001\105\001\106\001\107\001\255\255\109\001\
\110\001\111\001\112\001\255\255\114\001\115\001\116\001\117\001\
\118\001\119\001\120\001\121\001\255\255\255\255\255\255\125\001\
\255\255\255\255\255\255\129\001\130\001\131\001\132\001\133\001\
\255\255\255\255\255\255\137\001\138\001\001\001\002\001\003\001\
\255\255\005\001\006\001\007\001\255\255\009\001\255\255\255\255\
\012\001\255\255\014\001\015\001\016\001\255\255\255\255\255\255\
\000\000\255\255\255\255\023\001\024\001\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\036\001\037\001\255\255\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\046\001\255\255\255\255\049\001\050\001\051\001\
\052\001\255\255\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\255\255\255\255\255\255\255\255\065\001\255\255\255\255\
\068\001\069\001\255\255\255\255\255\255\073\001\255\255\255\255\
\076\001\255\255\078\001\255\255\080\001\081\001\082\001\255\255\
\084\001\085\001\086\001\087\001\255\255\089\001\090\001\091\001\
\092\001\093\001\094\001\095\001\096\001\097\001\098\001\099\001\
\255\255\101\001\255\255\255\255\104\001\105\001\106\001\107\001\
\255\255\109\001\110\001\111\001\112\001\255\255\114\001\115\001\
\116\001\117\001\118\001\119\001\120\001\121\001\255\255\255\255\
\255\255\125\001\255\255\255\255\255\255\129\001\130\001\255\255\
\132\001\133\001\000\000\255\255\255\255\137\001\138\001\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\255\255\009\001\
\083\001\255\255\012\001\255\255\014\001\015\001\016\001\090\001\
\255\255\255\255\093\001\094\001\255\255\023\001\024\001\255\255\
\255\255\100\001\028\001\255\255\255\255\255\255\105\001\033\001\
\107\001\255\255\036\001\037\001\255\255\039\001\040\001\041\001\
\255\255\255\255\255\255\118\001\119\001\047\001\121\001\049\001\
\050\001\051\001\052\001\255\255\054\001\055\001\056\001\057\001\
\131\001\059\001\060\001\255\255\255\255\255\255\255\255\065\001\
\255\255\255\255\068\001\069\001\255\255\255\255\255\255\073\001\
\255\255\255\255\076\001\255\255\078\001\255\255\080\001\081\001\
\082\001\255\255\084\001\085\001\086\001\087\001\255\255\089\001\
\090\001\091\001\092\001\093\001\094\001\095\001\096\001\097\001\
\098\001\255\255\255\255\101\001\255\255\000\000\104\001\105\001\
\106\001\107\001\255\255\109\001\110\001\111\001\112\001\255\255\
\114\001\115\001\116\001\117\001\118\001\119\001\120\001\121\001\
\255\255\255\255\255\255\125\001\255\255\255\255\255\255\129\001\
\130\001\131\001\132\001\133\001\255\255\255\255\255\255\137\001\
\138\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\255\255\009\001\255\255\255\255\012\001\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\037\001\255\255\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\051\001\052\001\255\255\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\255\255\255\255\255\255\
\255\255\065\001\255\255\255\255\068\001\069\001\255\255\255\255\
\000\000\073\001\255\255\255\255\076\001\255\255\078\001\255\255\
\080\001\081\001\082\001\255\255\084\001\255\255\086\001\087\001\
\255\255\089\001\090\001\091\001\092\001\093\001\094\001\095\001\
\096\001\097\001\098\001\255\255\255\255\101\001\255\255\255\255\
\104\001\105\001\106\001\107\001\255\255\109\001\110\001\111\001\
\112\001\255\255\114\001\115\001\116\001\117\001\118\001\119\001\
\120\001\121\001\255\255\009\001\255\255\125\001\255\255\255\255\
\255\255\129\001\130\001\131\001\132\001\133\001\255\255\255\255\
\255\255\137\001\138\001\255\255\255\255\255\255\028\001\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\037\001\
\255\255\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\005\001\255\255\049\001\050\001\255\255\052\001\255\255\
\255\255\255\255\056\001\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\065\001\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\255\255\033\001\076\001\255\255\
\036\001\037\001\080\001\081\001\082\001\255\255\084\001\255\255\
\086\001\087\001\255\255\255\255\090\001\255\255\092\001\093\001\
\094\001\095\001\096\001\097\001\098\001\000\000\255\255\101\001\
\255\255\255\255\104\001\105\001\106\001\107\001\255\255\255\255\
\255\255\069\001\112\001\255\255\255\255\115\001\009\001\255\255\
\118\001\119\001\120\001\121\001\080\001\081\001\082\001\125\001\
\255\255\255\255\255\255\129\001\130\001\255\255\132\001\133\001\
\255\255\028\001\255\255\137\001\138\001\255\255\033\001\255\255\
\255\255\036\001\037\001\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\052\001\255\255\255\255\255\255\056\001\057\001\255\255\
\059\001\125\001\255\255\255\255\255\255\129\001\065\001\255\255\
\132\001\068\001\069\001\255\255\255\255\255\255\073\001\255\255\
\255\255\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\255\255\084\001\255\255\086\001\087\001\255\255\255\255\090\001\
\255\255\255\255\093\001\094\001\095\001\096\001\097\001\098\001\
\255\255\255\255\101\001\255\255\255\255\104\001\105\001\106\001\
\107\001\255\255\000\000\255\255\255\255\112\001\255\255\255\255\
\115\001\009\001\255\255\118\001\119\001\120\001\121\001\255\255\
\255\255\255\255\125\001\255\255\255\255\255\255\129\001\130\001\
\255\255\132\001\133\001\255\255\028\001\255\255\137\001\138\001\
\255\255\033\001\255\255\255\255\036\001\037\001\255\255\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\255\255\052\001\255\255\255\255\255\255\
\056\001\057\001\255\255\059\001\255\255\255\255\255\255\255\255\
\255\255\065\001\255\255\255\255\068\001\069\001\255\255\255\255\
\255\255\073\001\255\255\255\255\076\001\255\255\255\255\255\255\
\080\001\081\001\082\001\255\255\084\001\255\255\086\001\087\001\
\255\255\255\255\090\001\255\255\092\001\093\001\094\001\095\001\
\096\001\097\001\098\001\255\255\255\255\101\001\255\255\255\255\
\104\001\105\001\106\001\107\001\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\115\001\255\255\255\255\118\001\119\001\
\120\001\121\001\255\255\255\255\255\255\125\001\255\255\255\255\
\255\255\129\001\130\001\255\255\132\001\133\001\255\255\255\255\
\255\255\137\001\138\001\255\255\255\255\255\255\001\001\002\001\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\255\255\255\255\
\255\255\028\001\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\036\001\037\001\255\255\039\001\040\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
\059\001\060\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\255\255\
\000\000\255\255\255\255\078\001\255\255\080\001\081\001\082\001\
\083\001\255\255\085\001\255\255\255\255\255\255\089\001\090\001\
\091\001\255\255\093\001\094\001\255\255\255\255\255\255\255\255\
\255\255\100\001\101\001\255\255\255\255\255\255\105\001\106\001\
\107\001\255\255\255\255\110\001\255\255\112\001\255\255\255\255\
\255\255\116\001\117\001\118\001\119\001\120\001\121\001\255\255\
\255\255\255\255\125\001\009\001\255\255\255\255\129\001\130\001\
\131\001\132\001\133\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\037\001\
\255\255\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\050\001\255\255\052\001\255\255\
\255\255\255\255\056\001\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\065\001\000\000\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\255\255\255\255\076\001\255\255\
\255\255\255\255\080\001\081\001\082\001\255\255\084\001\255\255\
\086\001\087\001\255\255\255\255\090\001\255\255\255\255\093\001\
\094\001\095\001\096\001\097\001\098\001\255\255\255\255\101\001\
\255\255\255\255\104\001\105\001\106\001\107\001\255\255\255\255\
\255\255\255\255\112\001\255\255\255\255\115\001\009\001\255\255\
\118\001\119\001\120\001\121\001\255\255\255\255\255\255\125\001\
\255\255\255\255\255\255\129\001\130\001\255\255\132\001\133\001\
\255\255\028\001\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\036\001\037\001\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\052\001\255\255\255\255\255\255\056\001\057\001\255\255\
\059\001\255\255\255\255\000\000\255\255\255\255\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\255\255\
\255\255\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\255\255\084\001\255\255\255\255\087\001\255\255\255\255\090\001\
\255\255\255\255\093\001\094\001\095\001\096\001\097\001\098\001\
\255\255\255\255\101\001\255\255\255\255\104\001\105\001\106\001\
\107\001\255\255\255\255\255\255\255\255\112\001\255\255\255\255\
\115\001\009\001\255\255\118\001\119\001\120\001\121\001\255\255\
\255\255\255\255\125\001\255\255\255\255\255\255\129\001\130\001\
\255\255\132\001\133\001\255\255\028\001\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\037\001\255\255\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\255\255\052\001\000\000\255\255\255\255\
\056\001\057\001\255\255\059\001\255\255\255\255\255\255\255\255\
\255\255\065\001\255\255\255\255\068\001\069\001\255\255\255\255\
\255\255\073\001\255\255\255\255\076\001\255\255\255\255\255\255\
\080\001\081\001\082\001\255\255\084\001\255\255\255\255\087\001\
\255\255\255\255\090\001\255\255\255\255\093\001\094\001\095\001\
\096\001\097\001\098\001\255\255\255\255\101\001\255\255\255\255\
\104\001\105\001\106\001\107\001\255\255\255\255\255\255\255\255\
\112\001\255\255\255\255\115\001\255\255\009\001\118\001\119\001\
\120\001\121\001\255\255\255\255\255\255\125\001\255\255\255\255\
\255\255\129\001\130\001\255\255\132\001\133\001\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\036\001\037\001\255\255\039\001\040\001\041\001\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\049\001\050\001\255\255\
\052\001\255\255\255\255\255\255\056\001\057\001\255\255\059\001\
\255\255\255\255\255\255\255\255\255\255\065\001\255\255\255\255\
\068\001\069\001\255\255\255\255\255\255\073\001\255\255\255\255\
\076\001\255\255\255\255\255\255\080\001\081\001\082\001\255\255\
\084\001\255\255\255\255\087\001\255\255\255\255\090\001\255\255\
\255\255\093\001\255\255\095\001\096\001\097\001\098\001\255\255\
\255\255\255\255\255\255\255\255\104\001\105\001\106\001\107\001\
\255\255\255\255\255\255\255\255\112\001\255\255\255\255\115\001\
\255\255\255\255\118\001\119\001\120\001\121\001\255\255\255\255\
\255\255\125\001\255\255\255\255\255\255\129\001\130\001\028\001\
\132\001\133\001\255\255\255\255\033\001\255\255\255\255\036\001\
\037\001\000\000\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\050\001\255\255\052\001\
\255\255\255\255\255\255\056\001\057\001\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\065\001\255\255\255\255\068\001\
\069\001\255\255\255\255\255\255\073\001\255\255\255\255\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\255\255\084\001\
\255\255\255\255\087\001\255\255\255\255\090\001\255\255\255\255\
\093\001\255\255\095\001\096\001\097\001\098\001\255\255\255\255\
\255\255\255\255\255\255\104\001\105\001\106\001\255\255\255\255\
\255\255\255\255\255\255\112\001\255\255\255\255\115\001\255\255\
\255\255\118\001\119\001\120\001\121\001\255\255\255\255\255\255\
\125\001\028\001\255\255\255\255\129\001\130\001\033\001\132\001\
\133\001\036\001\037\001\000\000\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\052\001\255\255\255\255\255\255\056\001\057\001\255\255\
\059\001\255\255\255\255\255\255\255\255\255\255\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\255\255\
\255\255\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\255\255\084\001\255\255\255\255\087\001\255\255\255\255\090\001\
\255\255\255\255\093\001\255\255\095\001\096\001\097\001\098\001\
\255\255\255\255\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\255\255\255\255\255\255\255\255\112\001\255\255\255\255\
\115\001\255\255\255\255\118\001\119\001\120\001\121\001\255\255\
\255\255\255\255\125\001\028\001\255\255\255\255\129\001\130\001\
\033\001\132\001\133\001\036\001\037\001\000\000\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\255\255\052\001\255\255\255\255\255\255\056\001\
\057\001\255\255\059\001\255\255\255\255\255\255\255\255\255\255\
\065\001\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\073\001\255\255\255\255\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\255\255\084\001\255\255\255\255\255\255\255\255\
\255\255\090\001\255\255\255\255\093\001\255\255\095\001\096\001\
\097\001\098\001\255\255\255\255\255\255\255\255\255\255\104\001\
\105\001\106\001\255\255\255\255\255\255\255\255\255\255\112\001\
\255\255\255\255\115\001\255\255\255\255\118\001\119\001\120\001\
\121\001\255\255\255\255\255\255\125\001\028\001\255\255\255\255\
\129\001\130\001\033\001\132\001\133\001\036\001\037\001\000\000\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\255\255\052\001\255\255\255\255\
\255\255\056\001\057\001\255\255\059\001\255\255\255\255\255\255\
\255\255\255\255\065\001\255\255\255\255\068\001\069\001\255\255\
\255\255\255\255\073\001\255\255\255\255\076\001\255\255\255\255\
\255\255\080\001\081\001\082\001\255\255\084\001\255\255\255\255\
\255\255\255\255\255\255\090\001\255\255\255\255\093\001\255\255\
\095\001\096\001\097\001\098\001\255\255\255\255\255\255\255\255\
\255\255\104\001\105\001\106\001\255\255\255\255\255\255\255\255\
\255\255\112\001\255\255\255\255\115\001\255\255\255\255\118\001\
\119\001\120\001\121\001\255\255\255\255\255\255\125\001\028\001\
\255\255\255\255\129\001\130\001\033\001\132\001\133\001\036\001\
\037\001\000\000\039\001\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\050\001\255\255\052\001\
\255\255\255\255\255\255\056\001\057\001\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\065\001\255\255\255\255\068\001\
\069\001\255\255\255\255\255\255\073\001\255\255\255\255\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\255\255\084\001\
\255\255\255\255\255\255\255\255\255\255\090\001\255\255\255\255\
\093\001\255\255\095\001\096\001\097\001\098\001\255\255\255\255\
\255\255\255\255\255\255\104\001\105\001\106\001\255\255\255\255\
\255\255\255\255\255\255\112\001\255\255\255\255\115\001\255\255\
\255\255\118\001\119\001\120\001\121\001\255\255\255\255\255\255\
\125\001\028\001\255\255\255\255\129\001\130\001\033\001\132\001\
\133\001\036\001\037\001\000\000\039\001\040\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\052\001\255\255\255\255\255\255\056\001\057\001\255\255\
\059\001\255\255\255\255\255\255\255\255\255\255\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\255\255\
\255\255\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\255\255\084\001\255\255\255\255\255\255\255\255\255\255\090\001\
\255\255\255\255\093\001\255\255\095\001\096\001\097\001\098\001\
\255\255\255\255\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\255\255\255\255\255\255\255\255\112\001\255\255\255\255\
\115\001\255\255\255\255\118\001\119\001\120\001\121\001\255\255\
\255\255\255\255\125\001\028\001\255\255\255\255\129\001\130\001\
\033\001\132\001\133\001\036\001\037\001\000\000\039\001\040\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\255\255\052\001\255\255\255\255\255\255\056\001\
\057\001\255\255\059\001\255\255\255\255\255\255\255\255\255\255\
\065\001\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\073\001\255\255\255\255\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\255\255\084\001\255\255\255\255\255\255\255\255\
\255\255\090\001\255\255\255\255\255\255\255\255\095\001\096\001\
\097\001\098\001\255\255\255\255\255\255\255\255\255\255\255\255\
\105\001\106\001\255\255\255\255\255\255\255\255\255\255\112\001\
\255\255\255\255\115\001\255\255\255\255\118\001\119\001\120\001\
\121\001\255\255\255\255\255\255\125\001\028\001\255\255\255\255\
\129\001\130\001\033\001\132\001\133\001\036\001\037\001\000\000\
\039\001\040\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\255\255\052\001\255\255\255\255\
\255\255\056\001\057\001\255\255\059\001\255\255\255\255\255\255\
\255\255\255\255\065\001\255\255\255\255\068\001\069\001\255\255\
\255\255\255\255\073\001\255\255\255\255\076\001\255\255\255\255\
\255\255\080\001\081\001\082\001\255\255\084\001\255\255\255\255\
\255\255\255\255\255\255\090\001\255\255\255\255\255\255\255\255\
\095\001\096\001\255\255\098\001\255\255\255\255\255\255\255\255\
\255\255\255\255\105\001\106\001\255\255\255\255\255\255\255\255\
\255\255\112\001\255\255\255\255\115\001\255\255\255\255\255\255\
\119\001\120\001\121\001\255\255\255\255\255\255\125\001\028\001\
\255\255\255\255\129\001\130\001\033\001\132\001\133\001\036\001\
\037\001\000\000\039\001\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\050\001\255\255\052\001\
\255\255\255\255\255\255\056\001\057\001\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\065\001\255\255\255\255\068\001\
\069\001\255\255\255\255\255\255\073\001\255\255\255\255\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\255\255\084\001\
\255\255\255\255\255\255\255\255\255\255\090\001\255\255\255\255\
\255\255\255\255\095\001\096\001\255\255\098\001\255\255\255\255\
\255\255\255\255\255\255\255\255\105\001\106\001\255\255\255\255\
\255\255\255\255\255\255\112\001\255\255\255\255\115\001\255\255\
\255\255\255\255\119\001\120\001\121\001\255\255\255\255\255\255\
\125\001\028\001\255\255\255\255\129\001\130\001\033\001\132\001\
\133\001\036\001\037\001\000\000\039\001\040\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\052\001\255\255\255\255\255\255\056\001\057\001\255\255\
\059\001\255\255\255\255\255\255\255\255\255\255\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\255\255\
\255\255\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\255\255\084\001\255\255\255\255\255\255\255\255\255\255\090\001\
\255\255\255\255\255\255\255\255\095\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\105\001\106\001\
\255\255\255\255\255\255\255\255\255\255\112\001\255\255\255\255\
\115\001\255\255\255\255\255\255\119\001\120\001\121\001\255\255\
\255\255\255\255\125\001\028\001\255\255\255\255\129\001\130\001\
\033\001\132\001\133\001\036\001\037\001\000\000\039\001\040\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\255\255\052\001\255\255\255\255\255\255\056\001\
\057\001\255\255\059\001\255\255\255\255\255\255\255\255\255\255\
\065\001\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\073\001\255\255\255\255\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\255\255\084\001\255\255\255\255\255\255\255\255\
\255\255\090\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\106\001\255\255\255\255\255\255\255\255\255\255\112\001\
\255\255\255\255\115\001\255\255\255\255\255\255\119\001\120\001\
\121\001\255\255\255\255\255\255\125\001\028\001\255\255\255\255\
\129\001\130\001\033\001\132\001\133\001\036\001\037\001\000\000\
\039\001\040\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\255\255\052\001\255\255\255\255\
\255\255\056\001\057\001\255\255\059\001\255\255\255\255\255\255\
\255\255\255\255\065\001\255\255\255\255\068\001\069\001\255\255\
\255\255\255\255\073\001\255\255\255\255\076\001\255\255\255\255\
\255\255\080\001\081\001\082\001\255\255\084\001\255\255\255\255\
\255\255\255\255\255\255\090\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\105\001\106\001\255\255\255\255\255\255\255\255\
\255\255\112\001\255\255\255\255\115\001\255\255\255\255\255\255\
\255\255\120\001\121\001\255\255\255\255\255\255\125\001\028\001\
\255\255\255\255\129\001\130\001\033\001\132\001\133\001\036\001\
\037\001\000\000\039\001\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\050\001\255\255\052\001\
\255\255\255\255\255\255\255\255\057\001\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\065\001\255\255\255\255\068\001\
\069\001\255\255\255\255\255\255\073\001\255\255\255\255\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\255\255\084\001\
\255\255\255\255\255\255\255\255\255\255\090\001\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\105\001\106\001\255\255\255\255\
\255\255\255\255\255\255\112\001\255\255\255\255\115\001\255\255\
\255\255\255\255\119\001\120\001\121\001\255\255\255\255\255\255\
\125\001\028\001\255\255\255\255\129\001\130\001\033\001\132\001\
\133\001\036\001\037\001\255\255\039\001\040\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\052\001\255\255\255\255\255\255\056\001\057\001\255\255\
\059\001\255\255\255\255\255\255\255\255\255\255\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\255\255\
\255\255\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\255\255\084\001\000\000\255\255\255\255\255\255\255\255\090\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\105\001\106\001\
\255\255\255\255\255\255\255\255\255\255\112\001\255\255\255\255\
\115\001\255\255\255\255\255\255\255\255\120\001\121\001\255\255\
\255\255\255\255\125\001\028\001\255\255\255\255\129\001\130\001\
\033\001\132\001\133\001\036\001\037\001\255\255\039\001\040\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\049\001\050\001\255\255\052\001\255\255\255\255\255\255\056\001\
\057\001\255\255\059\001\255\255\255\255\255\255\255\255\255\255\
\065\001\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\073\001\255\255\255\255\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\255\255\084\001\255\255\255\255\255\255\255\255\
\255\255\090\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\105\001\106\001\255\255\255\255\255\255\255\255\255\255\112\001\
\255\255\255\255\115\001\255\255\255\255\255\255\255\255\120\001\
\121\001\255\255\255\255\255\255\125\001\028\001\255\255\255\255\
\129\001\130\001\033\001\132\001\133\001\036\001\037\001\255\255\
\039\001\040\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\255\255\255\255\
\255\255\255\255\057\001\255\255\059\001\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\068\001\069\001\255\255\
\255\255\255\255\073\001\255\255\255\255\255\255\255\255\255\255\
\255\255\080\001\081\001\082\001\255\255\255\255\255\255\028\001\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\036\001\
\037\001\255\255\039\001\040\001\099\001\100\001\255\255\255\255\
\255\255\255\255\255\255\106\001\107\001\255\255\255\255\052\001\
\255\255\255\255\255\255\255\255\057\001\255\255\059\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\125\001\068\001\
\069\001\255\255\129\001\130\001\073\001\132\001\133\001\255\255\
\255\255\255\255\255\255\080\001\081\001\082\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\100\001\
\255\255\255\255\255\255\255\255\255\255\106\001\107\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\255\255\
\255\255\000\000\255\255\033\001\255\255\255\255\036\001\037\001\
\125\001\039\001\040\001\255\255\129\001\130\001\255\255\132\001\
\133\001\255\255\255\255\255\255\255\255\255\255\052\001\255\255\
\255\255\255\255\255\255\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\255\255\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\082\001\255\255\255\255\255\255\
\028\001\255\255\255\255\000\000\255\255\033\001\255\255\255\255\
\036\001\037\001\255\255\039\001\040\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\106\001\107\001\255\255\255\255\
\052\001\255\255\255\255\255\255\255\255\057\001\255\255\059\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\125\001\
\068\001\069\001\255\255\129\001\130\001\073\001\132\001\133\001\
\255\255\255\255\255\255\255\255\080\001\081\001\082\001\028\001\
\255\255\255\255\000\000\255\255\033\001\255\255\255\255\036\001\
\037\001\255\255\039\001\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\106\001\052\001\
\255\255\255\255\255\255\255\255\057\001\255\255\059\001\255\255\
\255\255\255\255\255\255\119\001\255\255\255\255\255\255\068\001\
\069\001\125\001\255\255\255\255\073\001\129\001\130\001\255\255\
\132\001\133\001\255\255\080\001\081\001\082\001\255\255\255\255\
\255\255\028\001\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\036\001\037\001\255\255\039\001\040\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\106\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
\059\001\255\255\119\001\255\255\255\255\255\255\065\001\255\255\
\125\001\068\001\069\001\255\255\129\001\130\001\073\001\132\001\
\133\001\255\255\255\255\255\255\255\255\080\001\081\001\082\001\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\036\001\037\001\255\255\039\001\040\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\106\001\
\255\255\255\255\255\255\052\001\255\255\255\255\255\255\255\255\
\057\001\255\255\059\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\125\001\068\001\069\001\255\255\129\001\130\001\
\073\001\132\001\133\001\255\255\255\255\255\255\255\255\080\001\
\081\001\082\001\255\255\255\255\255\255\028\001\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\036\001\037\001\255\255\
\039\001\040\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\106\001\255\255\255\255\255\255\052\001\255\255\255\255\
\255\255\255\255\057\001\255\255\059\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\125\001\068\001\069\001\255\255\
\129\001\130\001\073\001\132\001\133\001\255\255\255\255\255\255\
\255\255\080\001\081\001\082\001\255\255\255\255\255\255\028\001\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\036\001\
\037\001\255\255\039\001\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\106\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\057\001\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\125\001\068\001\
\069\001\255\255\129\001\130\001\073\001\132\001\133\001\255\255\
\255\255\255\255\255\255\080\001\081\001\082\001\028\001\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\037\001\
\255\255\039\001\040\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\106\001\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\068\001\069\001\
\125\001\255\255\255\255\073\001\129\001\130\001\255\255\132\001\
\133\001\255\255\080\001\081\001\082\001\255\255\255\255\001\001\
\002\001\003\001\255\255\005\001\006\001\255\255\008\001\255\255\
\255\255\255\255\012\001\255\255\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\106\001\023\001\024\001\255\255\
\255\255\255\255\028\001\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\125\001\
\255\255\255\255\255\255\129\001\130\001\255\255\132\001\133\001\
\255\255\051\001\255\255\255\255\054\001\055\001\255\255\255\255\
\255\255\255\255\060\001\028\001\062\001\063\001\064\001\255\255\
\033\001\255\255\255\255\036\001\037\001\071\001\039\001\040\001\
\255\255\255\255\255\255\255\255\078\001\079\001\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\255\255\255\255\089\001\
\255\255\091\001\059\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\069\001\255\255\255\255\255\255\
\073\001\107\001\255\255\109\001\110\001\111\001\112\001\255\255\
\114\001\255\255\116\001\117\001\001\001\002\001\003\001\255\255\
\005\001\006\001\255\255\008\001\255\255\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\255\255\135\001\136\001\137\001\
\138\001\106\001\023\001\024\001\255\255\255\255\255\255\028\001\
\255\255\255\255\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\125\001\255\255\255\255\255\255\
\255\255\130\001\255\255\132\001\133\001\255\255\051\001\255\255\
\255\255\054\001\055\001\255\255\255\255\083\001\255\255\060\001\
\255\255\062\001\063\001\064\001\090\001\255\255\255\255\093\001\
\094\001\255\255\071\001\255\255\255\255\255\255\100\001\101\001\
\255\255\078\001\079\001\105\001\255\255\107\001\255\255\255\255\
\085\001\255\255\255\255\255\255\089\001\255\255\091\001\255\255\
\118\001\119\001\120\001\121\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\131\001\107\001\255\255\
\109\001\110\001\111\001\112\001\255\255\114\001\255\255\116\001\
\117\001\001\001\002\001\003\001\255\255\005\001\006\001\255\255\
\008\001\255\255\255\255\255\255\012\001\255\255\014\001\015\001\
\016\001\255\255\135\001\136\001\137\001\138\001\255\255\023\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\255\255\054\001\055\001\
\028\001\255\255\255\255\255\255\060\001\033\001\062\001\255\255\
\036\001\037\001\038\001\039\001\040\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\078\001\255\255\
\255\255\255\255\255\255\255\255\255\255\085\001\255\255\059\001\
\255\255\089\001\255\255\091\001\255\255\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\255\255\073\001\255\255\255\255\
\255\255\255\255\255\255\107\001\255\255\109\001\110\001\111\001\
\112\001\255\255\114\001\255\255\116\001\117\001\001\001\002\001\
\003\001\255\255\005\001\006\001\255\255\008\001\255\255\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\137\001\138\001\255\255\023\001\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\125\001\255\255\255\255\255\255\255\255\130\001\255\255\
\132\001\133\001\255\255\255\255\255\255\255\255\255\255\255\255\
\051\001\255\255\255\255\054\001\055\001\255\255\255\255\255\255\
\255\255\060\001\255\255\062\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\078\001\255\255\255\255\255\255\255\255\
\255\255\255\255\085\001\255\255\255\255\255\255\089\001\255\255\
\091\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\107\001\255\255\109\001\110\001\111\001\112\001\255\255\114\001\
\255\255\116\001\117\001\001\001\002\001\003\001\255\255\005\001\
\006\001\255\255\008\001\255\255\255\255\255\255\012\001\255\255\
\014\001\015\001\016\001\255\255\255\255\255\255\137\001\138\001\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\051\001\255\255\255\255\
\054\001\055\001\255\255\255\255\255\255\255\255\060\001\255\255\
\062\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\078\001\255\255\255\255\255\255\255\255\255\255\255\255\085\001\
\255\255\255\255\255\255\089\001\255\255\091\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\107\001\255\255\109\001\
\110\001\111\001\112\001\255\255\114\001\255\255\116\001\117\001\
\001\001\002\001\003\001\255\255\005\001\006\001\255\255\008\001\
\255\255\255\255\255\255\012\001\255\255\014\001\015\001\016\001\
\255\255\255\255\255\255\137\001\138\001\255\255\023\001\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\051\001\255\255\255\255\054\001\055\001\255\255\
\255\255\255\255\255\255\060\001\255\255\062\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\078\001\255\255\255\255\
\255\255\255\255\255\255\255\255\085\001\255\255\255\255\255\255\
\089\001\255\255\091\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\107\001\255\255\109\001\110\001\111\001\112\001\
\255\255\114\001\255\255\116\001\117\001\001\001\002\001\003\001\
\255\255\005\001\006\001\255\255\008\001\255\255\255\255\255\255\
\012\001\255\255\014\001\015\001\016\001\255\255\255\255\255\255\
\137\001\138\001\255\255\023\001\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\255\255\255\255\054\001\055\001\255\255\255\255\255\255\255\255\
\060\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\078\001\255\255\255\255\255\255\255\255\255\255\
\255\255\085\001\255\255\255\255\255\255\089\001\255\255\091\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\107\001\
\255\255\109\001\110\001\111\001\112\001\255\255\114\001\255\255\
\116\001\117\001\001\001\002\001\003\001\255\255\005\001\006\001\
\255\255\008\001\255\255\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\255\255\255\255\255\255\137\001\138\001\255\255\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\051\001\255\255\255\255\054\001\
\055\001\255\255\255\255\255\255\255\255\060\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\255\255\005\001\006\001\255\255\255\255\078\001\
\255\255\255\255\012\001\255\255\014\001\015\001\016\001\255\255\
\255\255\255\255\089\001\255\255\091\001\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\109\001\110\001\
\111\001\112\001\255\255\114\001\046\001\116\001\117\001\255\255\
\255\255\051\001\255\255\255\255\054\001\055\001\255\255\255\255\
\255\255\255\255\060\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\137\001\138\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\078\001\255\255\255\255\255\255\
\255\255\255\255\084\001\085\001\255\255\255\255\255\255\089\001\
\255\255\091\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\099\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\107\001\255\255\109\001\110\001\111\001\255\255\255\255\
\114\001\255\255\116\001\117\001\001\001\002\001\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\051\001\255\255\
\255\255\054\001\055\001\255\255\023\001\024\001\255\255\060\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\078\001\255\255\255\255\012\001\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\089\001\255\255\091\001\023\001\
\024\001\060\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\109\001\110\001\111\001\078\001\255\255\114\001\255\255\116\001\
\117\001\255\255\085\001\255\255\255\255\255\255\089\001\090\001\
\091\001\255\255\093\001\255\255\060\001\255\255\255\255\255\255\
\255\255\100\001\101\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\110\001\255\255\112\001\078\001\255\255\
\255\255\116\001\117\001\255\255\255\255\085\001\255\255\255\255\
\255\255\089\001\255\255\091\001\001\001\002\001\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\255\255\255\255\110\001\255\255\
\112\001\255\255\023\001\024\001\116\001\117\001\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\255\255\005\001\006\001\
\255\255\255\255\255\255\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\060\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\078\001\255\255\255\255\255\255\255\255\255\255\255\255\
\085\001\255\255\255\255\255\255\089\001\060\001\091\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\078\001\
\255\255\110\001\255\255\112\001\255\255\255\255\085\001\116\001\
\117\001\255\255\089\001\255\255\091\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\255\255\255\255\116\001\117\001"

let yynames_const = "\
  FORALL\000\
  EXISTS\000\
  ASSUME\000\
  QUERY\000\
  DEFINE\000\
  LOGIC\000\
  OPAQUE\000\
  PRAGMALIGHT\000\
  PRAGMA_SET_OPTIONS\000\
  PRAGMA_RESET_OPTIONS\000\
  BAR_BAR\000\
  LEQ\000\
  GEQ\000\
  LESS\000\
  LESSLESS\000\
  TYP_APP_LESS\000\
  TYP_APP_GREATER\000\
  LESSGREATER\000\
  SUBTYPE\000\
  SUBKIND\000\
  BANG\000\
  AND\000\
  AS\000\
  ASSERT\000\
  BEGIN\000\
  ELSE\000\
  END\000\
  DOT_DOT\000\
  EXCEPTION\000\
  FALSE\000\
  FOR\000\
  FUN\000\
  FUNCTION\000\
  IF\000\
  IN\000\
  FINALLY\000\
  RESERVED\000\
  MODULE\000\
  DEFAULT\000\
  LAZY\000\
  MATCH\000\
  OF\000\
  OPEN\000\
  OR\000\
  REC\000\
  THEN\000\
  TO\000\
  TRUE\000\
  TRY\000\
  TYPE\000\
  EFFECT\000\
  VAL\000\
  WHEN\000\
  WITH\000\
  HASH\000\
  AMP\000\
  AMP_AMP\000\
  QUOTE\000\
  LPAREN\000\
  RPAREN\000\
  LPAREN_RPAREN\000\
  STAR\000\
  COMMA\000\
  RARROW\000\
  IFF\000\
  IMPLIES\000\
  CONJUNCTION\000\
  DISJUNCTION\000\
  DOT\000\
  COLON\000\
  COLON_COLON\000\
  ATSIGN\000\
  HAT\000\
  COLON_EQUALS\000\
  SEMICOLON\000\
  SEMICOLON_SEMICOLON\000\
  EQUALS\000\
  EQUALS_EQUALS\000\
  PERCENT_LBRACK\000\
  LBRACK\000\
  LBRACK_BAR\000\
  LBRACE\000\
  BACKSLASH\000\
  BANG_LBRACE\000\
  BAR_RBRACK\000\
  UNDERSCORE\000\
  LENS_PAREN_LEFT\000\
  LENS_PAREN_RIGHT\000\
  BAR\000\
  RBRACK\000\
  RBRACE\000\
  MINUS\000\
  DOLLAR\000\
  PUBLIC\000\
  PRIVATE\000\
  LBRACE_COLON_PATTERN\000\
  PIPE_LEFT\000\
  PIPE_RIGHT\000\
  NEW_EFFECT\000\
  SUB_EFFECT\000\
  SQUIGGLY_RARROW\000\
  TOTAL\000\
  KIND\000\
  PRINT\000\
  REQUIRES\000\
  ENSURES\000\
  PLUS_OP\000\
  MINUS_OP\000\
  BAR_FOCUS\000\
  COMMENT\000\
  WHITESPACE\000\
  HASH_LINE\000\
  HASH_LIGHT\000\
  HASH_IF\000\
  HASH_ELSE\000\
  HASH_ENDIF\000\
  INACTIVECODE\000\
  LINE_COMMENT\000\
  STRING_TEXT\000\
  EOF\000\
  "

let yynames_block = "\
  BYTEARRAY\000\
  STRING\000\
  IDENT\000\
  IDENT_LESS\000\
  NAME\000\
  TVAR\000\
  DIV_MOD_OP\000\
  TILDE\000\
  CUSTOM_OP\000\
  INT8\000\
  INT16\000\
  INT32\000\
  INT32_DOT_DOT\000\
  INT64\000\
  INT\000\
  UINT8\000\
  UINT16\000\
  UINT32\000\
  UINT64\000\
  UNATIVEINT\000\
  NATIVEINT\000\
  IEEE32\000\
  IEEE64\000\
  CHAR\000\
  DECIMAL\000\
  BIGINT\000\
  BIGNUM\000\
  LET\000\
  LQUOTE\000\
  RQUOTE\000\
  LEX_FAILURE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'file) in
    Obj.repr(
# 106 "parse.mly"
   ( Inl _1 )
# 2227 "parse.ml"
               : inputFragment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 108 "parse.mly"
   ( Inr (_1::_2) )
# 2235 "parse.ml"
               : inputFragment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'maybe_pragma_light) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'moduleList) in
    Obj.repr(
# 112 "parse.mly"
      ( _2 )
# 2243 "parse.ml"
               : 'file))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'modul) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'moduleList) in
    Obj.repr(
# 117 "parse.mly"
      ( _1::_2 )
# 2251 "parse.ml"
               : 'moduleList))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parse.mly"
      ( [] )
# 2257 "parse.ml"
               : 'moduleList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'qname) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'endopt) in
    Obj.repr(
# 123 "parse.mly"
        ( Module(_2, _3) )
# 2266 "parse.ml"
               : 'modul))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parse.mly"
         ()
# 2272 "parse.ml"
               : 'endopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parse.mly"
         ()
# 2278 "parse.ml"
               : 'endopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parse.mly"
        ()
# 2284 "parse.ml"
               : 'maybe_pragma_light))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : bytes) in
    Obj.repr(
# 132 "parse.mly"
        ()
# 2291 "parse.ml"
               : 'maybe_pragma_light))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : bytes) in
    Obj.repr(
# 136 "parse.mly"
 ( 
	   let s = string_of_bytes _2 in
	   if s = "--no_fs_typ_app"
	   then fs_typ_app := false;
	   SetOptions s
	)
# 2303 "parse.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parse.mly"
 ( ResetOptions )
# 2309 "parse.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parse.mly"
      ( [] )
# 2315 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 149 "parse.mly"
      ( [mk_decl (Main _2) (rhs2 parseState 1 2)] )
# 2322 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 151 "parse.mly"
      ( (_1::_2) )
# 2330 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl2) in
    Obj.repr(
# 154 "parse.mly"
          ( mk_decl _1 (rhs parseState 1) )
# 2337 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qname) in
    Obj.repr(
# 158 "parse.mly"
      ( Open _2 )
# 2344 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'kind_abbrev) in
    Obj.repr(
# 160 "parse.mly"
      ( _1 )
# 2351 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tycon) in
    Obj.repr(
# 162 "parse.mly"
      ( _1 )
# 2358 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : bool) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'recopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'letbinding) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'letbindings) in
    Obj.repr(
# 164 "parse.mly"
      ( ToplevelLet(_2, _3::_4) )
# 2368 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'qualifiers) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 166 "parse.mly"
      ( Val(_1, _3, _5) )
# 2377 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'assumeTag) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'formula) in
    Obj.repr(
# 168 "parse.mly"
      ( Assume(_1, _2, _4) )
# 2386 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'of_typ) in
    Obj.repr(
# 170 "parse.mly"
      ( Exception(_2, _3) )
# 2394 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qualifiers) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'new_effect) in
    Obj.repr(
# 172 "parse.mly"
   ( NewEffect (_1, _3) )
# 2402 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sub_effect) in
    Obj.repr(
# 174 "parse.mly"
   ( SubEffect _2 )
# 2409 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pragma) in
    Obj.repr(
# 176 "parse.mly"
   ( Pragma _1 )
# 2416 "parse.ml"
               : 'decl2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'qualifiers) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tyconDefinition) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tyconDefinitions) in
    Obj.repr(
# 180 "parse.mly"
      ( Tycon (_1, _3::_4) )
# 2425 "parse.ml"
               : 'tycon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qualifiers) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyconDefinition) in
    Obj.repr(
# 183 "parse.mly"
   ( Tycon(Effect::_1, [_3]) )
# 2433 "parse.ml"
               : 'tycon))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'binders) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'kind) in
    Obj.repr(
# 187 "parse.mly"
      ( KindAbbrev(_2, _3, _5) )
# 2442 "parse.ml"
               : 'kind_abbrev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'name) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binders) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simpleTerm) in
    Obj.repr(
# 191 "parse.mly"
   (
		 RedefineEffect(_1, _2, _4)
	  )
# 2453 "parse.ml"
               : 'new_effect))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'binders) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'kind) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'effect_decl) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'more_effect_decls) in
    Obj.repr(
# 195 "parse.mly"
      (  
		 DefineEffect(_2, _3, _5, _7::_8)
	  )
# 2466 "parse.ml"
               : 'new_effect))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simpleTerm) in
    Obj.repr(
# 201 "parse.mly"
 (
		mk_decl (Tycon ([], [TyconAbbrev(_1, [], None, _3)])) (rhs2 parseState 1 3)
	)
# 2476 "parse.ml"
               : 'effect_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "parse.mly"
                    ( []     )
# 2482 "parse.ml"
               : 'more_effect_decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'effect_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'more_effect_decls) in
    Obj.repr(
# 207 "parse.mly"
                                            ( _2::_3 )
# 2490 "parse.ml"
               : 'more_effect_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'qname) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'qname) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'simpleTerm) in
    Obj.repr(
# 212 "parse.mly"
      (
        { 
          msource=_1;
          mdest=_3;
          lift_op=_5
        }
      )
# 2505 "parse.ml"
               : 'sub_effect))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "parse.mly"
                 ( Logic )
# 2511 "parse.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "parse.mly"
                 ( Assumption )
# 2517 "parse.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "parse.mly"
                 ( Opaque )
# 2523 "parse.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "parse.mly"
                 ( DefaultEffect None )
# 2529 "parse.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "parse.mly"
                 ( TotalEffect )
# 2535 "parse.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 226 "parse.mly"
                 ( Private )
# 2541 "parse.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 229 "parse.mly"
                         ( [] )
# 2547 "parse.ml"
               : 'qualifiers))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'qualifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qualifiers) in
    Obj.repr(
# 230 "parse.mly"
                         ( _1::_2 )
# 2555 "parse.ml"
               : 'qualifiers))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "parse.mly"
           ( [Assumption] )
# 2561 "parse.ml"
               : 'assumeTag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'eitherName) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typars) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ascribeKindOpt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tyconDefn) in
    Obj.repr(
# 237 "parse.mly"
      ( _4 _1 _2 _3 )
# 2571 "parse.ml"
               : 'tyconDefinition))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "parse.mly"
      ( [] )
# 2577 "parse.ml"
               : 'tyconDefinitions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyconDefinition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyconDefinitions) in
    Obj.repr(
# 242 "parse.mly"
      ( _2::_3 )
# 2585 "parse.ml"
               : 'tyconDefinitions))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "parse.mly"
          ( None )
# 2591 "parse.ml"
               : 'ident_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 246 "parse.mly"
          ( Some _1 )
# 2598 "parse.ml"
               : 'ident_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "parse.mly"
        ( true )
# 2604 "parse.ml"
               : 'recopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "parse.mly"
        ( false )
# 2610 "parse.ml"
               : 'recopt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'letbinding) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'letbindings) in
    Obj.repr(
# 254 "parse.mly"
      ( _2::_3 )
# 2618 "parse.ml"
               : 'letbindings))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "parse.mly"
      ( [] )
# 2624 "parse.ml"
               : 'letbindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ascribeTypOpt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 259 "parse.mly"
      ( 
        match _2 with 
          | None -> (_1, _4)
          | Some t -> (mk_pattern (PatAscribed(_1, t)) (rhs2 parseState 1 2), _4)
      )
# 2637 "parse.ml"
               : 'letbinding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuplePattern) in
    Obj.repr(
# 266 "parse.mly"
                 ( _1 )
# 2644 "parse.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'listPattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'patternListComma) in
    Obj.repr(
# 271 "parse.mly"
      (
        match _2 with 
          | [] -> _1
          | _ -> mk_pattern (PatTuple(_1::_2, false)) (rhs2 parseState 1 2)
      )
# 2656 "parse.ml"
               : 'tuplePattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 279 "parse.mly"
      ( [] )
# 2662 "parse.ml"
               : 'patternListComma))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'listPattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternListComma) in
    Obj.repr(
# 280 "parse.mly"
                                       ( _2::_3 )
# 2670 "parse.ml"
               : 'patternListComma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appPattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'consPattern) in
    Obj.repr(
# 284 "parse.mly"
      ( 
        match _2 with 
          | None -> _1
          | Some tl -> mk_pattern (consPat (rhs parseState 2) _1 tl) (rhs2 parseState 1 2) 
      )
# 2682 "parse.ml"
               : 'listPattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 291 "parse.mly"
     ( None )
# 2688 "parse.ml"
               : 'consPattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'appPattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'consPattern) in
    Obj.repr(
# 293 "parse.mly"
      ( 
        match _3 with 
          | None -> Some _2
          | Some tl -> Some (mk_pattern (consPat (rhs parseState 1) _2 tl) (rhs2 parseState 1 3))
      )
# 2700 "parse.ml"
               : 'consPattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicPattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicPatterns) in
    Obj.repr(
# 301 "parse.mly"
      ( 
        let hd = _1 in 
        let r = rhs parseState 1 in 
        match _2 with 
          | [] -> hd
          | _ -> mk_pattern (PatApp(hd, _2)) (union_ranges r (rhs parseState 1))
      )
# 2714 "parse.ml"
               : 'appPattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicPattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'atomicPattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomicPatterns) in
    Obj.repr(
# 311 "parse.mly"
      (
        let args = _2::_3 in 
          mk_pattern (PatApp(_1, args)) (rhs2 parseState 1 3)
      )
# 2726 "parse.ml"
               : 'compositePattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuplePattern) in
    Obj.repr(
# 315 "parse.mly"
                 ( _1 )
# 2733 "parse.ml"
               : 'compositePattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 318 "parse.mly"
       ( [] )
# 2739 "parse.ml"
               : 'atomicPatterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicPattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicPatterns) in
    Obj.repr(
# 319 "parse.mly"
                                 ( _1::_2 )
# 2747 "parse.ml"
               : 'atomicPatterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicPattern2) in
    Obj.repr(
# 322 "parse.mly"
                   ( mk_pattern _1 (rhs parseState 1) )
# 2754 "parse.ml"
               : 'atomicPattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonTvarPattern2) in
    Obj.repr(
# 325 "parse.mly"
                    ( _1 )
# 2761 "parse.ml"
               : 'atomicPattern2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tvar) in
    Obj.repr(
# 326 "parse.mly"
          ( PatTvar (_1, false) )
# 2768 "parse.ml"
               : 'atomicPattern2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonTvarPattern2) in
    Obj.repr(
# 329 "parse.mly"
                    ( mk_pattern _1 (rhs parseState 1) )
# 2775 "parse.ml"
               : 'nonTvarPattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 332 "parse.mly"
               ( PatWild )
# 2781 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 333 "parse.mly"
             ( PatConst _1 )
# 2788 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 334 "parse.mly"
               ( PatVar(_2, true) )
# 2795 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 335 "parse.mly"
          ( PatVar(_1, false) )
# 2802 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qname) in
    Obj.repr(
# 336 "parse.mly"
          ( PatName _1 )
# 2809 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patternListSemiColon) in
    Obj.repr(
# 337 "parse.mly"
                                       ( PatList _2 )
# 2816 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ascriptionOrPattern) in
    Obj.repr(
# 338 "parse.mly"
                                      ( _2 )
# 2823 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordPattern) in
    Obj.repr(
# 339 "parse.mly"
                                ( PatRecord _2 )
# 2830 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'listPattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'listPattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'patternListComma) in
    Obj.repr(
# 341 "parse.mly"
      ( 
        let args = _2::_4::_5 in
        PatTuple(args, true)
      )
# 2842 "parse.ml"
               : 'nonTvarPattern2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'nonTvarPattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'refineOpt) in
    Obj.repr(
# 348 "parse.mly"
      ( 
		match _4 with
		  | None -> PatAscribed(_1, _3) 
			  | Some phi ->
				let t = match _1.pat with 
				  | PatVar(x, _) -> 
					mk_term (Refine(mk_binder (Annotated(x, _3)) (rhs2 parseState 1 3) Type None, phi)) (rhs2 parseState 1 4) Type 
				  | _ -> errorR(Error("Not a valid refinement type", lhs(parseState))); _3 in
				PatAscribed(_1, t)
      )
# 2860 "parse.ml"
               : 'ascriptionOrPattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 358 "parse.mly"
                            ( _1.pat )
# 2867 "parse.ml"
               : 'ascriptionOrPattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 361 "parse.mly"
      ( [] )
# 2873 "parse.ml"
               : 'patternListSemiColon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appPattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'patternListSemiColonRest) in
    Obj.repr(
# 362 "parse.mly"
                                        ( _1::_2 )
# 2881 "parse.ml"
               : 'patternListSemiColon))
; (fun __caml_parser_env ->
    Obj.repr(
# 365 "parse.mly"
     ( [] )
# 2887 "parse.ml"
               : 'patternListSemiColonRest))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'appPattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternListSemiColonRest) in
    Obj.repr(
# 366 "parse.mly"
                                                  ( _2::_3 )
# 2895 "parse.ml"
               : 'patternListSemiColonRest))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lid) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'moreFieldPatterns) in
    Obj.repr(
# 370 "parse.mly"
                                         ( (_1,_3)::_4 )
# 2904 "parse.ml"
               : 'recordPattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 373 "parse.mly"
    ( [] )
# 2910 "parse.ml"
               : 'moreFieldPatterns))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'lid) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'moreFieldPatterns) in
    Obj.repr(
# 374 "parse.mly"
                                                   ( (_2,_4)::_5 )
# 2919 "parse.ml"
               : 'moreFieldPatterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 377 "parse.mly"
          ( mk_binder (Variable(_1)) (rhs parseState 1) Type None  )
# 2926 "parse.ml"
               : 'binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tvar) in
    Obj.repr(
# 378 "parse.mly"
          ( mk_binder (TVariable(_1)) (rhs parseState 1) Kind None  )
# 2933 "parse.ml"
               : 'binder))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'aqual_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'refineOpt) in
    Obj.repr(
# 380 "parse.mly"
  ( mkRefinedBinder _3 _5 _6 (rhs2 parseState 1 7) _2 )
# 2943 "parse.ml"
               : 'binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tvarinsts) in
    Obj.repr(
# 383 "parse.mly"
                           ( _1 )
# 2950 "parse.ml"
               : 'typars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binders) in
    Obj.repr(
# 384 "parse.mly"
                           ( _1 )
# 2957 "parse.ml"
               : 'typars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tvars) in
    Obj.repr(
# 387 "parse.mly"
                                          ( List.map (fun tv -> mk_binder (TVariable(tv)) tv.idRange Kind None) _2 )
# 2964 "parse.ml"
               : 'tvarinsts))
; (fun __caml_parser_env ->
    Obj.repr(
# 390 "parse.mly"
           ( Some Implicit )
# 2970 "parse.ml"
               : 'aqual_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 391 "parse.mly"
           ( Some Equality )
# 2976 "parse.ml"
               : 'aqual_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 392 "parse.mly"
           ( None )
# 2982 "parse.ml"
               : 'aqual_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'binder) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'binders) in
    Obj.repr(
# 395 "parse.mly"
                   ( _1::_2 )
# 2990 "parse.ml"
               : 'binders))
; (fun __caml_parser_env ->
    Obj.repr(
# 396 "parse.mly"
                   ( []     )
# 2996 "parse.ml"
               : 'binders))
; (fun __caml_parser_env ->
    Obj.repr(
# 399 "parse.mly"
                  ( (fun id binders kopt -> TyconAbstract(id, binders, kopt)) )
# 3002 "parse.ml"
               : 'tyconDefn))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 400 "parse.mly"
                  ( (fun id binders kopt -> TyconAbbrev(id, binders, kopt, _2)) )
# 3009 "parse.ml"
               : 'tyconDefn))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'recordFieldDecl) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'recordFields) in
    Obj.repr(
# 401 "parse.mly"
                                                      ( (fun id binders kopt -> TyconRecord(id, binders, kopt, _3::_4)) )
# 3017 "parse.ml"
               : 'tyconDefn))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructors) in
    Obj.repr(
# 402 "parse.mly"
                        ( (fun id binders kopt -> TyconVariant(id, binders, kopt, _2)) )
# 3024 "parse.ml"
               : 'tyconDefn))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordFieldDecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'recordFields) in
    Obj.repr(
# 407 "parse.mly"
      ( _2::_3 )
# 3032 "parse.ml"
               : 'recordFields))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "parse.mly"
              ( [] )
# 3038 "parse.ml"
               : 'recordFields))
; (fun __caml_parser_env ->
    Obj.repr(
# 409 "parse.mly"
      ( [] )
# 3044 "parse.ml"
               : 'recordFields))
; (fun __caml_parser_env ->
    Obj.repr(
# 413 "parse.mly"
      ( [] )
# 3050 "parse.ml"
               : 'constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constructors) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructorDecl) in
    Obj.repr(
# 415 "parse.mly"
      ( _1@[_2] )
# 3058 "parse.ml"
               : 'constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmTuple) in
    Obj.repr(
# 419 "parse.mly"
      ( (_1, _3) )
# 3066 "parse.ml"
               : 'recordFieldDecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 423 "parse.mly"
      ( (_2,Some _4,false) )
# 3074 "parse.ml"
               : 'constructorDecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'of_typ) in
    Obj.repr(
# 425 "parse.mly"
      ( (_2,_3,true) )
# 3082 "parse.ml"
               : 'constructorDecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 428 "parse.mly"
           (  None )
# 3088 "parse.ml"
               : 'of_typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 429 "parse.mly"
           ( Some _2 )
# 3095 "parse.ml"
               : 'of_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eitherpath) in
    Obj.repr(
# 432 "parse.mly"
               ( lid_of_ids _1 )
# 3102 "parse.ml"
               : 'eitherQname))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 435 "parse.mly"
          ( [_1] )
# 3109 "parse.ml"
               : 'eitherpath))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'maybeMorePath) in
    Obj.repr(
# 436 "parse.mly"
                       ( _1::_2 )
# 3117 "parse.ml"
               : 'eitherpath))
; (fun __caml_parser_env ->
    Obj.repr(
# 439 "parse.mly"
       ( [] )
# 3123 "parse.ml"
               : 'maybeMorePath))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'eitherpath) in
    Obj.repr(
# 440 "parse.mly"
                    ( _2 )
# 3130 "parse.ml"
               : 'maybeMorePath))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'idpath) in
    Obj.repr(
# 443 "parse.mly"
           ( lid_of_ids _1 )
# 3137 "parse.ml"
               : 'lid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'namepath) in
    Obj.repr(
# 446 "parse.mly"
             ( lid_of_ids _1 )
# 3144 "parse.ml"
               : 'qname))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 449 "parse.mly"
          ( _1 )
# 3151 "parse.ml"
               : 'eitherName))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 450 "parse.mly"
          ( _1 )
# 3158 "parse.ml"
               : 'eitherName))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 454 "parse.mly"
      ( mk_ident(_1, rhs parseState 1))
# 3165 "parse.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 458 "parse.mly"
      ( mk_ident(_1, rhs parseState 1) )
# 3172 "parse.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 461 "parse.mly"
                        ( [mk_ident(_1, rhs parseState 1)] )
# 3179 "parse.ml"
               : 'tvars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tvars) in
    Obj.repr(
# 462 "parse.mly"
                        ( mk_ident(_1, rhs parseState 1) ::_3 )
# 3187 "parse.ml"
               : 'tvars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 466 "parse.mly"
      ( mk_ident(_1, rhs parseState 1) )
# 3194 "parse.ml"
               : 'tvar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 470 "parse.mly"
      ( [_1] )
# 3201 "parse.ml"
               : 'namepath))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'namepath) in
    Obj.repr(
# 472 "parse.mly"
      ( _1::_3 )
# 3209 "parse.ml"
               : 'namepath))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 476 "parse.mly"
      ( [_1] )
# 3216 "parse.ml"
               : 'idpath))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'idpath) in
    Obj.repr(
# 478 "parse.mly"
      ( _1::_3 )
# 3224 "parse.ml"
               : 'idpath))
; (fun __caml_parser_env ->
    Obj.repr(
# 481 "parse.mly"
                 ( None )
# 3230 "parse.ml"
               : 'ascribeTypOpt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'product) in
    Obj.repr(
# 482 "parse.mly"
                  ( Some _2 )
# 3237 "parse.ml"
               : 'ascribeTypOpt))
; (fun __caml_parser_env ->
    Obj.repr(
# 485 "parse.mly"
                  ( None )
# 3243 "parse.ml"
               : 'ascribeKindOpt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'kind) in
    Obj.repr(
# 486 "parse.mly"
                ( Some _2 )
# 3250 "parse.ml"
               : 'ascribeKindOpt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'product) in
    Obj.repr(
# 489 "parse.mly"
            ( {_1 with level=Kind} )
# 3257 "parse.ml"
               : 'kind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simpleTerm) in
    Obj.repr(
# 492 "parse.mly"
                ( _1 )
# 3264 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'binders) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'qpat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noSeqTerm) in
    Obj.repr(
# 495 "parse.mly"
      (
        mk_term (QForall(_2,_4,_5)) (rhs2 parseState 1 5) Formula
      )
# 3275 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'binders) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'qpat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noSeqTerm) in
    Obj.repr(
# 500 "parse.mly"
      (
        mk_term (QExists(_2,_4,_5)) (rhs2 parseState 1 5) Formula
      )
# 3286 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noSeqTerm) in
    Obj.repr(
# 506 "parse.mly"
      ( _1 )
# 3293 "parse.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'noSeqTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 509 "parse.mly"
      ( mk_term (Seq(_1, _3)) (rhs2 parseState 1 3) Expr )
# 3301 "parse.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 513 "parse.mly"
         ( _1 )
# 3308 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'label_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 516 "parse.mly"
     (
        let pos = rhs2 parseState 1 4 in
        let f = _3 in
        mk_term (Requires(f, _2)) pos Type
     )
# 3320 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'label_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 524 "parse.mly"
     (
        let pos = rhs2 parseState 1 4 in
        let f = _3 in
        mk_term (Ensures(f, _2)) pos Type 
     )
# 3332 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'noSeqTerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'noSeqTerm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'noSeqTerm) in
    Obj.repr(
# 531 "parse.mly"
      (
        mk_term (If(_2, _4, _6)) (rhs2 parseState 1 6) Expr
      )
# 3343 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'noSeqTerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'noSeqTerm) in
    Obj.repr(
# 536 "parse.mly"
      (
	    let e = mk_term (Const Const_unit) (rhs2 parseState 4 4) Expr in
        mk_term (If(_2, _4, e)) (rhs2 parseState 1 4) Expr
      )
# 3354 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'firstPatternBranch) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'patternBranches) in
    Obj.repr(
# 542 "parse.mly"
      (
		 let branches = focusBranches (_4::_5) (rhs2 parseState 1 5) in
         mk_term (TryWith(_2, branches)) (rhs2 parseState 1 5) Expr
      )
# 3366 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'firstPatternBranch) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'patternBranches) in
    Obj.repr(
# 548 "parse.mly"
      (	
		let branches = focusBranches (_4::_5) (rhs2 parseState 1 5) in
	    mk_term (Match(_2, branches)) (rhs2 parseState 1 5) Expr
      )
# 3378 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : bool) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'recopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'letbinding) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'letbindings) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 554 "parse.mly"
      (
        mk_term (Let(_2, (_3::_4), _6)) (rhs2 parseState 1 6) Expr
      )
# 3391 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'firstPatternBranch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternBranches) in
    Obj.repr(
# 559 "parse.mly"
      ( 
	    let branches = focusBranches (_2::_3) (rhs2 parseState 1 3) in
        mk_function branches (lhs parseState) (rhs2 parseState 1 3)
      )
# 3402 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 565 "parse.mly"
      ( mkExplicitApp (mk_term (Var assume_lid) (rhs parseState 1) Expr) [_2]
          (rhs2 parseState 1 2)
      )
# 3411 "parse.ml"
               : 'noSeqTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 570 "parse.mly"
                           ( None )
# 3417 "parse.ml"
               : 'label_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : bytes) in
    Obj.repr(
# 571 "parse.mly"
                           ( Some (string_of_bytes _2) )
# 3424 "parse.ml"
               : 'label_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 574 "parse.mly"
      ( [] )
# 3430 "parse.ml"
               : 'qpat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'appTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'morePats) in
    Obj.repr(
# 576 "parse.mly"
      ( _2::_3 )
# 3438 "parse.ml"
               : 'qpat))
; (fun __caml_parser_env ->
    Obj.repr(
# 579 "parse.mly"
     ( [] )
# 3444 "parse.ml"
               : 'morePats))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'morePats) in
    Obj.repr(
# 580 "parse.mly"
                                ( _2::_3 )
# 3452 "parse.ml"
               : 'morePats))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmIff) in
    Obj.repr(
# 583 "parse.mly"
          ( _1 )
# 3459 "parse.ml"
               : 'simpleTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'atomicPattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'atomicPatterns) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'funArrow) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 586 "parse.mly"
      (
        _4 (Abs(_2::_3, _5)) (rhs2 parseState 1 5) 
      )
# 3471 "parse.ml"
               : 'simpleTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 591 "parse.mly"
      ( [] )
# 3477 "parse.ml"
               : 'patternBranches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'patternBranches) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'patternBranch) in
    Obj.repr(
# 593 "parse.mly"
      ( _1@[_2] )
# 3485 "parse.ml"
               : 'patternBranches))
; (fun __caml_parser_env ->
    Obj.repr(
# 596 "parse.mly"
        (())
# 3491 "parse.ml"
               : 'maybeBar))
; (fun __caml_parser_env ->
    Obj.repr(
# 597 "parse.mly"
        (())
# 3497 "parse.ml"
               : 'maybeBar))
; (fun __caml_parser_env ->
    Obj.repr(
# 600 "parse.mly"
                    ( false )
# 3503 "parse.ml"
               : 'maybeFocusArrow))
; (fun __caml_parser_env ->
    Obj.repr(
# 601 "parse.mly"
                    ( true )
# 3509 "parse.ml"
               : 'maybeFocusArrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'maybeBar) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'disjunctivePattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'maybeWhen) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 605 "parse.mly"
      ( 
        let pat = match _2 with 
          | [p] -> p 
          | ps -> mk_pattern (PatOr ps) (rhs2 parseState 1 2) in
        (false, (pat, _3, _5))
      )
# 3524 "parse.ml"
               : 'firstPatternBranch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'disjunctivePattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'maybeWhen) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'maybeFocusArrow) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 614 "parse.mly"
      ( 
        let pat = match _2 with 
          | [p] -> p 
          | ps -> mk_pattern (PatOr ps) (rhs2 parseState 1 2) in
        (_4, (pat, _3, _5)) 
      )
# 3539 "parse.ml"
               : 'patternBranch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 622 "parse.mly"
                ( [_1] )
# 3546 "parse.ml"
               : 'disjunctivePattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'disjunctivePattern) in
    Obj.repr(
# 623 "parse.mly"
                                   ( _1::_3 )
# 3554 "parse.ml"
               : 'disjunctivePattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 626 "parse.mly"
                ( None )
# 3560 "parse.ml"
               : 'maybeWhen))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 627 "parse.mly"
                 ( Some _2 )
# 3567 "parse.ml"
               : 'maybeWhen))
; (fun __caml_parser_env ->
    Obj.repr(
# 630 "parse.mly"
           ( fun t r -> mk_term t r Un )
# 3573 "parse.ml"
               : 'funArrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tmImplies) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmIff) in
    Obj.repr(
# 634 "parse.mly"
      (
        mk_term (Op("<==>", [_1; _3])) (rhs2 parseState 1 3) Formula
      )
# 3583 "parse.ml"
               : 'tmIff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmImplies) in
    Obj.repr(
# 639 "parse.mly"
      ( _1 )
# 3590 "parse.ml"
               : 'tmIff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tmDisjunction) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmImplies) in
    Obj.repr(
# 643 "parse.mly"
      (
        mk_term (Op("==>", [_1; _3])) (rhs2 parseState 1 3) Formula
      )
# 3600 "parse.ml"
               : 'tmImplies))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmDisjunction) in
    Obj.repr(
# 648 "parse.mly"
      ( _1 )
# 3607 "parse.ml"
               : 'tmImplies))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tmDisjunction) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmConjunction) in
    Obj.repr(
# 652 "parse.mly"
      ( mk_term (Op("\\/", [_1;_3])) (rhs2 parseState 1 3) Formula )
# 3615 "parse.ml"
               : 'tmDisjunction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmConjunction) in
    Obj.repr(
# 655 "parse.mly"
      ( _1 )
# 3622 "parse.ml"
               : 'tmDisjunction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tmConjunction) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmTuple) in
    Obj.repr(
# 659 "parse.mly"
      ( mk_term (Op("/\\", [_1;_3])) (rhs2 parseState 1 3) Formula )
# 3630 "parse.ml"
               : 'tmConjunction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmTuple) in
    Obj.repr(
# 662 "parse.mly"
      ( _1 )
# 3637 "parse.ml"
               : 'tmConjunction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tupleN) in
    Obj.repr(
# 666 "parse.mly"
      (
        match _1 with 
          | [x] -> x
          | components -> mkTuple components (rhs2 parseState 1 1)
      )
# 3648 "parse.ml"
               : 'tmTuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tmEq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmOr) in
    Obj.repr(
# 674 "parse.mly"
      (
        mk_term (Op(":=", [_1; _3])) (rhs2 parseState 1 3) Un
      )
# 3658 "parse.ml"
               : 'tmEq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmOr) in
    Obj.repr(
# 679 "parse.mly"
      ( _1 )
# 3665 "parse.ml"
               : 'tmEq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tmOr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmAnd) in
    Obj.repr(
# 683 "parse.mly"
      ( mk_term (Op("||", [_1; _3])) (rhs2 parseState 1 3) Un)
# 3673 "parse.ml"
               : 'tmOr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmAnd) in
    Obj.repr(
# 686 "parse.mly"
      ( _1 )
# 3680 "parse.ml"
               : 'tmOr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tmAnd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmpTerm) in
    Obj.repr(
# 690 "parse.mly"
      ( mk_term (Op("&&", [_1;_3])) (rhs2 parseState 1 3) Un)
# 3688 "parse.ml"
               : 'tmAnd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmpTerm) in
    Obj.repr(
# 693 "parse.mly"
      ( _1 )
# 3695 "parse.ml"
               : 'tmAnd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmpTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comparisonOp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmCons) in
    Obj.repr(
# 697 "parse.mly"
      ( mk_term (Op(_2, [_1;_3])) (rhs2 parseState 1 3) Expr )
# 3704 "parse.ml"
               : 'cmpTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmCons) in
    Obj.repr(
# 699 "parse.mly"
      ( _1 )
# 3711 "parse.ml"
               : 'cmpTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 702 "parse.mly"
              ( _1 )
# 3718 "parse.ml"
               : 'comparisonOp))
; (fun __caml_parser_env ->
    Obj.repr(
# 703 "parse.mly"
              ( "=" )
# 3724 "parse.ml"
               : 'comparisonOp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'product) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tmCons) in
    Obj.repr(
# 707 "parse.mly"
      ( consTerm (rhs parseState 2) _1 _3 )
# 3732 "parse.ml"
               : 'tmCons))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'product) in
    Obj.repr(
# 710 "parse.mly"
      ( _1 )
# 3739 "parse.ml"
               : 'tmCons))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'productDomain) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'product) in
    Obj.repr(
# 714 "parse.mly"
  (
		let aq, tm = _1 in 
		let b = match extract_named_refinement tm with 
			| None -> mk_binder (NoName tm) (rhs parseState 1) Un aq
			| Some (x, t, f) -> mkRefinedBinder x t f (rhs2 parseState 1 1) aq in
        mk_term (Product([b], _3)) (rhs2 parseState 1 3)  Un
	 
	 )
# 3754 "parse.ml"
               : 'product))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dtupleTerm) in
    Obj.repr(
# 724 "parse.mly"
   ( _1 )
# 3761 "parse.ml"
               : 'product))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aqual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dtupleTerm) in
    Obj.repr(
# 727 "parse.mly"
                     ( (Some _1, _2) )
# 3769 "parse.ml"
               : 'productDomain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dtupleTerm) in
    Obj.repr(
# 728 "parse.mly"
                    ( (None, _1)    )
# 3776 "parse.ml"
               : 'productDomain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dtupleTerm) in
    Obj.repr(
# 732 "parse.mly"
      ( 
		let x, t, f = match extract_named_refinement _1 with 
			| Some (x, t, f) -> x, t, f
			| _ -> raise (Error("Missing binder for the first component of a dependent tuple", rhs2 parseState 1 2)) in
	    let dom = mkRefinedBinder x t f (rhs2 parseState 1 2) None in
		let tail = _3 in
		let dom, res = match tail.tm with 
			| Sum(dom', res) -> dom::dom', res
			| _ -> [dom], tail in 
	    mk_term (Sum(dom, res)) (rhs2 parseState 1 6) Type
	  )
# 3794 "parse.ml"
               : 'dtupleTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arithTerm) in
    Obj.repr(
# 745 "parse.mly"
  ( _1 )
# 3801 "parse.ml"
               : 'dtupleTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plusOp) in
    Obj.repr(
# 749 "parse.mly"
   ( _1 )
# 3808 "parse.ml"
               : 'arithTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'minusOp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'plusOp) in
    Obj.repr(
# 753 "parse.mly"
      ( mk_term (Op("+", [_1;_3])) (rhs2 parseState 1 3) Un)
# 3816 "parse.ml"
               : 'plusOp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'minusOp) in
    Obj.repr(
# 756 "parse.mly"
   ( _1 )
# 3823 "parse.ml"
               : 'plusOp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'minusOp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'starDivModTerm) in
    Obj.repr(
# 760 "parse.mly"
      ( mk_term (Op("-", [_1;_3])) (rhs2 parseState 1 3) Un)
# 3831 "parse.ml"
               : 'minusOp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'starDivModTerm) in
    Obj.repr(
# 763 "parse.mly"
      ( _1 )
# 3838 "parse.ml"
               : 'minusOp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'refinementTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'starDivModTerm) in
    Obj.repr(
# 768 "parse.mly"
      ( 
        mk_term (Op("*", [_1;_3])) (rhs2 parseState 1 3) Un
      )
# 3848 "parse.ml"
               : 'starDivModTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'unaryTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'starDivModTerm) in
    Obj.repr(
# 773 "parse.mly"
      ( mk_term (Op(_2, [_1;_3])) (rhs2 parseState 1 3) Un)
# 3857 "parse.ml"
               : 'starDivModTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'refinementTerm) in
    Obj.repr(
# 776 "parse.mly"
      ( 
        _1 
      )
# 3866 "parse.ml"
               : 'starDivModTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 782 "parse.mly"
      (
        mk_term (NamedTyp(_1, _3)) (rhs2 parseState 1 3) Type 
      )
# 3876 "parse.ml"
               : 'refinementTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'appTerm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'formula) in
    Obj.repr(
# 787 "parse.mly"
      (
        mk_term (Refine(mk_binder (Annotated(_1, _3)) (rhs2 parseState 1 3) Type None, _5)) 
        (rhs2 parseState 1 6) Type
      )
# 3888 "parse.ml"
               : 'refinementTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordExp) in
    Obj.repr(
# 792 "parse.mly"
                            ( _2 )
# 3895 "parse.ml"
               : 'refinementTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unaryTerm) in
    Obj.repr(
# 794 "parse.mly"
              ( _1 )
# 3902 "parse.ml"
               : 'refinementTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 797 "parse.mly"
              ( Implicit )
# 3908 "parse.ml"
               : 'aqual))
; (fun __caml_parser_env ->
    Obj.repr(
# 798 "parse.mly"
              ( Equality )
# 3914 "parse.ml"
               : 'aqual))
; (fun __caml_parser_env ->
    Obj.repr(
# 801 "parse.mly"
                          ( None )
# 3920 "parse.ml"
               : 'refineOpt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'formula) in
    Obj.repr(
# 802 "parse.mly"
                          ( Some _2 )
# 3927 "parse.ml"
               : 'refineOpt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 808 "parse.mly"
      ( mk_term (Op("+", [_2])) (rhs2 parseState 1 3) Expr )
# 3934 "parse.ml"
               : 'unaryTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 811 "parse.mly"
      ( mk_term (Op("-", [_2])) (rhs2 parseState 1 3) Expr )
# 3941 "parse.ml"
               : 'unaryTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 814 "parse.mly"
      ( mk_term (Op(_1, [_2])) (rhs2 parseState 1 3) Formula )
# 3949 "parse.ml"
               : 'unaryTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 816 "parse.mly"
            ( _1 )
# 3956 "parse.ml"
               : 'unaryTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'hashAtomicTerms) in
    Obj.repr(
# 820 "parse.mly"
      (
        mkApp _1 _2 (rhs2 parseState 1 2)
      )
# 3966 "parse.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noSeqTerm) in
    Obj.repr(
# 826 "parse.mly"
      ( {_1 with level=Formula} )
# 3973 "parse.ml"
               : 'formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 829 "parse.mly"
               ( mk_term Wild (rhs parseState 1) Un )
# 3979 "parse.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 830 "parse.mly"
             ( mk_term (Var assert_lid) (rhs parseState 1) Expr )
# 3985 "parse.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tvar) in
    Obj.repr(
# 831 "parse.mly"
             ( mk_term (Tvar(_1)) (rhs parseState 1) Type )
# 3992 "parse.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 832 "parse.mly"
             ( mk_term (Const _1) (rhs parseState 1) Expr )
# 3999 "parse.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tupleN) in
    Obj.repr(
# 834 "parse.mly"
      ( 
        match _2 with 
          | [x] -> x
          | components -> mkDTuple components (rhs2 parseState 1 1)
      )
# 4010 "parse.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'projectionLHS) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'maybeFieldProjections) in
    Obj.repr(
# 840 "parse.mly"
      (  
        List.fold_left (fun e f -> 
                          mk_term (Project(e, lid_of_ids [f])) (rhs2 parseState 1 3) Expr )
          _1 _2
      )
# 4022 "parse.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 846 "parse.mly"
      ( mk_term (Op("!", [_2])) (rhs2 parseState 1 2) Expr )
# 4029 "parse.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 848 "parse.mly"
      ( _2 )
# 4036 "parse.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 851 "parse.mly"
     ( [] )
# 4042 "parse.ml"
               : 'recdFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'recdFieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'moreRecdFieldTypes) in
    Obj.repr(
# 852 "parse.mly"
                                     ( _1::_2 )
# 4050 "parse.ml"
               : 'recdFieldTypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 855 "parse.mly"
     ( [] )
# 4056 "parse.ml"
               : 'moreRecdFieldTypes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recdFieldType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'moreRecdFieldTypes) in
    Obj.repr(
# 856 "parse.mly"
                                               ( _2::_3 )
# 4064 "parse.ml"
               : 'moreRecdFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 859 "parse.mly"
                    ( (_1, _3) )
# 4072 "parse.ml"
               : 'recdFieldType))
; (fun __caml_parser_env ->
    Obj.repr(
# 862 "parse.mly"
       ( [] )
# 4078 "parse.ml"
               : 'maybeFieldProjections))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'maybeFieldProjections) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 864 "parse.mly"
      ( _1@[_3] )
# 4086 "parse.ml"
               : 'maybeFieldProjections))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 867 "parse.mly"
               ( [_1] )
# 4093 "parse.ml"
               : 'targs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'targs) in
    Obj.repr(
# 868 "parse.mly"
                           ( _1::_3 )
# 4101 "parse.ml"
               : 'targs))
; (fun __caml_parser_env ->
    Obj.repr(
# 871 "parse.mly"
       ( (fun x -> x) )
# 4107 "parse.ml"
               : 'maybeInsts))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'targs) in
    Obj.repr(
# 873 "parse.mly"
      (
        (fun (x:term) -> mkFsTypApp x _2
          (union_ranges x.range (rhs2 parseState 1 3)))
      )
# 4117 "parse.ml"
               : 'maybeInsts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'eitherQname) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'maybeInsts) in
    Obj.repr(
# 880 "parse.mly"
      ( 
        let t = if is_name _1 then Name _1 else Var _1 in
        _2 (mk_term t (rhs parseState 1) Un) 
      )
# 4128 "parse.ml"
               : 'projectionLHS))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'maybeWithSort) in
    Obj.repr(
# 885 "parse.mly"
      ( mk_term (Paren(_3 _2 (rhs2 parseState 2 3))) (rhs2 parseState 1 4) (_2.level) )
# 4136 "parse.ml"
               : 'projectionLHS))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'semiColonTermList) in
    Obj.repr(
# 887 "parse.mly"
      (
        let l = mkConsList (rhs2 parseState 1 3) _2 in 
        mkExplicitApp (mk_term (Var (array_mk_array_lid)) (rhs2 parseState 1 3) Expr) 
              [l] (rhs2 parseState 1 3)
      )
# 4147 "parse.ml"
               : 'projectionLHS))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'semiColonTermList) in
    Obj.repr(
# 893 "parse.mly"
      ( 
        mkConsList (rhs2 parseState 1 3) _2
      )
# 4156 "parse.ml"
               : 'projectionLHS))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'semiColonTermList) in
    Obj.repr(
# 897 "parse.mly"
   (
		mkLexList (rhs2 parseState 1 3) _2
	  )
# 4165 "parse.ml"
               : 'projectionLHS))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'commaTermList) in
    Obj.repr(
# 902 "parse.mly"
   (
		mkRefSet (rhs2 parseState 1 3) _2
	  )
# 4174 "parse.ml"
               : 'projectionLHS))
; (fun __caml_parser_env ->
    Obj.repr(
# 907 "parse.mly"
     ( [] )
# 4180 "parse.ml"
               : 'commaTermList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'moreCommaTerms) in
    Obj.repr(
# 909 "parse.mly"
      ( _1::_2 )
# 4188 "parse.ml"
               : 'commaTermList))
; (fun __caml_parser_env ->
    Obj.repr(
# 912 "parse.mly"
      ( [] )
# 4194 "parse.ml"
               : 'moreCommaTerms))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'moreCommaTerms) in
    Obj.repr(
# 914 "parse.mly"
      ( _2::_3 )
# 4202 "parse.ml"
               : 'moreCommaTerms))
; (fun __caml_parser_env ->
    Obj.repr(
# 918 "parse.mly"
     ( [] )
# 4208 "parse.ml"
               : 'semiColonTermList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'noSeqTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'moreSemiColonTerms) in
    Obj.repr(
# 920 "parse.mly"
      ( _1::_2 )
# 4216 "parse.ml"
               : 'semiColonTermList))
; (fun __caml_parser_env ->
    Obj.repr(
# 923 "parse.mly"
      ( [] )
# 4222 "parse.ml"
               : 'moreSemiColonTerms))
; (fun __caml_parser_env ->
    Obj.repr(
# 924 "parse.mly"
              ( [] )
# 4228 "parse.ml"
               : 'moreSemiColonTerms))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'noSeqTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'moreSemiColonTerms) in
    Obj.repr(
# 926 "parse.mly"
      ( _2::_3 )
# 4236 "parse.ml"
               : 'moreSemiColonTerms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'recordExpRest) in
    Obj.repr(
# 930 "parse.mly"
      ( _2 _1 (lhs parseState) )
# 4244 "parse.ml"
               : 'recordExp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordFieldAssignment) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'recordFieldAssignments) in
    Obj.repr(
# 934 "parse.mly"
      (
        (fun e r -> mk_term (Record(Some e, _2::_3)) (union_ranges r (rhs2 parseState 1 3)) Expr)
      )
# 4254 "parse.ml"
               : 'recordExpRest))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simpleTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'recordFieldAssignments) in
    Obj.repr(
# 939 "parse.mly"
      (
        (fun e r -> match e.tm with 
          | Var l -> mk_term (Record(None, (l,_2)::_3)) (union_ranges r (rhs2 parseState 1 3)) Expr
          | _ -> errorR(Error("Record field names must be constant identifiers", lhs(parseState)));
            mk_term (Record(None, _3)) (rhs2 parseState 1 3) Expr)
      )
# 4267 "parse.ml"
               : 'recordExpRest))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simpleTerm) in
    Obj.repr(
# 948 "parse.mly"
      ( (_1,_3) )
# 4275 "parse.ml"
               : 'recordFieldAssignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 951 "parse.mly"
              ( [] )
# 4281 "parse.ml"
               : 'recordFieldAssignments))
; (fun __caml_parser_env ->
    Obj.repr(
# 952 "parse.mly"
              ( [] )
# 4287 "parse.ml"
               : 'recordFieldAssignments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordFieldAssignment) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'recordFieldAssignments) in
    Obj.repr(
# 954 "parse.mly"
     ( _2::_3 )
# 4295 "parse.ml"
               : 'recordFieldAssignments))
; (fun __caml_parser_env ->
    Obj.repr(
# 957 "parse.mly"
        ( fun x r -> x )
# 4301 "parse.ml"
               : 'maybeWithSort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'hasSort) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simpleTerm) in
    Obj.repr(
# 959 "parse.mly"
        ( fun x r -> mk_term (Ascribed(x,{_2 with level=_1})) (union_ranges r (rhs2 parseState 1 2)) _1 )
# 4309 "parse.ml"
               : 'maybeWithSort))
; (fun __caml_parser_env ->
    Obj.repr(
# 961 "parse.mly"
            ( Expr )
# 4315 "parse.ml"
               : 'hasSort))
; (fun __caml_parser_env ->
    Obj.repr(
# 962 "parse.mly"
            ( Type )
# 4321 "parse.ml"
               : 'hasSort))
; (fun __caml_parser_env ->
    Obj.repr(
# 965 "parse.mly"
         ( Nothing )
# 4327 "parse.ml"
               : 'maybeHash))
; (fun __caml_parser_env ->
    Obj.repr(
# 966 "parse.mly"
         ( Hash )
# 4333 "parse.ml"
               : 'maybeHash))
; (fun __caml_parser_env ->
    Obj.repr(
# 969 "parse.mly"
           ( [] )
# 4339 "parse.ml"
               : 'hashAtomicTerms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'maybeHash) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hashAtomicTerms) in
    Obj.repr(
# 970 "parse.mly"
                                         ( (_2, _1)::_3 )
# 4348 "parse.ml"
               : 'hashAtomicTerms))
; (fun __caml_parser_env ->
    Obj.repr(
# 973 "parse.mly"
           ( [] )
# 4354 "parse.ml"
               : 'atomicTerms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerms) in
    Obj.repr(
# 974 "parse.mly"
                           ( _1::_2 )
# 4362 "parse.ml"
               : 'atomicTerms))
; (fun __caml_parser_env ->
    Obj.repr(
# 977 "parse.mly"
          ( None )
# 4368 "parse.ml"
               : 'consTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tmTuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'consTerm) in
    Obj.repr(
# 979 "parse.mly"
      ( 
        match _3 with 
          | None -> Some _2
          | Some tl -> Some (consTerm (rhs2 parseState 2 3) _2 tl)
      )
# 4380 "parse.ml"
               : 'consTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tmEq) in
    Obj.repr(
# 986 "parse.mly"
                               ( [_1] )
# 4387 "parse.ml"
               : 'tupleN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tmEq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleN) in
    Obj.repr(
# 987 "parse.mly"
                            ( _1::_3 )
# 4395 "parse.ml"
               : 'tupleN))
; (fun __caml_parser_env ->
    Obj.repr(
# 990 "parse.mly"
                  ( Const_unit )
# 4401 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int32 * bool) in
    Obj.repr(
# 992 "parse.mly"
  (
	    if snd _1 then 
          errorR(Error("This number is outside the allowable range for representable integer constants", lhs(parseState)));
        Const_int (fst _1) 
	 )
# 4412 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int32 * bool) in
    Obj.repr(
# 998 "parse.mly"
      ( 
        if snd _1 then 
          errorR(Error("This number is outside the allowable range for 32-bit signed integers", lhs(parseState)));
        Const_int32 (fst _1) 
      )
# 4423 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : byte) in
    Obj.repr(
# 1003 "parse.mly"
          ( Const_uint8 _1 )
# 4430 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 1005 "parse.mly"
         ( Const_char _1 )
# 4437 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bytes) in
    Obj.repr(
# 1006 "parse.mly"
           ( Const_string (_1,lhs(parseState)) )
# 4444 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bytes) in
    Obj.repr(
# 1007 "parse.mly"
              ( Const_bytearray (_1,lhs(parseState)) )
# 4451 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 1008 "parse.mly"
         ( Const_bool true )
# 4457 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 1009 "parse.mly"
          ( Const_bool false )
# 4463 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : double) in
    Obj.repr(
# 1010 "parse.mly"
           ( Const_float _1 )
# 4470 "parse.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 * bool) in
    Obj.repr(
# 1012 "parse.mly"
      ( 
        if snd _1 then 
          errorR(Error("This number is outside the allowable range for 64-bit signed integers", lhs(parseState)));
        Const_int64 (fst _1) 
      )
# 4481 "parse.ml"
               : 'constant))
(* Entry inputFragment *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let inputFragment (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : inputFragment)
