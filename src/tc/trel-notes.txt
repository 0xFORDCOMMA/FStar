type prob = 
  | KProb: int -> rel -> knd -> knd -> prob
  | TProb: int -> rel -> typ -> typ -> prob
  | EProb: int -> rel -> exp -> exp -> prob
  | CProb: int -> rel -> comp -> comp -> prob

type uvar_inst = 
  | UK : uvar_k -> knd -> uvar_inst
  | UT : uvar_t -> typ -> uvar_inst
  | UE : uvar_e -> exp -> uvar_inst
  | UC : uvar_c -> comp -> uvar_inst

type worklist = {
     attempting: list prob;
     deferred: list prob;
     subst: list uvar_insts;
}

trel:   env:Tc.env
     -> top:bool 
     -> p:prob{is_TProb p}
     -> rest:worklist{top ==> probs=[]}
     -> option (g:guard{g=Trivial || (g=Guard f /\ if top then is_Kind_dcon f.tk else is_Kind_type f.tk)})
let rec trel env top (TProb _ rel t1 t2) rest = 
    let t1, t2 = Util.compress_typ t1, Util.compress_typ t2 in 
    match t1.tn, t2.tn with 
      | Typ_meta(Meta_uvar_t_app(_, (uv1, _)), Typ_meta(Meta_uvar_t_app(_, (uv2, _))) 
      | Typ_meta(Meta_uvar_t_pattern(_, (uv1, _)), Typ_meta(Meta_uvar_t_pattern(_, (uv2, _))) -> 

        if Unionfind.equivalent uv1 uv2
        then solve env top rest
        else (* flex/flex case; differ *)
             solve env top {rest with deferred=(TProb (List.length subst) rel t1 t2)::rest.deferred}

      | Typ_fun(xopt, t1, c1), Typ_fun(yopt, t2, c2) -> 
        let ctr = length rest.subst in 
        let cprob = match xopt, yopt with 
            | None, None 
            | None, Some _
            | Some _, None -> CProb ctr rel c1 c2
            | Some x, Some y -> 
              if Util.bvd_eq x y 
              then CProb ctr rel c1 c2
              else CProb ctr rel c1 (Util.subst_comp [Inl(y, Util.bvd_to_exp x t1_)] c2) in
        solve env false (TProb ctr rel t2 t1)::cprob::rest)

      | Typ_lam(x, t1, t2), Typ_lam(y, t1', t2') -> 
        let t2prob = if Util.bvd_eq x y 
                     then TProb rel t2 t2' 
                     else TProb rel t2 (Util.subst_typ [Inl(y, Util.bvd_to_typ x t1)] t2') in
        solve env false (TProb rel t1' t1::t2prob::rest)

      | Typ_refine(x, t1, phi1), Typ_refine(y, t2, phi2) -> 
        let phiprob, guard = 
           match rel with
             | EQ -> [TProb rel phi1 (Util.subst_typ [Inl(y,Util.bvd_to_typ x)] phi2)], None in 
             | SUB -> [], mk_guard top (x,t1) (phi1 ==> phi2[x/y]) in 
        
        if top
        then conj_guard (trel env top (TProb rel t1 t2) (guard@rest)) guard 
        else conj_guard (solve env top (TProb rel t1 t2::guard@rest)) guard


      | Typ_meta(Meta_uvar_t_pattern(t, (uv,k))), t' -> 
        let fvs1 = Util.freevars_typ t in
        let fvs2 = Util.freevars_typ t' in
        let uvs = Util.uvars_in_typ t' in 
        if Util.set_is_subset fvs2.ftvs fvs1.ftvs
        && Util.set_is_subset fvs2.fxvs fvs1.fxvs
        && not (Util.set_mem (uv,k) uvs.uvs_t)
        then //fast solution for flex-pattern/rigid case
             let _, args = flatten_typ_app t in
             let sol = mk_tlam args t' in
             solve env false {rest with subst=UT uv sol::rest.subst}
        else //no fast solution here ... can only imitate and continue
             let head, args_rhs = flatten_typ_apps t' in 
             let _, args = flatten_typ_app t in    
             let env' = env_of_boundvars args in
             let arg_terms, sub_probs = args_rhs |> List.map (function 
               | Inl t -> let t' = new_tvar env' t.tk in (t', TProb EQ t t')
               | Inr v -> let v' = new_evar env' v.tk in (v', VProb Eq v v')) |> List.unzip
             let im = mk_tlam args (mk_typ_app head arg_terms) in 
             solve env false {rest with subst=UT uv im::rest.subst; attempting=sub_probs@rest.attempting}

      | Typ_meta(Meta_uvar_t_pattern(t, (uv,k))), t' -> ()

and solve env top worklist = 
    match worklist.attempting with 
       | (TProb _ as hd)::tl -> trel env top hd {worklist with attempting=tl}
       | _ -> ... 
       | [] -> 
       let ctr = List.length worklist.subst in 
       let attempt, rest = worklist.deferred |> List.partition (fun t -> counter t < ctr) in
       if attempt <> []
       then solve env top {worklist with attempting=attempt; deferred=rest} 
       else None //no solution

          
       
       
         

    
                                                                        
                                                                        
        
        
        

 


                      


    
--------------------------------------------------------------------------------
Old impl
--------------------------------------------------------------------------------
let rec krel rel env k k' : option<guard(* Type *)> =
  let k, k' = compress_kind k, compress_kind k' in
  if Util.physical_equality k k' then Some Trivial else
  //printfn "krel: %s and %s" (Print.kind_to_string k) (Print.kind_to_string k');
  match k.n, k'.n with 
    | Kind_type, Kind_type
    | Kind_effect, Kind_effect -> ret <| Some Trivial
    
    | Kind_tcon(aopt, k1, k2, _), Kind_tcon(bopt, k1', k2', _) -> 
      andf (krel rel env k1' k1)
          (fun () -> match aopt, bopt with 
            | None, _
            | _, None -> krel rel env k2 k2'
            | Some a, Some b -> 
              //printfn "Sub'ing %s for %s\n" b.realname.idText a.realname.idText;
              let k2' = Util.subst_kind (mk_subst [Inl(b, Util.bvd_to_typ a k1')]) k2' in
              krel rel env k2 k2')

    | Kind_dcon(xopt, t1, k1, _), Kind_dcon(yopt, t1', k1', _) -> 
      bindf (trel false rel env t1' t1) (fun f -> 
        let g = match xopt, yopt with 
          | None, _
          | _, None -> krel rel env k1 k1'
          | Some x, Some y -> 
            let k1' = Util.subst_kind (mk_subst [Inr(y, Util.bvd_to_exp x t1')]) k1' in
            krel rel env k1 k1' in
          bindf g (fun g ->
          ret <| (Some <| conj_guard (close_guard_lam None t1' f) g)))
    
    | Kind_uvar uv, _ -> 
      if unify_kind (uv, ()) k'
      then Some Trivial 
      else if !Options.debug <> [] 
      then (Util.print_string (Util.format2 "Incompatible kinds: %s and %s\n" (Print.kind_to_string k) (Print.kind_to_string k')); None)
      else None
    
    | _, Kind_uvar uv -> 
      if unify_kind (uv, ()) k
      then Some Trivial 
      else if !Options.debug <> [] 
      then (Util.print_string (Util.format2 "Incompatible kinds: %s and %s\n" (Print.kind_to_string k) (Print.kind_to_string k')); None)
      else None
    
    | Kind_abbrev(_, k), _ -> krel rel env k k'
    | _, Kind_abbrev(_, k') -> krel rel env k k'
    
    | _ -> 
      if !Options.debug <> []
      then (Util.print_string <| Util.format2 "incompatible kinds: %s and %s\n" (Print.kind_to_string k) (Print.kind_to_string k'); None)
      else None

and trel top rel env t t' : option<guard (* has kind t => Type when top and t:Type, otherwise Type *)> = 
  let rec reduce t =
    let t = compress_typ t in 
    match t.n with 
    | Typ_app(t1, t2, _) -> 
      (match (compress_typ t1).n with 
        | Typ_tlam(a, k, t) -> reduce (subst_typ' [Inl(a, t2)] t)
        | _ -> t)
    | Typ_dep(t1, v, _) -> 
      (match (compress_typ t1).n with 
        | Typ_lam(x, _, t) -> reduce (subst_typ' [Inr(x, v)] t)
        | _ -> t)
    | _ -> t in
  let mk_guard_lam top t f = 
    if not top then f 
    else match t.tk.n with 
           | Kind_type -> mk_guard_lam t f
           | _ -> f in
  let rec aux top norm t t' = 
    let t = Util.compress_typ t in
    let t' = Util.compress_typ t' in
    if Microsoft.FStar.Util.physical_equality t t' 
    then (Some Trivial)
    else (//if Tc.Env.debug env then Util.print_string <| format2 "trel: %s \t\t %s\n" (Print.typ_to_string t) (Print.typ_to_string t');
          let r = aux' top norm t t' in r
//          match !Options.debug, r with
//              | _::_, None -> Util.print_string <| Util.format2 "Incompatible types %s and %s\n" (Print.typ_to_string t) (Print.typ_to_string t'); None
//              | _ -> r 
         )
  and aux' top norm t t' =
    let t, t' = reduce t, reduce t' in
      match t.n, t'.n with 
       | Typ_btvar a1, Typ_btvar a1' -> 
         if Util.bvd_eq a1.v a1'.v 
         then Some <| Trivial
         else None

       | Typ_const c1, Typ_const c1' -> 
         if Util.fvar_eq c1 c1' then Some Trivial
         else if not norm
         then aux top true (normalize env t) (normalize env t') 
         else None

       | Typ_fun(Some x, t1, c, _), Typ_fun(Some x', t1', c', _)  -> 
         let sc' = if Util.bvd_eq x x' then c' else Util.subst_comp' [Inr(x', Util.bvd_to_exp x t1')] c' in
         bindf (aux false norm t1' t1) (fun f -> 
         bindf (crel rel env c sc') (fun g -> 
         let g = conj_guard f <| close_guard (Inl(x, t1')) g in
         ret <| Some (mk_guard_lam top t g)))

       | Typ_fun(xopt, t1, c, _), Typ_fun(yopt, t1', c', _)  -> 
         bindf (aux false norm t1' t1) (fun f -> 
         bindf (crel rel env c c') (fun g -> 
          let g = match xopt, yopt with 
            | Some x, None 
            | None, Some x -> close_guard (Inl(x, t1')) g 
            | _ -> g in
          let g = conj_guard f g in
          ret <| Some (mk_guard_lam top t g)))

       | Typ_univ(a1, k1, c), Typ_univ(a1', k1', c') -> 
         let sc' = if Util.bvd_eq a1 a1' then c' else Util.subst_comp' [Inl(a1', Util.bvd_to_typ a1 k1')] c' in
         bindf (krel rel env k1' k1) (fun f -> 
         bindf (crel rel env c sc') (fun g -> 
         let g = close_guard (Inr(a1, k1')) g in
         ret <| Some (mk_guard_lam top t <| conj_guard f g)))
      
       | Typ_lam(x, t1, t2), Typ_lam(x', t1', t2') ->
         bindf (aux false norm t1' t1) (fun f -> 
         bindf (aux false norm t2 (Util.subst_typ' [Inr(x', Util.bvd_to_exp x t1')] t2')) (fun g -> 
         let g = close_guard (Inl(x, t1')) g in
         ret <| Some (mk_guard_lam top t <| conj_guard f g)))
     
       | Typ_tlam(a1, k1, t1), Typ_tlam(a1', k1', t1') ->
         bindf (krel rel env k1' k1) (fun f -> 
         bindf (aux false norm t1 (Util.subst_typ' [Inl(a1', Util.bvd_to_typ a1 k1')] t1')) (fun g -> 
         let g = close_guard (Inr(a1, k1')) g in
         ret <| Some (mk_guard_lam top t <| conj_guard f g))) 
     
       | Typ_uvar(uv, _), Typ_uvar(uv', _) when Unionfind.equivalent uv uv' -> 
         Some Trivial
           
       | Typ_uvar(uv, k), _ -> 
         if unify_typ env (uv, k) t' 
         then Some Trivial
         else None

       | _, Typ_uvar(uv, k) -> 
         if unify_typ env (uv, k) t 
         then Some Trivial
         else None
     
       | Typ_app _, _
       | Typ_dep _, _
       | _, Typ_app _
       | _, Typ_dep _  -> 
         let head, args = Util.flatten_typ_apps t in
         let head', args' = Util.flatten_typ_apps t' in
         let matches = 
          if List.length args = List.length args' 
          then bindf (andf (aux false norm tc tc') (fun () -> 
                      forallf (List.zip args args') (function 
                         | Inl t1, Inl t1' -> aux false true t1 t1'
                         | Inr e1, Inr e1' -> exp_equiv env e1 e1'
                         | _ -> None))) (fun f ->
               Some (mk_guard_lam top t f)) 
          else None in
         orf matches (fun () -> 
          if not norm 
          then aux top true (Normalize.norm_typ [Normalize.DeltaHard;Normalize.Beta] env t)
                            (Normalize.norm_typ [Normalize.DeltaHard;Normalize.Beta] env t')
          else None)

       | Typ_refine(x, t1, phi1), Typ_refine(x', t1', phi2) -> 
         let xexp = Util.bvd_to_exp x t1 in
         let finish f g = 
            if top 
            then let f = map_guard f (fun f -> syn f.pos mk_Kind_type <| mk_Typ_dep(f, xexp, false)) in
                 let gf = conj_guard g f in
                 ret (Some <| map_guard gf (fun gf -> syn t.pos (mk_Kind_dcon(None, t, mk_Kind_type, false) t.pos) <| mk_Typ_lam(x, t, gf)))
            else let g = close_guard (Inl(x, t1)) g in 
                 ret <| (Some <| conj_guard f g) in
         bindf (aux top norm t1 t1') (fun f -> 
         match rel with
          | EQ -> 
            bindf (aux false norm phi1 (Util.subst_typ' [Inr(x', xexp)] phi2)) (finish f)

          | SUB -> 
            let g = mkGuard env <| Util.mk_imp phi1 (Util.subst_typ' [Inr(x', xexp)] phi2) in
            finish f g)

       | Typ_refine(x, t1, phi), _  when (rel=SUB) -> 
         bindf (aux top norm t1 t') (fun f ->
         if top 
         then let xexp = Util.bvd_to_exp x t1 in
              let f = map_guard f (fun f ->
                syn t.pos (mk_Kind_dcon(None, t, mk_Kind_type, false) t.pos) <| 
                    mk_Typ_lam(x, t, Util.mk_imp phi (syn f.pos mk_Kind_type <| mk_Typ_dep(f, xexp, false)))) in
              ret <| Some f
         else ret <| Some (map_guard f (fun f -> close (Inl(x, t1)) (Util.mk_imp phi f))))
                   
       | _, Typ_refine(x, t', phi) when (rel=SUB) -> 
         bindf (aux top norm t t') (fun f -> 
         if top 
         then let xexp = Util.bvd_to_exp x t in
              let f = map_guard f (fun f -> syn f.pos mk_Kind_type <| mk_Typ_dep(f, xexp, false)) in
              let phi_f = conj_guard (mkGuard env phi) f in
              ret <| (Some <| map_guard phi_f (fun phi_f -> 
                syn phi_f.pos (mk_Kind_dcon(None, t, mk_Kind_type, false) t.pos) <| mk_Typ_lam(x, t, phi_f)))
         else let f = conj_guard (mkGuard env phi) f in
              ret <| (Some <| map_guard f (close (Inl(x, t)))))

       | Typ_unknown, _ 
       | _, Typ_unknown -> failwith "Impossible"

       | _ -> None in

  aux top false t t'

and exp_equiv env e e' : option<guard (* has kind Type *)> = 
  if Util.physical_equality e e' then Some Trivial
  else let r = exp_equiv' env e e' in 
       match !Options.debug, r with 
        | _::_, None -> Util.print_string <| Util.format2 "Incompaible expressions: %s and %s\n" (Print.exp_to_string e) (Print.exp_to_string e'); None
        | _ -> r

and exp_equiv' env e e' : option<guard (* has kind Type *)> = 
  let e, e' = compress_exp e, compress_exp e' in 
  match e.n, e'.n with 
    | Exp_uvar(uv, t), _ -> 
      if unify_exp (uv, t) e'
      then Some Trivial
      else None

    | _, Exp_uvar(uv, t) -> 
      if unify_exp (uv, t) e
      then Some Trivial
      else None

    | Exp_bvar x1, Exp_bvar x1' -> 
      if Util.bvd_eq x1.v x1'.v
      then Some Trivial
      else ret <| Some (NonTrivial <| Util.mk_eq e e')

    | Exp_fvar (fv1, _), Exp_fvar (fv1', _) -> 
      if lid_equals fv1.v fv1'.v
      then Some Trivial
      else ret <| Some (NonTrivial <| Util.mk_eq e e')

    | Exp_constant s1, Exp_constant s1' -> 
      if const_eq s1 s1'
      then Some Trivial
      else None

    | Exp_ascribed(e1, _), Exp_ascribed(e1', _) -> 
      exp_equiv env e1 e1'

    | _ ->
      ret <| Some (NonTrivial <| Util.mk_eq e e')

and const_eq s1 s2 = match s1, s2 with 
  | Const_bytearray(b1, _), Const_bytearray(b2, _) -> b1=b2
  | Const_string(b1, _), Const_string(b2, _) -> b1=b2
  | _ -> s1=s2 

and crel rel env c1 c2 : option<guard> = 
  let rec aux norm (c1:comp) (c2:comp) = 
    if Util.physical_equality c1 c2 then Some Trivial
    else let c1 = compress_comp c1 in
         let c2 = compress_comp c2 in
         //check_sharing (Util.comp_result c1) (Util.comp_result c2) "crel0";
         match rel with 
           | EQ -> 
             begin match c1.n, c2.n with
               | Total t1, Total t2 -> trel false rel env t1 t2
               | Total _,  _ -> crel rel env (mk_Comp <| force_comp c1) c2
               | _, Total _ -> crel rel env c1 (mk_Comp <| force_comp c2)
               | Comp ct1, Comp ct2 ->
                 if lid_equals ct1.effect_name ct2.effect_name
                 then either_rel rel env (Inl ct1.result_typ::ct1.effect_args) (Inl ct2.result_typ::ct2.effect_args) 
                 else if not norm 
                 then aux true (mk_Comp <| Normalize.norm_comp [Normalize.DeltaComp] env c1)
                               (mk_Comp <| Normalize.norm_comp [Normalize.DeltaComp] env c2)
                 else None
               | Flex (u, t1), Comp ct2
               | Comp ct2, Flex (u, t1) -> 
                 bindf (trel false EQ env t1 ct2.result_typ) (fun f -> 
                   Unionfind.change u (Resolved c1);
                   Some f)
               | Flex (u1, t1), Flex (u2, t2) -> 
                 bindf (trel false EQ env t1 t2) (fun f -> 
                   if (Unionfind.equivalent u1 u2) 
                   then Some f
                   else (Unionfind.union u1 u2; Some f))
             end
               
           | SUB -> 
             match c1.n, c2.n with 
               | Total t1, Total t2 -> trel false SUB env t1 t2
               | Total t1, Flex (u, t2) -> 
                 bindf (trel false SUB env t1 t2) (fun f -> 
                   Unionfind.change u (Resolved (mk_Total t2));
                   Some f)
               | Flex(u, t1), Total t2 -> 
                 bindf (trel false SUB env t1 t2) (fun f -> 
                   Unionfind.change u (Resolved c2);
                   Some f)
               | Total _,  _ -> crel SUB env (mk_Comp <| force_comp c1) c2
               | _, Total _ -> crel SUB env c1 (mk_Comp <| force_comp c2)
               | Comp _, Comp _ -> 
                 let c1 = Normalize.weak_norm_comp env c1 in
                 let c2 = Normalize.weak_norm_comp env c2 in
                 //check_sharing (c1.result_typ) (c2.result_typ) "crel1";
                 begin match Tc.Env.monad_leq env c1.effect_name c2.effect_name with
                   | None -> None
                   | Some edge ->
                     let wpc1, wpc2 = match c1.effect_args, c2.effect_args with 
                       | Inl wp1::_, Inl wp2::_ -> wp1, wp2 
                       | _ -> failwith (Util.format2 "Got effects %s and %s, expected normalized effects" (Print.sli c1.effect_name) (Print.sli c2.effect_name)) in
                     andf (trel false SUB env c1.result_typ c2.result_typ) (fun f -> 
                       let c2_decl : monad_decl = Tc.Env.get_monad_decl env c2.effect_name in
                       let is_wpc2_null () = 
                         if not !Options.verify then false
                         else match trel true EQ env wpc2 (Util.mk_typ_app_explicit c2_decl.null_wp [Inl c2.result_typ]) with 
                           | Some Trivial -> true
                           | _ -> false in
                       if Util.physical_equality wpc1 wpc2
                       then ret <| Some Trivial
                       else if is_wpc2_null() 
                       then let _ = if debug env then Util.print_string "Using trivial wp ... \n" in
                            let t = Util.mk_typ_app_explicit c2_decl.trivial [Inl c1.result_typ; Inl <| edge.mlift c1.result_typ wpc1] in
                            ret <| Some (mkGuard env <| {t with tk=mk_Kind_type})
                       else let t = Util.mk_typ_app_explicit c2_decl.wp_binop [Inl c2.result_typ; Inl wpc2; Inl <| Util.ftv Const.imp_lid (Const.kbin ktype ktype ktype); 
                                                                               Inl <| edge.mlift c1.result_typ wpc1] in
                            let t = {t with tk=wpc2.tk} in
                            let t = Util.mk_typ_app_explicit c2_decl.wp_as_type [Inl c2.result_typ; Inl t] in
                            ret <| Some (NonTrivial <| {t with tk=mk_Kind_type})) 
                 end
                   
               | Flex(u, t), Comp ct2 -> 
                 bindf (trel false SUB env t ct2.result_typ) (fun f -> 
                   Unionfind.change u (Resolved c2);
                   Some f)
               | Comp ct2, Flex(u, t) -> 
                 bindf (trel false SUB env ct2.result_typ t) (fun f -> 
                   Unionfind.change u (Resolved c1);
                   Some f)

               | Flex(u1, t1), Flex(u2, t2) -> 
                 bindf (trel false SUB env t1 t2) (fun f -> 
                   (if not (Unionfind.equivalent u1 u2)
                    then Unionfind.union u1 u2); (* TODO: Fix precedence of the ';' *)
                   Some f) in
  aux false c1 c2

and either_rel rel env l1 l2 = 
  forallf (List.zip l1 l2) (function 
    | Inl t1, Inl t2 -> trel false rel env t1 t2
    | Inr e1, Inr e2 -> exp_equiv env e1 e2
    | _ -> None)


--------------------------------------------------------------------------------

let new_kvar env =
  let wf k () =
    let fk = Util.freevars_kind k in 
    let fe = Env.idents env in
    Util.set_is_subset_of fk.ftvs fe.ftvs && Util.set_is_subset_of fk.fxvs fe.fxvs in
  mk_Kind_uvar (Unionfind.fresh (Uvar wf), Tc.Env.bound_vars env) (Env.get_range env)

let new_tvar env k =
  let rec pre_kind_compat k1 k2 = match (compress_kind k1).n, (compress_kind k2).n with 
    | _, Kind_uvar uv 
    | Kind_uvar uv, _ -> true
    | Kind_type, Kind_type -> true
    | Kind_tcon(_, k1, k2, _), Kind_tcon(_, k1', k2', _) -> pre_kind_compat k1 k1' && pre_kind_compat k2 k2'
    | Kind_dcon(_, _, k1, _), Kind_dcon(_, _, k1', _) -> pre_kind_compat k1 k1'
    | k1, k2 -> //Util.print_string (Util.format2 "Pre-kind-compat failed on %s and %s\n" (Print.kind_to_string k1) (Print.kind_to_string k2)); 
    false in
  let wf t tk = pre_kind_compat k tk in 
  let vars = Tc.Env.bound_vars env in 
  let r = Tc.Env.get_range env in
  let rec mk_uv_app k vars = match vars with 
    | [] -> 
        let uv = Unionfind.fresh (Uvar wf) in
        syn' env k <| mk_Typ_uvar' (uv,k), (uv,k)
    | Inl a::rest -> 
      let k' = mk_Kind_tcon(Some a.v, a.sort, k, false) r in
      let app, uvk = mk_uv_app k' rest in 
      mk_Typ_app(app, Util.btvar_to_typ a, false) k r, uvk
    | Inr x::rest -> 
      let k' = mk_Kind_dcon(Some x.v, x.sort, k, false) r in
      let app, uvk = mk_uv_app k' rest in 
      mk_Typ_dep(app, Util.bvar_to_exp x, false) k r, uvk in
  let app,uvk = mk_uv_app k vars in 
  mk_Typ_meta'(Meta_uvar_t_app(app, uvk)) k r

let new_evar env t =
  let wf e t = true in 
//    let fe = Util.freevars_exp e in
//    let fenv = Env.idents env in 
//    Util.set_is_subset_of fe.ftvs fenv.ftvs && Util.set_is_subset_of fe.fxvs fenv.fxvs in
  let vars = Tc.Env.bound_vars env in 
  let r = Tc.Env.get_range env in
  let rec mk_uv_app t vars = match vars with 
    | [] -> 
        let uv = Unionfind.fresh (Uvar wf) in 
        mk_Exp_uvar (uv, t) <| Env.get_range env, (uv,t)
    | Inl a::rest -> 
        let t' = mk_Typ_univ(a.v, a.sort, mk_Total t) ktype r in
        let app, uvt = mk_uv_app t' rest in 
        mk_Exp_tapp(app, Util.btvar_to_typ a) t r, uvt
    | Inr x::rest -> 
        let t' = mk_Typ_fun(Some x.v, x.sort, mk_Total t, false) ktype r in
        let app, uvt = mk_uv_app t' rest in 
        mk_Exp_app(app, Util.bvar_to_exp x, false) t r, uvt in
  let app, uvt = mk_uv_app t vars in
  mk_Exp_meta'(Meta_uvar_e_pattern(app, uvt)) t r
 
let new_cvar env t = 
  mk_Flex ((Unionfind.fresh Floating, Tc.Env.bound_vars env), t)

