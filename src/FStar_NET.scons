import sys
import os, os.path
import re
import SCons

Import('My_env')
env = My_env.Clone()    # ensure changes here don't have impact on other SConscripts

# nuget_restore target
nuget_restore = env.Pseudo('nuget-restore')
fstar_sln = env.Alias(File('#/VS/FStar.sln'))   # so that it's reified as build object but never built
env.AlwaysBuild(fstar_sln)                      # so that it's always considered out od date => MSbuild decides building

env.Command(nuget_restore, fstar_sln, [ Mkdir('VS/packages'),
                                        '$RUNTIME $NUGET update -self', 
                                        '$RUNTIME $NUGET restore $SOURCE' ])

# VS install-packages target
chmod_packages = env.Pseudo('chmod-packages')
if sys.platform != 'win32':
  env.Command(chmod_packages, fstar_sln, 'find VS/packages -name \'*.exe\' -exec chmod +x \'{}\' \';\'')
Depends(chmod_packages, nuget_restore)
Requires(chmod_packages, nuget_restore)  # 'update_nuget' must complete ahead of 'install_packages'

#fstar_binaries=['fstar.exe', 'fsdoc.dll', 'tosyntax.dll', 'extraction.dll', 'smtencoding.dll', 'typechecker.dll', 'prettyprint.dll', 'syntax.dll', 'format.dll', 'basic.dll']
#fstar_targets=['../bin/' + b for b in fstar_binaries]

chmod_a_plus_x = 0777  # 'a+x' implemented as rwx/rwx/rwx
NoCache('$BIN/fstar.exe') # don't cache these... Always regenerate from msbuild
vs_fstar = env.Command( '$BIN/fstar.exe', fstar_sln, 
                        ['$MSBUILD $MSBUILDARGS $SOURCE',
                        Chmod(env['BIN']+'/tests.exe', chmod_a_plus_x),
                        Chmod(env['BIN']+'/fstar.exe', chmod_a_plus_x)])
Requires(vs_fstar, chmod_packages) # 'install_packages" must complete ahead of 'vs_fstar')

my_top = vs_fstar # for external use

# if '-c' or '--clean' is passed on the command line, call out to msbuild to clean, too
if GetOption('clean'):
  os.system(env.subst('$MSBUILD $MSBUILDARGS /t:clean') + ' ' + str(fstar_sln))
 
Return('my_top')