/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Chacha20_H
#define __Crypto_Symmetric_Chacha20_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Intrinsics.h"
#include "Crypto_Symmetric_AES128.h"
#include "kremlib.h"
#include "testlib.h"

typedef uint32_t Crypto_Symmetric_Chacha20_u32;

typedef uint8_t *Crypto_Symmetric_Chacha20_uint8_p;

typedef uint32_t *Crypto_Symmetric_Chacha20_chacha_ctx;

void Crypto_Symmetric_Chacha20_lemma_max_uint32(Prims_nat n);

uint32_t Crypto_Symmetric_Chacha20_op_Less_Less_Less(uint32_t a, uint32_t s);

uint32_t Crypto_Symmetric_Chacha20_load32_le(uint8_t *k);

void Crypto_Symmetric_Chacha20_store32_le(uint8_t *k, uint32_t x);

void Crypto_Symmetric_Chacha20_chacha_keysetup(uint32_t *ctx, uint8_t *k);

void
Crypto_Symmetric_Chacha20_chacha_ietf_ivsetup(uint32_t *ctx, uint8_t *iv, uint32_t counter);

void
Crypto_Symmetric_Chacha20_chacha_encrypt_bytes_core(uint32_t *ctx, uint8_t *m, uint8_t *c);

void
Crypto_Symmetric_Chacha20_chacha_encrypt_bytes_loop(
  uint32_t *ctx,
  uint8_t *m,
  uint8_t *c,
  uint32_t len
);

void
Crypto_Symmetric_Chacha20_chacha_encrypt_bytes_finish(
  uint32_t *ctx,
  uint8_t *m,
  uint8_t *c,
  uint32_t len
);

void
Crypto_Symmetric_Chacha20_chacha_encrypt_bytes(
  uint32_t *ctx,
  uint8_t *m,
  uint8_t *c,
  uint32_t len
);
#endif
