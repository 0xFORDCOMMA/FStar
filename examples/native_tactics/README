UserPrintTactic.fst is a dummy tactic which just reads the proof state

GM, ZP, JP: struggled to get this to work. Some more comprehensive instructions.

i) extract the UserPrintTacticReal.fst
ii) extract UserPrintTactic.fst
iii) merge the two together into UserPrintTactic.ml by replacing the dummy definition that starts with
__ with its definition

Then, you need to the following voodoo appended to the file:

let _ =
  FStar_Tactics_Native.register_tactic "UserPrintTactic.__user_print" 2 (fun ps args ->
    FStar_Tactics_Interpreter.mk_tactic_interpretation_1
      ps
      (FStar_Tactics_Native.from_tactic_1 user_print)
      unembed_string
      embed_unit
      FStar_TypeChecker_Common.t_unit
      (FStar_Ident.lid_of_str "UserPrintTactic.__user_print")
      args)

I've saved the file "as is" under version control.

1. fstar --codegen OCaml UserPrintTactic.fst
    (Note: this will overwrite UserPrintTactic.ml, which currently also contains the manual invocation
     needed to register the native tactic)
2. In UserPrintTactic.ml, manually adding the invocation to Tactics.Native.register_tactic
3. At the root
    ocamlfind ocamlopt -shared -I src/ocaml-output/_build/src/tactics/ml -I src/ocaml-output/_build/ulib/ml -I src/ocaml-output/_build/src/ocaml-output/ -linkpkg -package zarith -o examples/native_tactics/UserPrintTactic.cmxs examples/native_tactics/UserPrintTactic.ml
which results in UserPrintTactic.cmxs
4. In the original UserPrintTactic.fst, remove the tactic itself, assume it and manually add a reflect,
similar to the way it's done in ulib/FStar.Tactics.fst

In order to use it:
fstar --load UserPrintTactic.cmxs UserTacTest.fst

