open AST

open FFI
  
let program = mk_let "alice_s" (mk_ffi 1 (FFI.singleton) [  (mk_var "alice"); ] (fun x -> V_prins x)) (mk_let "bob_s" (mk_ffi 1 (FFI.singleton) [  (mk_var "bob"); ] (fun x -> V_prins x)) (mk_let "ab" (mk_ffi 2 (FFI.union) [  (mk_var "alice_s"); (mk_var "bob_s"); ] (fun x -> V_prins x)) ( ( ( (mk_let "read_fn" (mk_abs "x" (mk_ffi 1 FFI.read_int_tuple [ E_const (C_unit ()) ] (fun x -> mk_v_opaque x ((slice_tuple slice_id) slice_id) ((compose_tuples compose_ids) compose_ids) ((slice_tuple_sps slice_id_sps) slice_id_sps)))) ( (mk_let "median" (mk_abs "_14_13" (mk_let "p_alice" (mk_aspar (mk_var "alice_s") (mk_var "read_fn")) (mk_let "p_bob" (mk_aspar (mk_var "bob_s") (mk_var "read_fn")) (mk_let "g" (mk_abs "_14_17" (mk_let "a_t" (mk_unbox (mk_var "p_alice")) (mk_let "b_t" (mk_unbox (mk_var "p_bob")) (mk_let "x1" (mk_ffi 1 (FFI.fst) [  (mk_var "a_t"); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)) (mk_let "x2" (mk_ffi 1 (FFI.snd) [  (mk_var "a_t"); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)) (mk_let "y1" (mk_ffi 1 (FFI.fst) [  (mk_var "b_t"); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)) (mk_let "y2" (mk_ffi 1 (FFI.snd) [  (mk_var "b_t"); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)) (mk_let "b1" (mk_ffi 2 (Prims.op_LessThanOrEqual) [  (mk_var "x1"); (mk_var "y1"); ] (fun x -> V_bool x)) (mk_let "x3" (mk_cond (mk_var "b1") (mk_var "x2") (mk_var "x1")) (mk_let "y3" (mk_cond (mk_var "b1") (mk_var "y1") (mk_var "y2")) (mk_let "b2" (mk_ffi 2 (Prims.op_LessThanOrEqual) [  (mk_var "x3"); (mk_var "y3"); ] (fun x -> V_bool x)) (mk_cond (mk_var "b2") (mk_var "x3") (mk_var "y3"))))))))))))) (mk_assec (mk_var "ab") (mk_var "g")))))) (mk_let "x" (mk_app (mk_var "median") (mk_const (C_unit ()))) (mk_ffi 1 (FFI.print_int) [  (mk_var "x"); ] (fun x -> V_unit)))))))))))
