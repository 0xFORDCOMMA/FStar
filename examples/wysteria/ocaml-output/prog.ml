open AST
open FFI


let const_meta = Meta ([], Can_b, [], Can_w)


let program = [
("alice_s", (T_eprins), (mk_ffi 1 "FFI.singleton" (FFI.singleton) [  (mk_var "alice" (T_prin)); ] (fun x -> D_v (const_meta, V_eprins x))));
("bob_s", (T_eprins), (mk_ffi 1 "FFI.singleton" (FFI.singleton) [  (mk_var "bob" (T_prin)); ] (fun x -> D_v (const_meta, V_eprins x))));
("ab", (T_cons ("Prins.eprins", [])), (mk_ffi 2 "FFI.union" (FFI.union) [  (mk_var "alice_s" (T_eprins)); (mk_var "bob_s" (T_eprins)); ] (fun x -> D_v (const_meta, V_eprins x))));
("append_length", (T_unknown), (mk_fix (mk_varname "append_length" (T_unknown)) (mk_varname "l1" (T_cons ("Prims.list", [ (T_unknown);]))) (mk_abs (mk_varname "l2" (T_cons ("Prims.list", [ (T_unknown);]))) (mk_const (C_unit ())))));
("for_each_bob", (T_unknown), (mk_fix (mk_varname "for_each_bob" (T_unknown)) (mk_varname "x" (T_box (T_cons ("Prims.int", [])))) (mk_abs (mk_varname "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "y" (T_box (T_cons ("Prims.int", [])))) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> x)) (mk_let (mk_varname "g" (T_unknown)) (mk_abs (mk_varname "_16_29" (T_unit)) (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_unbox (mk_var "x" (T_box (T_cons ("Prims.int", []))))); (mk_unbox (mk_var "y" (T_box (T_cons ("Prims.int", []))))); ] (fun x -> D_v (const_meta, V_bool x)))) (mk_let (mk_varname "b" (T_bool)) (mk_assec (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "g" (T_unknown))) (mk_let (mk_varname "_35_18" (T_cons ("Prims.list", [ (T_bool);]))) (mk_app (mk_app (mk_var "for_each_bob" (T_unknown)) (mk_var "x" (T_box (T_cons ("Prims.int", []))))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi)))) (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_var "b" (T_bool)); (mk_var "_35_18" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))))))))));
("for_each_alice", (T_unknown), (mk_fix (mk_varname "for_each_alice" (T_unknown)) (mk_varname "la" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_abs (mk_varname "lb" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "la" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "l1" (T_cons ("Prims.list", [ (T_bool);]))) (mk_app (mk_app (mk_var "for_each_bob" (T_unknown)) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> x))) (mk_var "lb" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])))) (mk_let (mk_varname "l2" (T_cons ("Prims.list", [ (T_bool);]))) (mk_app (mk_app (mk_var "for_each_alice" (T_unknown)) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi)))) (mk_var "lb" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])))) (mk_let (mk_varname "_16_44" (T_unit)) (mk_const (C_unit ())) (mk_let (mk_varname "_16_46" (T_unit)) (mk_const (C_unit ())) (mk_ffi 2 "FFI.append" (FFI.append) [  (mk_var "l1" (T_cons ("Prims.list", [ (T_bool);]))); (mk_var "l2" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))))))))));
("row", (T_unknown), (mk_fix (mk_varname "row" (T_unknown)) (mk_varname "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_abs (mk_varname "lenb" (T_cons ("Prims.nat", []))) (mk_abs (mk_varname "bindex" (T_cons ("Prims.nat", []))) (mk_abs (mk_varname "matrix" (T_cons ("Prims.list", [ (T_bool);]))) (mk_cond (mk_ffi 1 "Prims.is_Nil" (Prims.is_Nil) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "b" (T_bool)) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "tl" (T_cons ("Prims.list", [ (T_bool);]))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_let (mk_varname "bindex'" (T_cons ("Prims.int", []))) (mk_ffi 2 "Prims.(+)" (Prims.(+)) [  (mk_var "bindex" (T_cons ("Prims.nat", []))); (mk_const (C_opaque ((), Obj.magic 1, T_cons ("Prims.int", [])))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "bindex'" (T_cons ("Prims.int", []))); (mk_var "lenb" (T_cons ("Prims.nat", []))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "_16_61" (T_unit)) (mk_const (C_unit ())) (mk_app (mk_app (mk_app (mk_app (mk_var "row" (T_unknown)) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_var "lenb" (T_cons ("Prims.nat", [])))) (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", []))))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);]))))) (mk_app (mk_app (mk_app (mk_app (mk_var "row" (T_unknown)) (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lenb" (T_cons ("Prims.nat", [])))) (mk_var "bindex'" (T_cons ("Prims.int", [])))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);])))))) (mk_cond (mk_var "b" (T_bool)) (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)); (mk_var "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_var "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))))))))));
("col", (T_unknown), (mk_fix (mk_varname "col" (T_unknown)) (mk_varname "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_abs (mk_varname "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_abs (mk_varname "matrix" (T_cons ("Prims.list", [ (T_bool);]))) (mk_cond (mk_ffi 1 "Prims.is_Nil" (Prims.is_Nil) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "b" (T_bool)) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "tl" (T_cons ("Prims.list", [ (T_bool);]))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "lbc_hd" (T_cons ("Prims.int", []))) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)) (mk_let (mk_varname "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_cond (mk_ffi 1 "Prims.is_Nil" (Prims.is_Nil) [  (mk_var "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_app (mk_app (mk_app (mk_var "col" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);])))) (mk_app (mk_app (mk_app (mk_var "col" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);]))))) (mk_cond (mk_var "b" (T_bool)) (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_var "lbc_hd" (T_cons ("Prims.int", []))); (mk_var "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_var "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))))))))))));
("for_each_bob_opt", (T_unknown), (mk_fix (mk_varname "for_each_bob_opt" (T_unknown)) (mk_varname "x" (T_box (T_cons ("Prims.int", [])))) (mk_abs (mk_varname "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 2 "FFI.mk_tuple" (FFI.mk_tuple) [  (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))); (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))); ] (fun x -> mk_v_opaque x ((slice_tuple (slice_list Semantics.slice_v_ffi)) (slice_list slice_id)) ((compose_tuples (compose_lists Semantics.compose_vals_ffi)) (compose_lists compose_ids)) ((slice_tuple_sps (slice_list_sps Semantics.slice_v_sps_ffi)) (slice_list_sps slice_id_sps)))) (mk_let (mk_varname "y" (T_box (T_cons ("Prims.int", [])))) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> x)) (mk_let (mk_varname "g" (T_unknown)) (mk_abs (mk_varname "_16_82" (T_unit)) (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_unbox (mk_var "x" (T_box (T_cons ("Prims.int", []))))); (mk_unbox (mk_var "y" (T_box (T_cons ("Prims.int", []))))); ] (fun x -> D_v (const_meta, V_bool x)))) (mk_let (mk_varname "b" (T_bool)) (mk_assec (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "g" (T_unknown))) (mk_cond (mk_var "b" (T_bool)) (mk_ffi 2 "FFI.mk_tuple" (FFI.mk_tuple) [  (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))); (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_var "b" (T_bool)); (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))); ] (fun x -> mk_v_opaque x ((slice_tuple (slice_list Semantics.slice_v_ffi)) (slice_list slice_id)) ((compose_tuples (compose_lists Semantics.compose_vals_ffi)) (compose_lists compose_ids)) ((slice_tuple_sps (slice_list_sps Semantics.slice_v_sps_ffi)) (slice_list_sps slice_id_sps)))) (mk_let (mk_varname "tup" (T_cons ("Prims.Tuple2", [ (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])); (T_cons ("Prims.list", [ (T_bool);]));]))) (mk_app (mk_app (mk_var "for_each_bob_opt" (T_unknown)) (mk_var "x" (T_box (T_cons ("Prims.int", []))))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "l" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi)))) (mk_ffi 2 "FFI.mk_tuple" (FFI.mk_tuple) [  (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_var "y" (T_box (T_cons ("Prims.int", [])))); (mk_ffi 1 "Prims.fst" (Prims.fst) [  (mk_var "tup" (T_cons ("Prims.Tuple2", [ (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])); (T_cons ("Prims.list", [ (T_bool);]));]))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))); (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_const (C_bool false)); (mk_ffi 1 "Prims.snd" (Prims.snd) [  (mk_var "tup" (T_cons ("Prims.Tuple2", [ (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])); (T_cons ("Prims.list", [ (T_bool);]));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))); ] (fun x -> mk_v_opaque x ((slice_tuple (slice_list Semantics.slice_v_ffi)) (slice_list slice_id)) ((compose_tuples (compose_lists Semantics.compose_vals_ffi)) (compose_lists compose_ids)) ((slice_tuple_sps (slice_list_sps Semantics.slice_v_sps_ffi)) (slice_list_sps slice_id_sps)))))))))))));
("for_each_alice_opt", (T_unknown), (mk_fix (mk_varname "for_each_alice_opt" (T_unknown)) (mk_varname "la" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_abs (mk_varname "lb" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "la" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "tup" (T_cons ("Prims.Tuple2", [ (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])); (T_cons ("Prims.list", [ (T_bool);]));]))) (mk_app (mk_app (mk_var "for_each_bob_opt" (T_unknown)) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> x))) (mk_var "lb" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])))) (mk_let (mk_varname "_35_71" (T_cons ("Prims.list", [ (T_bool);]))) (mk_app (mk_app (mk_var "for_each_alice_opt" (T_unknown)) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi)))) (mk_ffi 1 "Prims.fst" (Prims.fst) [  (mk_var "tup" (T_cons ("Prims.Tuple2", [ (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])); (T_cons ("Prims.list", [ (T_bool);]));]))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi)))) (mk_ffi 2 "FFI.append" (FFI.append) [  (mk_ffi 1 "Prims.snd" (Prims.snd) [  (mk_var "tup" (T_cons ("Prims.Tuple2", [ (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])); (T_cons ("Prims.list", [ (T_bool);]));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))); (mk_var "_35_71" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))))))));
("row_opt", (T_unknown), (mk_fix (mk_varname "row_opt" (T_unknown)) (mk_varname "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_abs (mk_varname "lenb" (T_cons ("Prims.nat", []))) (mk_abs (mk_varname "bindex" (T_cons ("Prims.nat", []))) (mk_abs (mk_varname "matrix" (T_cons ("Prims.list", [ (T_bool);]))) (mk_abs (mk_varname "s" (T_cons ("Prims.list", [ (T_cons ("Prims.nat", []));]))) (mk_cond (mk_ffi 1 "Prims.is_Nil" (Prims.is_Nil) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_cond (mk_ffi 1 "Prims.op_Negation" (Prims.op_Negation) [  (mk_ffi 2 "FFI.lmem" (FFI.lmem) [  (mk_var "bindex" (T_cons ("Prims.nat", []))); (mk_var "s" (T_cons ("Prims.list", [ (T_cons ("Prims.nat", []));]))); ] (fun x -> D_v (const_meta, V_bool x))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "b" (T_bool)) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "tl" (T_cons ("Prims.list", [ (T_bool);]))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_cond (mk_var "b" (T_bool)) (mk_let (mk_varname "_16_104" (T_unit)) (mk_const (C_unit ())) (mk_let (mk_varname "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_app (mk_app (mk_app (mk_app (mk_app (mk_var "row_opt" (T_unknown)) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_var "lenb" (T_cons ("Prims.nat", [])))) (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", []))))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);])))) (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_var "bindex" (T_cons ("Prims.nat", []))); (mk_var "s" (T_cons ("Prims.list", [ (T_cons ("Prims.nat", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)); (mk_var "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))))) (mk_let (mk_varname "bindex'" (T_cons ("Prims.int", []))) (mk_ffi 2 "Prims.(+)" (Prims.(+)) [  (mk_var "bindex" (T_cons ("Prims.nat", []))); (mk_const (C_opaque ((), Obj.magic 1, T_cons ("Prims.int", [])))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "bindex'" (T_cons ("Prims.int", []))); (mk_var "lenb" (T_cons ("Prims.nat", []))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "_16_108" (T_unit)) (mk_const (C_unit ())) (mk_app (mk_app (mk_app (mk_app (mk_app (mk_var "row_opt" (T_unknown)) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_var "lenb" (T_cons ("Prims.nat", [])))) (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", []))))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);])))) (mk_var "s" (T_cons ("Prims.list", [ (T_cons ("Prims.nat", []));]))))) (mk_app (mk_app (mk_app (mk_app (mk_app (mk_var "row_opt" (T_unknown)) (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lenb" (T_cons ("Prims.nat", [])))) (mk_var "bindex'" (T_cons ("Prims.int", [])))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);])))) (mk_var "s" (T_cons ("Prims.list", [ (T_cons ("Prims.nat", []));]))))))))) (mk_let (mk_varname "bindex'" (T_cons ("Prims.int", []))) (mk_ffi 2 "Prims.(+)" (Prims.(+)) [  (mk_var "bindex" (T_cons ("Prims.nat", []))); (mk_const (C_opaque ((), Obj.magic 1, T_cons ("Prims.int", [])))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "bindex'" (T_cons ("Prims.int", []))); (mk_var "lenb" (T_cons ("Prims.nat", []))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "_16_111" (T_unit)) (mk_const (C_unit ())) (mk_app (mk_app (mk_app (mk_app (mk_app (mk_var "row_opt" (T_unknown)) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_var "lenb" (T_cons ("Prims.nat", [])))) (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", []))))) (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);])))) (mk_var "s" (T_cons ("Prims.list", [ (T_cons ("Prims.nat", []));]))))) (mk_app (mk_app (mk_app (mk_app (mk_app (mk_var "row_opt" (T_unknown)) (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lenb" (T_cons ("Prims.nat", [])))) (mk_var "bindex'" (T_cons ("Prims.int", [])))) (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);])))) (mk_var "s" (T_cons ("Prims.list", [ (T_cons ("Prims.nat", []));]))))))))))))));
("col_opt", (T_unknown), (mk_fix (mk_varname "col_opt" (T_unknown)) (mk_varname "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_abs (mk_varname "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_abs (mk_varname "matrix" (T_cons ("Prims.list", [ (T_bool);]))) (mk_abs (mk_varname "matched" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_cond (mk_ffi 1 "Prims.is_Nil" (Prims.is_Nil) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_let (mk_varname "_16_121" (T_unit)) (mk_const (C_unit ())) (mk_cond (mk_ffi 2 "FFI.lmem" (FFI.lmem) [  (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)); (mk_var "matched" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_cond (mk_ffi 1 "Prims.is_Nil" (Prims.is_Nil) [  (mk_var "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_app (mk_app (mk_app (mk_app (mk_var "col_opt" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);])))) (mk_var "matched" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_app (mk_app (mk_app (mk_app (mk_var "col_opt" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);])))) (mk_var "matched" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))) (mk_let (mk_varname "b" (T_bool)) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "tl" (T_cons ("Prims.list", [ (T_bool);]))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_cond (mk_var "b" (T_bool)) (mk_let (mk_varname "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_app (mk_app (mk_app (mk_app (mk_var "col_opt" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);])))) (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)); (mk_var "matched" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)); (mk_var "rest" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_let (mk_varname "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "lbc" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))) (mk_cond (mk_ffi 1 "Prims.is_Nil" (Prims.is_Nil) [  (mk_var "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_app (mk_app (mk_app (mk_app (mk_var "col_opt" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);])))) (mk_var "matched" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_app (mk_app (mk_app (mk_app (mk_var "col_opt" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lbc_tl" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "tl" (T_cons ("Prims.list", [ (T_bool);])))) (mk_var "matched" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))))))))))))));
("box_list_to_list_box", (T_unknown), (mk_fix (mk_varname "box_list_to_list_box" (T_unknown)) (mk_varname "p" (T_prin)) (mk_abs (mk_varname "l" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_abs (mk_varname "len" (T_cons ("Prims.nat", []))) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "len" (T_cons ("Prims.nat", []))); (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", [])))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi))) (mk_let (mk_varname "g" (T_unknown)) (mk_abs (mk_varname "_16_141" (T_unit)) (mk_let (mk_varname "_35_110" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_ffi 1 "FFI.hd_of_cons" (FFI.hd_of_cons) [  (mk_var "_35_110" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)))) (mk_let (mk_varname "g'" (T_unknown)) (mk_abs (mk_varname "_16_144" (T_unit)) (mk_let (mk_varname "_35_116" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_ffi 1 "FFI.tl_of_cons" (FFI.tl_of_cons) [  (mk_var "_35_116" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps))))) (mk_let (mk_varname "hd" (T_box (T_cons ("Prims.int", [])))) (mk_aspar (mk_ffi 1 "FFI.singleton" (FFI.singleton) [  (mk_var "p" (T_prin)); ] (fun x -> D_v (const_meta, V_eprins x))) (mk_var "g" (T_unknown))) (mk_let (mk_varname "tl" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_ffi 1 "FFI.singleton" (FFI.singleton) [  (mk_var "p" (T_prin)); ] (fun x -> D_v (const_meta, V_eprins x))) (mk_var "g'" (T_unknown))) (mk_let (mk_varname "rest" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_app (mk_app (mk_app (mk_var "box_list_to_list_box" (T_unknown)) (mk_var "p" (T_prin))) (mk_var "tl" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_ffi 2 "Prims.(-)" (Prims.(-)) [  (mk_var "len" (T_cons ("Prims.nat", []))); (mk_const (C_opaque ((), Obj.magic 1, T_cons ("Prims.int", [])))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps))) (mk_ffi 2 "FFI.mk_cons" (FFI.mk_cons) [  (mk_var "hd" (T_box (T_cons ("Prims.int", [])))); (mk_var "rest" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))); ] (fun x -> mk_v_opaque x (slice_list Semantics.slice_v_ffi) (compose_lists Semantics.compose_vals_ffi) (slice_list_sps Semantics.slice_v_sps_ffi)))))))))))));
("psi", (T_unknown), (mk_abs (mk_varname "ps" (T_eprins)) (mk_abs (mk_varname "w" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_let (mk_varname "proj" (T_unknown)) (mk_abs (mk_varname "p" (T_prin)) (mk_abs (mk_varname "_16_161" (T_unit)) (mk_projwire (mk_var "p" (T_prin)) (mk_var "w" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))))) (mk_let (mk_varname "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "alice_s" (T_eprins)) (mk_app (mk_var "proj" (T_unknown)) (mk_var "alice" (T_prin)))) (mk_let (mk_varname "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "bob_s" (T_eprins)) (mk_app (mk_var "proj" (T_unknown)) (mk_var "bob" (T_prin)))) (mk_let (mk_varname "len" (T_unknown)) (mk_abs (mk_varname "_16_168" (T_prin)) (mk_abs (mk_varname "l" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_abs (mk_varname "_16_171" (T_unit)) (mk_let (mk_varname "l" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_ffi 1 "FFI.length" (FFI.length) [  (mk_var "l" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)))))) (mk_let (mk_varname "n1" (T_box (T_cons ("Prims.int", [])))) (mk_aspar (mk_var "alice_s" (T_eprins)) (mk_app (mk_app (mk_var "len" (T_unknown)) (mk_var "alice" (T_prin))) (mk_var "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))) (mk_let (mk_varname "n2" (T_box (T_cons ("Prims.int", [])))) (mk_aspar (mk_var "bob_s" (T_eprins)) (mk_app (mk_app (mk_var "len" (T_unknown)) (mk_var "bob" (T_prin))) (mk_var "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))) (mk_let (mk_varname "g" (T_unknown)) (mk_abs (mk_varname "p" (T_prin)) (mk_abs (mk_varname "n" (T_box (T_cons ("Prims.int", [])))) (mk_abs (mk_varname "_16_186" (T_unit)) (mk_unbox (mk_var "n" (T_box (T_cons ("Prims.int", [])))))))) (mk_let (mk_varname "n1'" (T_cons ("Prims.int", []))) (mk_assec (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_app (mk_app (mk_var "g" (T_unknown)) (mk_var "alice" (T_prin))) (mk_var "n1" (T_box (T_cons ("Prims.int", [])))))) (mk_let (mk_varname "n2'" (T_cons ("Prims.int", []))) (mk_assec (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_app (mk_app (mk_var "g" (T_unknown)) (mk_var "bob" (T_prin))) (mk_var "n2" (T_box (T_cons ("Prims.int", [])))))) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "n2'" (T_cons ("Prims.int", []))); (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", [])))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "trivial" (T_unknown)) (mk_abs (mk_varname "_16_199" (T_unit)) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_let (mk_varname "_35_220" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "trivial" (T_unknown))) (mk_mkwire (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "_35_220" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))))) (mk_let (mk_varname "l1'" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_app (mk_app (mk_app (mk_var "box_list_to_list_box" (T_unknown)) (mk_var "alice" (T_prin))) (mk_var "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_var "n1'" (T_cons ("Prims.int", [])))) (mk_let (mk_varname "l2'" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_app (mk_app (mk_app (mk_var "box_list_to_list_box" (T_unknown)) (mk_var "bob" (T_prin))) (mk_var "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_var "n2'" (T_cons ("Prims.int", [])))) (mk_let (mk_varname "matrix" (T_cons ("Prims.list", [ (T_bool);]))) (mk_app (mk_app (mk_var "for_each_alice" (T_unknown)) (mk_var "l1'" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])))) (mk_var "l2'" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])))) (mk_let (mk_varname "get_aout" (T_unknown)) (mk_abs (mk_varname "_16_205" (T_unit)) (mk_let (mk_varname "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_app (mk_app (mk_app (mk_app (mk_var "row" (T_unknown)) (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "n2'" (T_cons ("Prims.int", [])))) (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", []))))) (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);])))))) (mk_let (mk_varname "get_bout" (T_unknown)) (mk_abs (mk_varname "_16_209" (T_unit)) (mk_let (mk_varname "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_app (mk_app (mk_app (mk_var "col" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);])))))) (mk_let (mk_varname "a_out" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "alice_s" (T_eprins)) (mk_var "get_aout" (T_unknown))) (mk_let (mk_varname "b_out" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "bob_s" (T_eprins)) (mk_var "get_bout" (T_unknown))) (mk_let (mk_varname "w1" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_mkwire (mk_var "alice_s" (T_eprins)) (mk_var "a_out" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_let (mk_varname "w2" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_mkwire (mk_var "bob_s" (T_eprins)) (mk_var "b_out" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_concatwire (mk_var "w1" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "w2" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))))))))))))))))))))))));
("psi_opt", (T_unknown), (mk_abs (mk_varname "ps" (T_eprins)) (mk_abs (mk_varname "w" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_let (mk_varname "proj" (T_unknown)) (mk_abs (mk_varname "p" (T_prin)) (mk_abs (mk_varname "_16_223" (T_unit)) (mk_projwire (mk_var "p" (T_prin)) (mk_var "w" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))))) (mk_let (mk_varname "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "alice_s" (T_eprins)) (mk_app (mk_var "proj" (T_unknown)) (mk_var "alice" (T_prin)))) (mk_let (mk_varname "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "bob_s" (T_eprins)) (mk_app (mk_var "proj" (T_unknown)) (mk_var "bob" (T_prin)))) (mk_let (mk_varname "len" (T_unknown)) (mk_abs (mk_varname "_16_230" (T_prin)) (mk_abs (mk_varname "l" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_abs (mk_varname "_16_233" (T_unit)) (mk_let (mk_varname "l" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_ffi 1 "FFI.length" (FFI.length) [  (mk_var "l" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps)))))) (mk_let (mk_varname "n1" (T_box (T_cons ("Prims.int", [])))) (mk_aspar (mk_var "alice_s" (T_eprins)) (mk_app (mk_app (mk_var "len" (T_unknown)) (mk_var "alice" (T_prin))) (mk_var "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))) (mk_let (mk_varname "n2" (T_box (T_cons ("Prims.int", [])))) (mk_aspar (mk_var "bob_s" (T_eprins)) (mk_app (mk_app (mk_var "len" (T_unknown)) (mk_var "bob" (T_prin))) (mk_var "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))) (mk_let (mk_varname "g" (T_unknown)) (mk_abs (mk_varname "p" (T_prin)) (mk_abs (mk_varname "n" (T_box (T_cons ("Prims.int", [])))) (mk_abs (mk_varname "_16_248" (T_unit)) (mk_unbox (mk_var "n" (T_box (T_cons ("Prims.int", [])))))))) (mk_let (mk_varname "n1'" (T_cons ("Prims.int", []))) (mk_assec (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_app (mk_app (mk_var "g" (T_unknown)) (mk_var "alice" (T_prin))) (mk_var "n1" (T_box (T_cons ("Prims.int", [])))))) (mk_let (mk_varname "n2'" (T_cons ("Prims.int", []))) (mk_assec (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_app (mk_app (mk_var "g" (T_unknown)) (mk_var "bob" (T_prin))) (mk_var "n2" (T_box (T_cons ("Prims.int", [])))))) (mk_cond (mk_ffi 2 "Prims.op_Equality" (Prims.op_Equality) [  (mk_var "n2'" (T_cons ("Prims.int", []))); (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", [])))); ] (fun x -> D_v (const_meta, V_bool x))) (mk_let (mk_varname "trivial" (T_unknown)) (mk_abs (mk_varname "_16_261" (T_unit)) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))) (mk_let (mk_varname "_35_415" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "trivial" (T_unknown))) (mk_mkwire (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "_35_415" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))))) (mk_let (mk_varname "l1'" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_app (mk_app (mk_app (mk_var "box_list_to_list_box" (T_unknown)) (mk_var "alice" (T_prin))) (mk_var "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_var "n1'" (T_cons ("Prims.int", [])))) (mk_let (mk_varname "l2'" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));]))) (mk_app (mk_app (mk_app (mk_var "box_list_to_list_box" (T_unknown)) (mk_var "bob" (T_prin))) (mk_var "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_var "n2'" (T_cons ("Prims.int", [])))) (mk_let (mk_varname "matrix" (T_cons ("Prims.list", [ (T_bool);]))) (mk_app (mk_app (mk_var "for_each_alice_opt" (T_unknown)) (mk_var "l1'" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])))) (mk_var "l2'" (T_cons ("Prims.list", [ (T_box (T_cons ("Prims.int", [])));])))) (mk_let (mk_varname "get_aout" (T_unknown)) (mk_abs (mk_varname "_16_267" (T_unit)) (mk_let (mk_varname "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_app (mk_app (mk_app (mk_app (mk_app (mk_var "row_opt" (T_unknown)) (mk_var "la" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "n2'" (T_cons ("Prims.int", [])))) (mk_const (C_opaque ((), Obj.magic 0, T_cons ("Prims.int", []))))) (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);])))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))))) (mk_let (mk_varname "get_bout" (T_unknown)) (mk_abs (mk_varname "_16_271" (T_unit)) (mk_let (mk_varname "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_app (mk_app (mk_app (mk_app (mk_var "col_opt" (T_unknown)) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "lb" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "matrix" (T_cons ("Prims.list", [ (T_bool);])))) (mk_ffi 1 "FFI.mk_nil" (FFI.mk_nil) [  (mk_const (C_unit ())); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))))) (mk_let (mk_varname "a_out" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "alice_s" (T_eprins)) (mk_var "get_aout" (T_unknown))) (mk_let (mk_varname "b_out" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "bob_s" (T_eprins)) (mk_var "get_bout" (T_unknown))) (mk_let (mk_varname "w1" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_mkwire (mk_var "alice_s" (T_eprins)) (mk_var "a_out" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_let (mk_varname "w2" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_mkwire (mk_var "bob_s" (T_eprins)) (mk_var "b_out" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_concatwire (mk_var "w1" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_var "w2" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))))))))))))))))))))))))));
("psi_m", (T_unknown), (mk_abs (mk_varname "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_abs (mk_varname "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_let (mk_varname "_16_283" (T_unit)) (mk_const (C_unit ())) (mk_let (mk_varname "g" (T_unknown)) (mk_abs (mk_varname "_16_285" (T_unit)) (mk_let (mk_varname "x" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_let (mk_varname "y" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_unbox (mk_var "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_ffi 2 "FFI.list_intersect" (FFI.list_intersect) [  (mk_var "x" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); (mk_var "y" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))); ] (fun x -> mk_v_opaque x (slice_list slice_id) (compose_lists compose_ids) (slice_list_sps slice_id_sps)))))) (mk_assec (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "g" (T_unknown))))))));
("psi_mono", (T_unknown), (mk_abs (mk_varname "ps" (T_eprins)) (mk_abs (mk_varname "w" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_let (mk_varname "proj" (T_unknown)) (mk_abs (mk_varname "p" (T_prin)) (mk_abs (mk_varname "_16_296" (T_unit)) (mk_projwire (mk_var "p" (T_prin)) (mk_var "w" (T_wire (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))))) (mk_let (mk_varname "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "alice_s" (T_eprins)) (mk_app (mk_var "proj" (T_unknown)) (mk_var "alice" (T_prin)))) (mk_let (mk_varname "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "bob_s" (T_eprins)) (mk_app (mk_var "proj" (T_unknown)) (mk_var "bob" (T_prin)))) (mk_let (mk_varname "l" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))) (mk_app (mk_app (mk_var "psi_m" (T_unknown)) (mk_var "l1" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_var "l2" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))) (mk_let (mk_varname "trivial" (T_unknown)) (mk_abs (mk_varname "_16_304" (T_unit)) (mk_var "l" (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_let (mk_varname "_35_565" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));])))) (mk_aspar (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "trivial" (T_unknown))) (mk_mkwire (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "_35_565" (T_box (T_cons ("Prims.list", [ (T_cons ("Prims.int", []));]))))))))))))));
]
