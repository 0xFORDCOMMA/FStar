open AST

open FFI

let const_meta = AST.Meta ([], AST.Can_b, [], AST.Can_w)

let program = mk_let (mk_varname "alice_s" (T_eprins)) (mk_ffi 1 "FFI.singleton" (FFI.singleton) [  (mk_var "alice" (T_prin)); ] (fun x -> D_v (const_meta, V_eprins x))) (mk_let (mk_varname "bob_s" (T_eprins)) (mk_ffi 1 "FFI.singleton" (FFI.singleton) [  (mk_var "bob" (T_prin)); ] (fun x -> D_v (const_meta, V_eprins x))) (mk_let (mk_varname "ab" (T_cons ("Prins.eprins", []))) (mk_ffi 2 "FFI.union" (FFI.union) [  (mk_var "alice_s" (T_eprins)); (mk_var "bob_s" (T_eprins)); ] (fun x -> D_v (const_meta, V_eprins x))) (mk_let (mk_varname "read_fn" (T_unknown)) (mk_abs (mk_varname "x" (T_unit)) (mk_ffi 1 "FFI.read_int" FFI.read_int [ E_const (C_unit ()) ] (fun x -> mk_v_opaque x slice_id compose_ids slice_id_sps))) (mk_let (mk_varname "mill1" (T_unknown)) (mk_abs (mk_varname "_15_13" (T_unit)) (mk_let (mk_varname "x" (T_box (T_cons ("Prims.int", [])))) (mk_aspar (mk_var "alice_s" (T_eprins)) (mk_var "read_fn" (T_unknown))) (mk_let (mk_varname "y" (T_box (T_cons ("Prims.int", [])))) (mk_aspar (mk_var "bob_s" (T_eprins)) (mk_var "read_fn" (T_unknown))) (mk_let (mk_varname "g" (T_unknown)) (mk_abs (mk_varname "_15_17" (T_unit)) (mk_ffi 2 "Prims.(>)" (Prims.(>)) [  (mk_unbox (mk_var "x" (T_box (T_cons ("Prims.int", []))))); (mk_unbox (mk_var "y" (T_box (T_cons ("Prims.int", []))))); ] (fun x -> D_v (const_meta, V_bool x)))) (mk_assec (mk_var "ab" (T_cons ("Prins.eprins", []))) (mk_var "g" (T_unknown))))))) (mk_let (mk_varname "x" (T_bool)) (mk_app (mk_var "mill1" (T_unknown)) (E_const (C_unit ()))) (mk_ffi 1 "FFI.print_bool" (FFI.print_bool) [  (mk_var "x" (T_bool)); ] (fun x -> D_v (const_meta, V_unit))))))))

