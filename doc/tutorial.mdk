Title         : F* - guide
Subtitle      : Certifying program correctness with F*
Heading Base  : 2
Author        :

[TITLE]
[TOC]


# Presentation

F\* is a verification-oriented programming language developed at
[Microsoft Research](http://research.microsoft.com/en-us). It follows in
the tradition of the ML family of languages in that it is a typed,
strict, higher-order programming language. However, its type system is
significantly richer than ML's, allowing functional correctness
specifications to be stated and checked semi-automatically.

This tutorial provides a first taste of verified programming in F\*. We
will focus initially on writing several small, purely functional
programs and write specifications for these programs that can be
automatically verified by F\*. Next, we will discuss verifying
higher-order programs that also make use of state. Finally, we consider
designing and implementing a small cryptographic protocol in a style
suitable for verification. Be sure to follow along with the examples by
clicking the **load in editor** link in the corner. See what F\* says,
try your own programs, and experiment!

It will help if the reader is already familiar with functional
programming languages in the ML family, e.g., Standard ML, Ocaml, F#, or
Haskell---we provide a quick review of basic concepts for those a little
rusty. If you lack this background, there are several useful resources
on the web, e.g., [TryF#](http://tryfsharp.org), or this
[introduction to Caml](http://www.cs.jhu.edu/~scott/pl/lectures/caml-intro.html).

Please send feedback, comments and/or corrections regarding this
tutorial to Nikhil Swamy by email at the following address: nswamy 'AT'
microsoft 'DOT' com.


## More about F\*

We have used F\* to construct many verified programs, including
implementations of security protocols, web servers, web browser
extensions, and even parts of the F\* compiler itself. F\* can also be
used as an intermediate verification language. Rather than writing
programs in F\* directly, programs written in other languages can be
translated to F\* and then verified. We have built translations from a
variety of languages to F\*, including
[JavaScript](http://research.microsoft.com/~nswamy/papers/dijkstra-pldi13.pdf),
[F7](http://research.microsoft.com/f7), and
[DKAL](http://research.microsoft.com/en-us/projects/dkal). F\* can also
be securely compiled to various platforms. For example,
[this paper](http://research.microsoft.com/apps/pubs/?id=120933)
describes how we compile F\* to .NET bytecode while preserving types;
and
[this page](http://research.microsoft.com/en-us/um/people/nswamy/supp/full-abstraction.html)
describes a fully abstract translation from F\* to JavaScript.

To find out more, check out the
[F\* website](http://research.microsoft.com/fstar): you'll find links to
several papers and to a compiler download (including sources). With the
compiler, you will be able to run F\* programs, provided you have the
.NET 4.0 virtual machine installed. You can also get the development
version [on github](http://github.com/FStarLang/FStar).
